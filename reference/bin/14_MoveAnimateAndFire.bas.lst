------- FILE 14_MoveAnimateAndFire.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 14_MoveAnimateAndFire.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 14_MoveAnimateAndFire.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE 14_MoveAnimateAndFire.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
------- FILE 14_MoveAnimateAndFire.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 5d f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8					      ifnconst	no_blank_lines
    279  f0d8					      ifnconst	playercolors
    280  f0d8		       a5 90		      lda	missile0height	;3
    281  f0da		       c7 91		      dcp	missile0y	;5
    282  f0dc		       e5 f6		      sbc	stack1
    283  f0de		       85 1d		      sta	ENAM0	;3
    284  f0e0				  -	      else
    285  f0e0				  -	      lda	(player0color),y
    286  f0e0				  -	      sta	player0colorstore
    287  f0e0				  -	      sleep	6
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef				  -	      ifconst	PFcolors
    403  f0ef				  -	      tay
    404  f0ef				  -	      lda	(pfcolortable),y
    405  f0ef				  -	      ifnconst	backgroundchange
    406  f0ef				  -	      sta	COLUPF
    407  f0ef				  -	      else
    408  f0ef				  -	      sta	COLUBK
    409  f0ef				  -	      endif
    410  f0ef				  -	      ifconst	pfrowheight
    411  f0ef				  -	      lda	#pfrowheight
    412  f0ef				  -	      else
    413  f0ef				  -	      ifnconst	pfres
    414  f0ef				  -	      lda	#8
    415  f0ef				  -	      else
    416  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0ef				  -	      endif
    418  f0ef				  -	      endif
    419  f0ef				  -	      sta	temp1
    420  f0ef					      endif
    421  f0ef					      ifnconst	PFcolorandheight
    422  f0ef					      ifnconst	PFcolors
    423  f0ef					      ifnconst	PFheights
    424  f0ef					      ifnconst	no_blank_lines
    425  f0ef							; read paddle 0
    426  f0ef							; lo-res paddle read
    427  f0ef							; bit INPT0
    428  f0ef							; bmi paddleskipread
    429  f0ef							; inc paddle0
    430  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    432  f0f4				  -	      ifconst	pfrowheight
    433  f0f4				  -	      lda	#pfrowheight
    434  f0f4					      else
    435  f0f4					      ifnconst	pfres
    436  f0f4		       a9 08		      lda	#8
    437  f0f6				  -	      else
    438  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f6					      endif
    440  f0f6					      endif
    441  f0f6		       85 9c		      sta	temp1
    442  f0f8					      endif
    443  f0f8					      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    460  f106				  -	      else
    461  f106				  -	      ldy	#124
    462  f106				  -	      lda	(pfcolortable),y
    463  f106				  -	      sta	COLUPF
    464  f106					      endif
    465  f106
    466  f106				  -	      ifconst	PFheights
    467  f106				  -	      ldx	#1
    468  f106				  -			;sleep 4
    469  f106				  -	      sleep	3	; this was over 1 cycle
    470  f106					      else
    471  f106		       a6 ef		      ldx	playfieldpos
    472  f108							;sleep 3
      0  f108					      sleep	2	; this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    474  f109					      endif
    475  f109
    476  f109		       4c 27 f1 	      jmp	enterlastkernel
    477  f10c
    478  f10c				  -	      else
    479  f10c				  -lastkernelline
    480  f10c				  -
    481  f10c				  -	      ifconst	PFheights
    482  f10c				  -	      ldx	#1
    483  f10c				  -			;sleep 5
    484  f10c				  -	      sleep	4	; this was over 1 cycle
    485  f10c				  -	      else
    486  f10c				  -	      ldx	playfieldpos
    487  f10c				  -			;sleep 4
    488  f10c				  -	      sleep	3	; this was over 1 cycle
    489  f10c				  -	      endif
    490  f10c				  -
    491  f10c				  -	      cpx	#0
    492  f10c				  -	      bne	.enterfromNBL
    493  f10c				  -	      jmp	no_blank_lines_bailout
    494  f10c					      endif
    495  f10c
    496  f10c				  -	      if	((<*)>$d5)
    497  f10c				  -	      align	256
    498  f10c					      endif
    499  f10c							; this is a kludge to prevent page wrapping - fix!!!
    500  f10c
    501  f10c				   .skipDrawlastP1
    502  f10c		       a9 00		      lda	#0
    503  f10e		       a8		      tay		; added so we don't cross a page
    504  f10f		       4c 39 f1 	      jmp	.continuelastP1
    505  f112
    506  f112				   .endkerloop		; enter at cycle 59??
    507  f112
    508  f112		       ea		      nop
    509  f113
    510  f113				   .enterfromNBL
    511  f113				  -	      ifconst	pfres
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f113				  -	      sty	PF1L	;3
    514  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f113				  -	      sty	PF2L	;3
    516  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f113				  -	      sty	PF1R	; possibly too early?
    518  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f113				  -	      sty	PF2R	;3
    520  f113					      else
    521  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f116		       84 0e		      sty	PF1L	;3
    523  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11b		       84 0f		      sty	PF2L	;3
    525  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f120		       84 0e		      sty	PF1R	; possibly too early?
    527  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f125		       84 0f		      sty	PF2R	;3
    529  f127					      endif
    530  f127
    531  f127				   enterlastkernel
    532  f127		       a5 92		      lda	ballheight
    533  f129
    534  f129							; tya
    535  f129		       c7 89		      dcp	bally
    536  f12b							; sleep 4
    537  f12b
    538  f12b							; sbc stack3
    539  f12b		       2a		      rol
    540  f12c		       2a		      rol
    541  f12d		       85 1f		      sta	ENABL
    542  f12f
    543  f12f		       a5 8f		      lda	player1height	;3
    544  f131		       c7 86		      dcp	player1y	;5
    545  f133		       90 d7		      bcc	.skipDrawlastP1
    546  f135		       a4 86		      ldy	player1y	;3
    547  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f139							; so it doesn't cross a page boundary!
    549  f139
    550  f139				   .continuelastP1
    551  f139		       85 1c		      sta	GRP1	;3
    552  f13b
    553  f13b					      ifnconst	player1colors
    554  f13b		       a5 87		      lda	missile1height	;3
    555  f13d		       c7 88		      dcp	missile1y	;5
    556  f13f				  -	      else
    557  f13f				  -	      lda	(player1color),y
    558  f13f				  -	      sta	COLUP1
    559  f13f					      endif
    560  f13f
    561  f13f		       ca		      dex
    562  f140							;dec temp4 ; might try putting this above PF writes
    563  f140		       f0 36		      beq	endkernel
    564  f142
    565  f142
    566  f142				  -	      ifconst	pfres
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f142				  -	      sty	PF1L	;3
    569  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f142				  -	      sty	PF2L	;3
    571  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f142				  -	      sty	PF1R	; possibly too early?
    573  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f142				  -	      sty	PF2R	;3
    575  f142					      else
    576  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f145		       84 0e		      sty	PF1L	;3
    578  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14a		       84 0f		      sty	PF2L	;3
    580  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f14f		       84 0e		      sty	PF1R	; possibly too early?
    582  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f154		       84 0f		      sty	PF2R	;3
    584  f156					      endif
    585  f156
    586  f156					      ifnconst	player1colors
    587  f156		       2a		      rol		;2
    588  f157		       2a		      rol		;2
    589  f158		       85 1e		      sta	ENAM1	;3
    590  f15a				  -	      else
    591  f15a				  -	      ifnconst	playercolors
    592  f15a				  -	      sleep	7
    593  f15a				  -	      else
    594  f15a				  -	      lda.w	player0colorstore
    595  f15a				  -	      sta	COLUP0
    596  f15a				  -	      endif
    597  f15a					      endif
    598  f15a
    599  f15a		       ad 8e 00 	      lda.w	player0height
    600  f15d		       c7 85		      dcp	player0y
    601  f15f		       90 11		      bcc	.skipDrawlastP0
    602  f161		       a4 85		      ldy	player0y
    603  f163		       b1 8a		      lda	(player0pointer),y
    604  f165				   .continuelastP0
    605  f165		       85 1b		      sta	GRP0
    606  f167
    607  f167
    608  f167
    609  f167					      ifnconst	no_blank_lines
    610  f167		       a5 90		      lda	missile0height	;3
    611  f169		       c7 91		      dcp	missile0y	;5
    612  f16b		       e5 f6		      sbc	stack1
    613  f16d		       85 1d		      sta	ENAM0	;3
    614  f16f		       4c 12 f1 	      jmp	.endkerloop
    615  f172				  -	      else
    616  f172				  -	      ifconst	readpaddle
    617  f172				  -	      ldy	currentpaddle
    618  f172				  -	      lda	INPT0,y
    619  f172				  -	      bpl	noreadpaddle2
    620  f172				  -	      inc	paddle
    621  f172				  -	      jmp	.endkerloop
    622  f172				  -noreadpaddle2
    623  f172				  -	      sleep	4
    624  f172				  -	      jmp	.endkerloop
    625  f172				  -	      else		; no_blank_lines and no paddle reading
    626  f172				  -	      pla
    627  f172				  -	      pha		; 14 cycles in 4 bytes
    628  f172				  -	      pla
    629  f172				  -	      pha
    630  f172				  -			; sleep 14
    631  f172				  -	      jmp	.endkerloop
    632  f172				  -	      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 65 f1 	      jmp	.continuelastP0
    647  f178
    648  f178				  -	      ifconst	no_blank_lines
    649  f178				  -no_blank_lines_bailout
    650  f178				  -	      ldx	#0
    651  f178					      endif
    652  f178
    653  f178				   endkernel
    654  f178							; 6 digit score routine
    655  f178		       86 0e		      stx	PF1
    656  f17a		       86 0f		      stx	PF2
    657  f17c		       86 0d		      stx	PF0
    658  f17e		       18		      clc
    659  f17f
    660  f17f				  -	      ifconst	pfrowheight
    661  f17f				  -	      lda	#pfrowheight+2
    662  f17f					      else
    663  f17f					      ifnconst	pfres
    664  f17f		       a9 0a		      lda	#10
    665  f181				  -	      else
    666  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f181					      endif
    668  f181					      endif
    669  f181
    670  f181		       e5 ef		      sbc	playfieldpos
    671  f183		       85 ef		      sta	playfieldpos
    672  f185		       8a		      txa
    673  f186
    674  f186				  -	      ifconst	shakescreen
    675  f186				  -	      bit	shakescreen
    676  f186				  -	      bmi	noshakescreen2
    677  f186				  -	      ldx	#$3D
    678  f186				  -noshakescreen2
    679  f186					      endif
    680  f186
    681  f186		       95 02		      sta	WSYNC,x
    682  f188
    683  f188							; STA WSYNC ;first one, need one more
    684  f188		       85 0b		      sta	REFP0
    685  f18a		       85 0c		      sta	REFP1
    686  f18c		       85 1b		      STA	GRP0
    687  f18e		       85 1c		      STA	GRP1
    688  f190							; STA PF1
    689  f190							; STA PF2
    690  f190		       85 2b		      sta	HMCLR
    691  f192		       85 1d		      sta	ENAM0
    692  f194		       85 1e		      sta	ENAM1
    693  f196		       85 1f		      sta	ENABL
    694  f198
    695  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19a		       85 85		      sta	player0y
    697  f19c		       a5 9e		      lda	temp3
    698  f19e		       85 86		      sta	player1y
    699  f1a0					      ifnconst	player1colors
    700  f1a0		       a5 a1		      lda	temp6
    701  f1a2		       85 88		      sta	missile1y
    702  f1a4					      endif
    703  f1a4					      ifnconst	playercolors
    704  f1a4					      ifnconst	readpaddle
    705  f1a4		       a5 a0		      lda	temp5
    706  f1a6		       85 91		      sta	missile0y
    707  f1a8					      endif
    708  f1a8					      endif
    709  f1a8		       a5 f7		      lda	stack2
    710  f1aa		       85 89		      sta	bally
    711  f1ac
    712  f1ac							; strangely, this isn't required any more. might have
    713  f1ac							; resulted from the no_blank_lines score bounce fix
    714  f1ac							;ifconst no_blank_lines
    715  f1ac							;sta WSYNC
    716  f1ac							;endif
    717  f1ac
    718  f1ac		       ad 84 02 	      lda	INTIM
    719  f1af		       18		      clc
    720  f1b0					      ifnconst	vblank_time
    721  f1b0		       69 8e		      adc	#43+12+87
    722  f1b2				  -	      else
    723  f1b2				  -	      adc	#vblank_time+12+87
    724  f1b2				  -
    725  f1b2					      endif
    726  f1b2							; sta WSYNC
    727  f1b2		       8d 96 02 	      sta	TIM64T
    728  f1b5
    729  f1b5				  -	      ifconst	minikernel
    730  f1b5				  -	      jsr	minikernel
    731  f1b5					      endif
    732  f1b5
    733  f1b5							; now reassign temp vars for score pointers
    734  f1b5
    735  f1b5							; score pointers contain:
    736  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b5							; swap lo2->temp1
    738  f1b5							; swap lo4->temp3
    739  f1b5							; swap lo6->temp5
    740  f1b5					      ifnconst	noscore
    741  f1b5		       a5 97		      lda	scorepointers+1
    742  f1b7							; ldy temp1
    743  f1b7		       85 9c		      sta	temp1
    744  f1b9							; sty scorepointers+1
    745  f1b9
    746  f1b9		       a5 99		      lda	scorepointers+3
    747  f1bb							; ldy temp3
    748  f1bb		       85 9e		      sta	temp3
    749  f1bd							; sty scorepointers+3
    750  f1bd
    751  f1bd
    752  f1bd		       85 2b		      sta	HMCLR
    753  f1bf		       ba		      tsx
    754  f1c0		       86 f6		      stx	stack1
    755  f1c2		       a2 e0		      ldx	#$E0
    756  f1c4		       86 20		      stx	HMP0
    757  f1c6
    758  f1c6		       a5 a3		      LDA	scorecolor
    759  f1c8		       85 06		      STA	COLUP0
    760  f1ca		       85 07		      STA	COLUP1
    761  f1cc				  -	      ifconst	scorefade
    762  f1cc				  -	      STA	stack2
    763  f1cc					      endif
    764  f1cc				  -	      ifconst	pfscore
    765  f1cc				  -	      lda	pfscorecolor
    766  f1cc				  -	      sta	COLUPF
    767  f1cc					      endif
    768  f1cc		       85 02		      sta	WSYNC
    769  f1ce		       a2 00		      ldx	#0
    770  f1d0		       86 1b		      STx	GRP0
    771  f1d2		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1d4
    773  f1d4		       a5 9b		      lda	scorepointers+5
    774  f1d6							; ldy temp5
    775  f1d6		       95 a0		      sta	temp5,x
    776  f1d8							; sty scorepointers+5
    777  f1d8		       a9 ff		      lda	#>scoretable
    778  f1da		       85 97		      sta	scorepointers+1
    779  f1dc		       85 99		      sta	scorepointers+3
    780  f1de		       85 9b		      sta	scorepointers+5
    781  f1e0		       85 9d		      sta	temp2
    782  f1e2		       85 9f		      sta	temp4
    783  f1e4		       85 a1		      sta	temp6
    784  f1e6		       a0 07		      LDY	#7
    785  f1e8		       84 25		      STY	VDELP0
    786  f1ea		       85 10		      STA	RESP0
    787  f1ec		       85 11		      STA	RESP1
    788  f1ee
    789  f1ee
    790  f1ee		       a9 03		      LDA	#$03
    791  f1f0		       85 04		      STA	NUSIZ0
    792  f1f2		       85 05		      STA	NUSIZ1
    793  f1f4		       85 26		      STA	VDELP1
    794  f1f6		       a9 f0		      LDA	#$F0
    795  f1f8		       85 21		      STA	HMP1
    796  f1fa		       b1 96		      lda	(scorepointers),y
    797  f1fc		       85 1b		      sta	GRP0
    798  f1fe		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f200		       4c 0b f2 	      jmp	beginscore
    800  f203
    801  f203
    802  f203				  -	      if	((<*)>$d4)
    803  f203				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f203					      endif
    805  f203
    806  f203				   loop2
    807  f203		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f205		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f207				  -	      ifconst	pfscore
    810  f207				  -	      lda.w	pfscore1
    811  f207				  -	      sta	PF1
    812  f207					      else
    813  f207				  -	      ifconst	scorefade
    814  f207				  -	      sleep	2
    815  f207				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f207					      else
      0  f207					      sleep	7
      1  f207				   .CYCLES    SET	7
      2  f207
      3  f207				  -	      IF	.CYCLES < 2
      4  f207				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f207				  -	      ERR
      6  f207					      ENDIF
      7  f207
      8  f207					      IF	.CYCLES & 1
      9  f207					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f207		       04 00		      nop	0
     11  f209				  -	      ELSE
     12  f209				  -	      bit	VSYNC
     13  f209					      ENDIF
     14  f209				   .CYCLES    SET	.CYCLES - 3
     15  f209					      ENDIF
     16  f209
     17  f209					      REPEAT	.CYCLES / 2
     18  f209		       ea		      nop
     17  f209					      REPEND
     18  f20a		       ea		      nop
     19  f20b					      REPEND
    818  f20b					      endif
    819  f20b					      endif
    820  f20b							; cycle 0
    821  f20b				   beginscore
    822  f20b		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f20d		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f20f		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f211		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f213		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f215		       9a		      txs
    828  f216		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f218				  -	      ifconst	scorefade
    830  f218				  -	      lda	stack2
    831  f218					      else
      0  f218					      sleep	3
      1  f218				   .CYCLES    SET	3
      2  f218
      3  f218				  -	      IF	.CYCLES < 2
      4  f218				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f218				  -	      ERR
      6  f218					      ENDIF
      7  f218
      8  f218					      IF	.CYCLES & 1
      9  f218					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f218		       04 00		      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a					      ENDIF
     14  f21a				   .CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a				  -	      REPEAT	.CYCLES / 2
     18  f21a				  -	      nop
     19  f21a					      REPEND
    833  f21a					      endif
    834  f21a
    835  f21a				  -	      ifconst	pfscore
    836  f21a				  -	      lda	pfscore2
    837  f21a				  -	      sta	PF1
    838  f21a					      else
    839  f21a				  -	      ifconst	scorefade
    840  f21a				  -	      sta	COLUP0
    841  f21a				  -	      sta	COLUP1
    842  f21a					      else
      0  f21a					      sleep	6
      1  f21a				   .CYCLES    SET	6
      2  f21a
      3  f21a				  -	      IF	.CYCLES < 2
      4  f21a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21a				  -	      ERR
      6  f21a					      ENDIF
      7  f21a
      8  f21a				  -	      IF	.CYCLES & 1
      9  f21a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21a				  -	      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a				  -	      ENDIF
     14  f21a				  -.CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a					      REPEAT	.CYCLES / 2
     18  f21a		       ea		      nop
     17  f21a					      REPEND
     18  f21b		       ea		      nop
     17  f21b					      REPEND
     18  f21c		       ea		      nop
     19  f21d					      REPEND
    844  f21d					      endif
    845  f21d					      endif
    846  f21d
    847  f21d		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f21f		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f221		       ba		      tsx
    850  f222		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f224		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f226		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f228		       88		      dey
    854  f229		       10 d8		      bpl	loop2	;+2 60 180
    855  f22b
    856  f22b		       a6 f6		      ldx	stack1
    857  f22d		       9a		      txs
    858  f22e							; lda scorepointers+1
    859  f22e		       a4 9c		      ldy	temp1
    860  f230							; sta temp1
    861  f230		       84 97		      sty	scorepointers+1
    862  f232
    863  f232		       a9 00		      LDA	#0
    864  f234		       85 0e		      sta	PF1
    865  f236		       85 1b		      STA	GRP0
    866  f238		       85 1c		      STA	GRP1
    867  f23a		       85 25		      STA	VDELP0
    868  f23c		       85 26		      STA	VDELP1	;do we need these
    869  f23e		       85 04		      STA	NUSIZ0
    870  f240		       85 05		      STA	NUSIZ1
    871  f242
    872  f242							; lda scorepointers+3
    873  f242		       a4 9e		      ldy	temp3
    874  f244							; sta temp3
    875  f244		       84 99		      sty	scorepointers+3
    876  f246
    877  f246							; lda scorepointers+5
    878  f246		       a4 a0		      ldy	temp5
    879  f248							; sta temp5
    880  f248		       84 9b		      sty	scorepointers+5
    881  f24a					      endif		;noscore
    882  f24a				  -	      ifconst	readpaddle
    883  f24a				  -	      lda	#%11000010
    884  f24a					      else
    885  f24a				  -	      ifconst	qtcontroller
    886  f24a				  -	      lda	qtcontroller
    887  f24a				  -	      lsr		; bit 0 in carry
    888  f24a				  -	      lda	#4
    889  f24a				  -	      ror		; carry into top of A
    890  f24a					      else
    891  f24a		       a9 02		      lda	#2
    892  f24c					      endif		; qtcontroller
    893  f24c					      endif		; readpaddle
    894  f24c		       85 02		      sta	WSYNC
    895  f24e		       85 01		      sta	VBLANK
      0  f250					      RETURN
      1  f250					      ifnconst	bankswitch
      2  f250		       60		      rts
      3  f251				  -	      else
      4  f251				  -	      jmp	BS_return
      5  f251					      endif
    897  f251				  -	      ifconst	shakescreen
    898  f251				  -doshakescreen
    899  f251				  -	      bit	shakescreen
    900  f251				  -	      bmi	noshakescreen
    901  f251				  -	      sta	WSYNC
    902  f251				  -noshakescreen
    903  f251				  -	      ldx	missile0height
    904  f251				  -	      inx
    905  f251				  -	      rts
    906  f251					      endif
    907  f251
    908  f251							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f251
    910  f251							; playfield drawing routines
    911  f251							; you get a 32x12 bitmapped display in a single color :)
    912  f251							; 0-31 and 0-11
    913  f251
    914  f251				   pfclear		; clears playfield - or fill with pattern
    915  f251				  -	      ifconst	pfres
    916  f251				  -	      ldx	#pfres*pfwidth-1
    917  f251					      else
    918  f251		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f253					      endif
    920  f253				   pfclear_loop
    921  f253					      ifnconst	superchip
    922  f253		       95 a4		      sta	playfield,x
    923  f255				  -	      else
    924  f255				  -	      sta	playfield-128,x
    925  f255					      endif
    926  f255		       ca		      dex
    927  f256		       10 fb		      bpl	pfclear_loop
      0  f258					      RETURN
      1  f258					      ifnconst	bankswitch
      2  f258		       60		      rts
      3  f259				  -	      else
      4  f259				  -	      jmp	BS_return
      5  f259					      endif
    929  f259
    930  f259				   setuppointers
    931  f259		       86 9d		      stx	temp2	; store on.off.flip value
    932  f25b		       aa		      tax		; put x-value in x
    933  f25c		       4a		      lsr
    934  f25d		       4a		      lsr
    935  f25e		       4a		      lsr		; divide x pos by 8
    936  f25f		       85 9c		      sta	temp1
    937  f261		       98		      tya
    938  f262		       0a		      asl
    939  f263					      if	pfwidth=4
    940  f263		       0a		      asl		; multiply y pos by 4
    941  f264					      endif		; else multiply by 2
    942  f264		       18		      clc
    943  f265		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f267		       a8		      tay		; put the value in y
    945  f268		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f26a		       60		      rts
    947  f26b
    948  f26b				   pfread
    949  f26b							;x=xvalue, y=yvalue
    950  f26b		       20 59 f2 	      jsr	setuppointers
    951  f26e		       bd d3 f2 	      lda	setbyte,x
    952  f271		       39 a4 00 	      and	playfield,y
    953  f274		       5d d3 f2 	      eor	setbyte,x
    954  f277							; beq readzero
    955  f277							; lda #1
    956  f277							; readzero
      0  f277					      RETURN
      1  f277					      ifnconst	bankswitch
      2  f277		       60		      rts
      3  f278				  -	      else
      4  f278				  -	      jmp	BS_return
      5  f278					      endif
    958  f278
    959  f278				   pfpixel
    960  f278							;x=xvalue, y=yvalue, a=0,1,2
    961  f278		       20 59 f2 	      jsr	setuppointers
    962  f27b
    963  f27b				  -	      ifconst	bankswitch
    964  f27b				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f27b				  -	      beq	pixelon_r	; if "on" go to on
    966  f27b				  -	      lsr
    967  f27b				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f27b				  -	      lda	playfield,y	; if here, it's "flip"
    969  f27b				  -	      eor	setbyte,x
    970  f27b				  -	      ifconst	superchip
    971  f27b				  -	      sta	playfield-128,y
    972  f27b				  -	      else
    973  f27b				  -	      sta	playfield,y
    974  f27b				  -	      endif
    975  f27b				  -	      RETURN
    976  f27b				  -pixelon_r
    977  f27b				  -	      lda	playfield,y
    978  f27b				  -	      ora	setbyte,x
    979  f27b				  -	      ifconst	superchip
    980  f27b				  -	      sta	playfield-128,y
    981  f27b				  -	      else
    982  f27b				  -	      sta	playfield,y
    983  f27b				  -	      endif
    984  f27b				  -	      RETURN
    985  f27b				  -pixeloff_r
    986  f27b				  -	      lda	setbyte,x
    987  f27b				  -	      eor	#$ff
    988  f27b				  -	      and	playfield,y
    989  f27b				  -	      ifconst	superchip
    990  f27b				  -	      sta	playfield-128,y
    991  f27b				  -	      else
    992  f27b				  -	      sta	playfield,y
    993  f27b				  -	      endif
    994  f27b				  -	      RETURN
    995  f27b				  -
    996  f27b					      else
    997  f27b		       4c ac f2 	      jmp	plotpoint
    998  f27e					      endif
    999  f27e
   1000  f27e				   pfhline
   1001  f27e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f27e		       20 59 f2 	      jsr	setuppointers
   1003  f281		       4c 8b f2 	      jmp	noinc
   1004  f284				   keepgoing
   1005  f284		       e8		      inx
   1006  f285		       8a		      txa
   1007  f286		       29 07		      and	#7
   1008  f288		       d0 01		      bne	noinc
   1009  f28a		       c8		      iny
   1010  f28b				   noinc
   1011  f28b		       20 ac f2 	      jsr	plotpoint
   1012  f28e		       e4 9e		      cpx	temp3
   1013  f290		       30 f2		      bmi	keepgoing
      0  f292					      RETURN
      1  f292					      ifnconst	bankswitch
      2  f292		       60		      rts
      3  f293				  -	      else
      4  f293				  -	      jmp	BS_return
      5  f293					      endif
   1015  f293
   1016  f293				   pfvline
   1017  f293							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f293		       20 59 f2 	      jsr	setuppointers
   1019  f296		       84 9c		      sty	temp1	; store memory location offset
   1020  f298		       e6 9e		      inc	temp3	; increase final x by 1
   1021  f29a		       a5 9e		      lda	temp3
   1022  f29c		       0a		      asl
   1023  f29d					      if	pfwidth=4
   1024  f29d		       0a		      asl		; multiply by 4
   1025  f29e					      endif		; else multiply by 2
   1026  f29e		       85 9e		      sta	temp3	; store it
   1027  f2a0							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2a0							; right now, temp1=y=starting memory location, temp3=final
   1029  f2a0							; x should equal original x value
   1030  f2a0				   keepgoingy
   1031  f2a0		       20 ac f2 	      jsr	plotpoint
   1032  f2a3		       c8		      iny
   1033  f2a4		       c8		      iny
   1034  f2a5					      if	pfwidth=4
   1035  f2a5		       c8		      iny
   1036  f2a6		       c8		      iny
   1037  f2a7					      endif
   1038  f2a7		       c4 9e		      cpy	temp3
   1039  f2a9		       30 f5		      bmi	keepgoingy
      0  f2ab					      RETURN
      1  f2ab					      ifnconst	bankswitch
      2  f2ab		       60		      rts
      3  f2ac				  -	      else
      4  f2ac				  -	      jmp	BS_return
      5  f2ac					      endif
   1041  f2ac
   1042  f2ac				   plotpoint
   1043  f2ac		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2ae		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2b0		       4a		      lsr
   1046  f2b1		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2b3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2b6		       5d d3 f2 	      eor	setbyte,x
   1049  f2b9				  -	      ifconst	superchip
   1050  f2b9				  -	      sta	playfield-128,y
   1051  f2b9					      else
   1052  f2b9		       99 a4 00 	      sta	playfield,y
   1053  f2bc					      endif
   1054  f2bc		       60		      rts
   1055  f2bd				   pixelon
   1056  f2bd		       b9 a4 00 	      lda	playfield,y
   1057  f2c0		       1d d3 f2 	      ora	setbyte,x
   1058  f2c3				  -	      ifconst	superchip
   1059  f2c3				  -	      sta	playfield-128,y
   1060  f2c3					      else
   1061  f2c3		       99 a4 00 	      sta	playfield,y
   1062  f2c6					      endif
   1063  f2c6		       60		      rts
   1064  f2c7				   pixeloff
   1065  f2c7		       bd d3 f2 	      lda	setbyte,x
   1066  f2ca		       49 ff		      eor	#$ff
   1067  f2cc		       39 a4 00 	      and	playfield,y
   1068  f2cf				  -	      ifconst	superchip
   1069  f2cf				  -	      sta	playfield-128,y
   1070  f2cf					      else
   1071  f2cf		       99 a4 00 	      sta	playfield,y
   1072  f2d2					      endif
   1073  f2d2		       60		      rts
   1074  f2d3
   1075  f2d3				   setbyte
   1076  f2d3					      ifnconst	pfcenter
   1077  f2d3		       80		      .byte.b	$80
   1078  f2d4		       40		      .byte.b	$40
   1079  f2d5		       20		      .byte.b	$20
   1080  f2d6		       10		      .byte.b	$10
   1081  f2d7		       08		      .byte.b	$08
   1082  f2d8		       04		      .byte.b	$04
   1083  f2d9		       02		      .byte.b	$02
   1084  f2da		       01		      .byte.b	$01
   1085  f2db					      endif
   1086  f2db		       01		      .byte.b	$01
   1087  f2dc		       02		      .byte.b	$02
   1088  f2dd		       04		      .byte.b	$04
   1089  f2de		       08		      .byte.b	$08
   1090  f2df		       10		      .byte.b	$10
   1091  f2e0		       20		      .byte.b	$20
   1092  f2e1		       40		      .byte.b	$40
   1093  f2e2		       80		      .byte.b	$80
   1094  f2e3		       80		      .byte.b	$80
   1095  f2e4		       40		      .byte.b	$40
   1096  f2e5		       20		      .byte.b	$20
   1097  f2e6		       10		      .byte.b	$10
   1098  f2e7		       08		      .byte.b	$08
   1099  f2e8		       04		      .byte.b	$04
   1100  f2e9		       02		      .byte.b	$02
   1101  f2ea		       01		      .byte.b	$01
   1102  f2eb		       01		      .byte.b	$01
   1103  f2ec		       02		      .byte.b	$02
   1104  f2ed		       04		      .byte.b	$04
   1105  f2ee		       08		      .byte.b	$08
   1106  f2ef		       10		      .byte.b	$10
   1107  f2f0		       20		      .byte.b	$20
   1108  f2f1		       40		      .byte.b	$40
   1109  f2f2		       80		      .byte.b	$80
   1110  f2f3							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f2f3
   1112  f2f3				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f2f3		       d0 13		      bne	notleft
   1114  f2f5							;left
   1115  f2f5				  -	      ifconst	pfres
   1116  f2f5				  -	      ldx	#pfres*4
   1117  f2f5					      else
   1118  f2f5		       a2 30		      ldx	#48
   1119  f2f7					      endif
   1120  f2f7				   leftloop
   1121  f2f7		       b5 a3		      lda	playfield-1,x
   1122  f2f9		       4a		      lsr
   1123  f2fa
   1124  f2fa				  -	      ifconst	superchip
   1125  f2fa				  -	      lda	playfield-2,x
   1126  f2fa				  -	      rol
   1127  f2fa				  -	      sta	playfield-130,x
   1128  f2fa				  -	      lda	playfield-3,x
   1129  f2fa				  -	      ror
   1130  f2fa				  -	      sta	playfield-131,x
   1131  f2fa				  -	      lda	playfield-4,x
   1132  f2fa				  -	      rol
   1133  f2fa				  -	      sta	playfield-132,x
   1134  f2fa				  -	      lda	playfield-1,x
   1135  f2fa				  -	      ror
   1136  f2fa				  -	      sta	playfield-129,x
   1137  f2fa					      else
   1138  f2fa		       36 a2		      rol	playfield-2,x
   1139  f2fc		       76 a1		      ror	playfield-3,x
   1140  f2fe		       36 a0		      rol	playfield-4,x
   1141  f300		       76 a3		      ror	playfield-1,x
   1142  f302					      endif
   1143  f302
   1144  f302		       8a		      txa
   1145  f303		       cb 04		      sbx	#4
   1146  f305		       d0 f0		      bne	leftloop
      0  f307					      RETURN
      1  f307					      ifnconst	bankswitch
      2  f307		       60		      rts
      3  f308				  -	      else
      4  f308				  -	      jmp	BS_return
      5  f308					      endif
   1148  f308
   1149  f308				   notleft
   1150  f308		       4a		      lsr
   1151  f309		       90 13		      bcc	notright
   1152  f30b							;right
   1153  f30b
   1154  f30b				  -	      ifconst	pfres
   1155  f30b				  -	      ldx	#pfres*4
   1156  f30b					      else
   1157  f30b		       a2 30		      ldx	#48
   1158  f30d					      endif
   1159  f30d				   rightloop
   1160  f30d		       b5 a0		      lda	playfield-4,x
   1161  f30f		       4a		      lsr
   1162  f310				  -	      ifconst	superchip
   1163  f310				  -	      lda	playfield-3,x
   1164  f310				  -	      rol
   1165  f310				  -	      sta	playfield-131,x
   1166  f310				  -	      lda	playfield-2,x
   1167  f310				  -	      ror
   1168  f310				  -	      sta	playfield-130,x
   1169  f310				  -	      lda	playfield-1,x
   1170  f310				  -	      rol
   1171  f310				  -	      sta	playfield-129,x
   1172  f310				  -	      lda	playfield-4,x
   1173  f310				  -	      ror
   1174  f310				  -	      sta	playfield-132,x
   1175  f310					      else
   1176  f310		       36 a1		      rol	playfield-3,x
   1177  f312		       76 a2		      ror	playfield-2,x
   1178  f314		       36 a3		      rol	playfield-1,x
   1179  f316		       76 a0		      ror	playfield-4,x
   1180  f318					      endif
   1181  f318		       8a		      txa
   1182  f319		       cb 04		      sbx	#4
   1183  f31b		       d0 f0		      bne	rightloop
      0  f31d					      RETURN
      1  f31d					      ifnconst	bankswitch
      2  f31d		       60		      rts
      3  f31e				  -	      else
      4  f31e				  -	      jmp	BS_return
      5  f31e					      endif
   1185  f31e
   1186  f31e				   notright
   1187  f31e		       4a		      lsr
   1188  f31f		       90 49		      bcc	notup
   1189  f321							;up
   1190  f321		       4a		      lsr
   1191  f322		       90 02		      bcc	onedecup
   1192  f324		       c6 ef		      dec	playfieldpos
   1193  f326				   onedecup
   1194  f326		       c6 ef		      dec	playfieldpos
   1195  f328		       f0 02		      beq	shiftdown
   1196  f32a		       10 3d		      bpl	noshiftdown2
   1197  f32c				   shiftdown
   1198  f32c				  -	      ifconst	pfrowheight
   1199  f32c				  -	      lda	#pfrowheight
   1200  f32c					      else
   1201  f32c					      ifnconst	pfres
   1202  f32c		       a9 08		      lda	#8
   1203  f32e				  -	      else
   1204  f32e				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f32e					      endif
   1206  f32e					      endif
   1207  f32e
   1208  f32e		       85 ef		      sta	playfieldpos
   1209  f330		       a5 a7		      lda	playfield+3
   1210  f332		       85 9f		      sta	temp4
   1211  f334		       a5 a6		      lda	playfield+2
   1212  f336		       85 9e		      sta	temp3
   1213  f338		       a5 a5		      lda	playfield+1
   1214  f33a		       85 9d		      sta	temp2
   1215  f33c		       a5 a4		      lda	playfield
   1216  f33e		       85 9c		      sta	temp1
   1217  f340		       a2 00		      ldx	#0
   1218  f342				   up2
   1219  f342		       b5 a8		      lda	playfield+4,x
   1220  f344				  -	      ifconst	superchip
   1221  f344				  -	      sta	playfield-128,x
   1222  f344				  -	      lda	playfield+5,x
   1223  f344				  -	      sta	playfield-127,x
   1224  f344				  -	      lda	playfield+6,x
   1225  f344				  -	      sta	playfield-126,x
   1226  f344				  -	      lda	playfield+7,x
   1227  f344				  -	      sta	playfield-125,x
   1228  f344					      else
   1229  f344		       95 a4		      sta	playfield,x
   1230  f346		       b5 a9		      lda	playfield+5,x
   1231  f348		       95 a5		      sta	playfield+1,x
   1232  f34a		       b5 aa		      lda	playfield+6,x
   1233  f34c		       95 a6		      sta	playfield+2,x
   1234  f34e		       b5 ab		      lda	playfield+7,x
   1235  f350		       95 a7		      sta	playfield+3,x
   1236  f352					      endif
   1237  f352		       8a		      txa
   1238  f353		       cb fc		      sbx	#252
   1239  f355				  -	      ifconst	pfres
   1240  f355				  -	      cpx	#(pfres-1)*4
   1241  f355					      else
   1242  f355		       e0 2c		      cpx	#44
   1243  f357					      endif
   1244  f357		       d0 e9		      bne	up2
   1245  f359
   1246  f359		       a5 9f		      lda	temp4
   1247  f35b
   1248  f35b				  -	      ifconst	superchip
   1249  f35b				  -	      ifconst	pfres
   1250  f35b				  -	      sta	playfield+pfres*4-129
   1251  f35b				  -	      lda	temp3
   1252  f35b				  -	      sta	playfield+pfres*4-130
   1253  f35b				  -	      lda	temp2
   1254  f35b				  -	      sta	playfield+pfres*4-131
   1255  f35b				  -	      lda	temp1
   1256  f35b				  -	      sta	playfield+pfres*4-132
   1257  f35b				  -	      else
   1258  f35b				  -	      sta	playfield+47-128
   1259  f35b				  -	      lda	temp3
   1260  f35b				  -	      sta	playfield+46-128
   1261  f35b				  -	      lda	temp2
   1262  f35b				  -	      sta	playfield+45-128
   1263  f35b				  -	      lda	temp1
   1264  f35b				  -	      sta	playfield+44-128
   1265  f35b				  -	      endif
   1266  f35b					      else
   1267  f35b				  -	      ifconst	pfres
   1268  f35b				  -	      sta	playfield+pfres*4-1
   1269  f35b				  -	      lda	temp3
   1270  f35b				  -	      sta	playfield+pfres*4-2
   1271  f35b				  -	      lda	temp2
   1272  f35b				  -	      sta	playfield+pfres*4-3
   1273  f35b				  -	      lda	temp1
   1274  f35b				  -	      sta	playfield+pfres*4-4
   1275  f35b					      else
   1276  f35b		       85 d3		      sta	playfield+47
   1277  f35d		       a5 9e		      lda	temp3
   1278  f35f		       85 d2		      sta	playfield+46
   1279  f361		       a5 9d		      lda	temp2
   1280  f363		       85 d1		      sta	playfield+45
   1281  f365		       a5 9c		      lda	temp1
   1282  f367		       85 d0		      sta	playfield+44
   1283  f369					      endif
   1284  f369					      endif
   1285  f369				   noshiftdown2
      0  f369					      RETURN
      1  f369					      ifnconst	bankswitch
      2  f369		       60		      rts
      3  f36a				  -	      else
      4  f36a				  -	      jmp	BS_return
      5  f36a					      endif
   1287  f36a
   1288  f36a
   1289  f36a				   notup
   1290  f36a							;down
   1291  f36a		       4a		      lsr
   1292  f36b		       b0 02		      bcs	oneincup
   1293  f36d		       e6 ef		      inc	playfieldpos
   1294  f36f				   oneincup
   1295  f36f		       e6 ef		      inc	playfieldpos
   1296  f371		       a5 ef		      lda	playfieldpos
   1297  f373
   1298  f373				  -	      ifconst	pfrowheight
   1299  f373				  -	      cmp	#pfrowheight+1
   1300  f373					      else
   1301  f373					      ifnconst	pfres
   1302  f373		       c9 09		      cmp	#9
   1303  f375				  -	      else
   1304  f375				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f375					      endif
   1306  f375					      endif
   1307  f375
   1308  f375		       90 3b		      bcc	noshiftdown
   1309  f377		       a9 01		      lda	#1
   1310  f379		       85 ef		      sta	playfieldpos
   1311  f37b
   1312  f37b				  -	      ifconst	pfres
   1313  f37b				  -	      lda	playfield+pfres*4-1
   1314  f37b				  -	      sta	temp4
   1315  f37b				  -	      lda	playfield+pfres*4-2
   1316  f37b				  -	      sta	temp3
   1317  f37b				  -	      lda	playfield+pfres*4-3
   1318  f37b				  -	      sta	temp2
   1319  f37b				  -	      lda	playfield+pfres*4-4
   1320  f37b					      else
   1321  f37b		       a5 d3		      lda	playfield+47
   1322  f37d		       85 9f		      sta	temp4
   1323  f37f		       a5 d2		      lda	playfield+46
   1324  f381		       85 9e		      sta	temp3
   1325  f383		       a5 d1		      lda	playfield+45
   1326  f385		       85 9d		      sta	temp2
   1327  f387		       a5 d0		      lda	playfield+44
   1328  f389					      endif
   1329  f389
   1330  f389		       85 9c		      sta	temp1
   1331  f38b
   1332  f38b				  -	      ifconst	pfres
   1333  f38b				  -	      ldx	#(pfres-1)*4
   1334  f38b					      else
   1335  f38b		       a2 2c		      ldx	#44
   1336  f38d					      endif
   1337  f38d				   down2
   1338  f38d		       b5 a3		      lda	playfield-1,x
   1339  f38f				  -	      ifconst	superchip
   1340  f38f				  -	      sta	playfield-125,x
   1341  f38f				  -	      lda	playfield-2,x
   1342  f38f				  -	      sta	playfield-126,x
   1343  f38f				  -	      lda	playfield-3,x
   1344  f38f				  -	      sta	playfield-127,x
   1345  f38f				  -	      lda	playfield-4,x
   1346  f38f				  -	      sta	playfield-128,x
   1347  f38f					      else
   1348  f38f		       95 a7		      sta	playfield+3,x
   1349  f391		       b5 a2		      lda	playfield-2,x
   1350  f393		       95 a6		      sta	playfield+2,x
   1351  f395		       b5 a1		      lda	playfield-3,x
   1352  f397		       95 a5		      sta	playfield+1,x
   1353  f399		       b5 a0		      lda	playfield-4,x
   1354  f39b		       95 a4		      sta	playfield,x
   1355  f39d					      endif
   1356  f39d		       8a		      txa
   1357  f39e		       cb 04		      sbx	#4
   1358  f3a0		       d0 eb		      bne	down2
   1359  f3a2
   1360  f3a2		       a5 9f		      lda	temp4
   1361  f3a4				  -	      ifconst	superchip
   1362  f3a4				  -	      sta	playfield-125
   1363  f3a4				  -	      lda	temp3
   1364  f3a4				  -	      sta	playfield-126
   1365  f3a4				  -	      lda	temp2
   1366  f3a4				  -	      sta	playfield-127
   1367  f3a4				  -	      lda	temp1
   1368  f3a4				  -	      sta	playfield-128
   1369  f3a4					      else
   1370  f3a4		       85 a7		      sta	playfield+3
   1371  f3a6		       a5 9e		      lda	temp3
   1372  f3a8		       85 a6		      sta	playfield+2
   1373  f3aa		       a5 9d		      lda	temp2
   1374  f3ac		       85 a5		      sta	playfield+1
   1375  f3ae		       a5 9c		      lda	temp1
   1376  f3b0		       85 a4		      sta	playfield
   1377  f3b2					      endif
   1378  f3b2				   noshiftdown
      0  f3b2					      RETURN
      1  f3b2					      ifnconst	bankswitch
      2  f3b2		       60		      rts
      3  f3b3				  -	      else
      4  f3b3				  -	      jmp	BS_return
      5  f3b3					      endif
   1380  f3b3							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3b3
   1382  f3b3							;standard routines needed for pretty much all games
   1383  f3b3							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3b3							; repositioning code and score pointer setup moved to overscan
   1385  f3b3							; read switches, joysticks now compiler generated (more efficient)
   1386  f3b3
   1387  f3b3				   randomize
   1388  f3b3		       a5 a2		      lda	rand
   1389  f3b5		       4a		      lsr
   1390  f3b6				  -	      ifconst	rand16
   1391  f3b6				  -	      rol	rand16
   1392  f3b6					      endif
   1393  f3b6		       90 02		      bcc	noeor
   1394  f3b8		       49 b4		      eor	#$B4
   1395  f3ba				   noeor
   1396  f3ba		       85 a2		      sta	rand
   1397  f3bc				  -	      ifconst	rand16
   1398  f3bc				  -	      eor	rand16
   1399  f3bc					      endif
      0  f3bc					      RETURN
      1  f3bc					      ifnconst	bankswitch
      2  f3bc		       60		      rts
      3  f3bd				  -	      else
      4  f3bd				  -	      jmp	BS_return
      5  f3bd					      endif
   1401  f3bd							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3bd
   1403  f3bd				   drawscreen
   1404  f3bd				  -	      ifconst	debugscore
   1405  f3bd				  -	      ldx	#14
   1406  f3bd				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3bd				  -
   1408  f3bd				  -	      ifconst	mincycles
   1409  f3bd				  -	      lda	mincycles
   1410  f3bd				  -	      cmp	INTIM
   1411  f3bd				  -	      lda	mincycles
   1412  f3bd				  -	      bcc	nochange
   1413  f3bd				  -	      lda	INTIM
   1414  f3bd				  -	      sta	mincycles
   1415  f3bd				  -nochange
   1416  f3bd				  -	      endif
   1417  f3bd				  -
   1418  f3bd				  -			; cmp #$2B
   1419  f3bd				  -			; bcs no_cycles_left
   1420  f3bd				  -	      bmi	cycles_left
   1421  f3bd				  -	      ldx	#64
   1422  f3bd				  -	      eor	#$ff	;make negative
   1423  f3bd				  -cycles_left
   1424  f3bd				  -	      stx	scorecolor
   1425  f3bd				  -	      and	#$7f	; clear sign bit
   1426  f3bd				  -	      tax
   1427  f3bd				  -	      lda	scorebcd,x
   1428  f3bd				  -	      sta	score+2
   1429  f3bd				  -	      lda	scorebcd1,x
   1430  f3bd				  -	      sta	score+1
   1431  f3bd				  -	      jmp	done_debugscore
   1432  f3bd				  -scorebcd
   1433  f3bd				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3bd				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3bd				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3bd				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3bd				  -scorebcd1
   1438  f3bd				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3bd				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3bd				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3bd				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3bd				  -done_debugscore
   1443  f3bd					      endif
   1444  f3bd
   1445  f3bd				  -	      ifconst	debugcycles
   1446  f3bd				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3bd				  -			; cmp #$2B
   1448  f3bd				  -			; BCC overscan
   1449  f3bd				  -	      bmi	overscan
   1450  f3bd				  -	      sta	COLUBK
   1451  f3bd				  -	      bcs	doneoverscan
   1452  f3bd					      endif
   1453  f3bd
   1454  f3bd				   overscan
   1455  f3bd				  -	      ifconst	interlaced
   1456  f3bd				  -	      PHP
   1457  f3bd				  -	      PLA
   1458  f3bd				  -	      EOR	#4	; flip interrupt bit
   1459  f3bd				  -	      PHA
   1460  f3bd				  -	      PLP
   1461  f3bd				  -	      AND	#4	; isolate the interrupt bit
   1462  f3bd				  -	      TAX		; save it for later
   1463  f3bd					      endif
   1464  f3bd
   1465  f3bd				   overscanloop
   1466  f3bd		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3c0		       30 fb		      bmi	overscanloop
   1468  f3c2				   doneoverscan
   1469  f3c2
   1470  f3c2							;do VSYNC
   1471  f3c2
   1472  f3c2				  -	      ifconst	interlaced
   1473  f3c2				  -	      CPX	#4
   1474  f3c2				  -	      BNE	oddframevsync
   1475  f3c2					      endif
   1476  f3c2
   1477  f3c2		       a9 02		      lda	#2
   1478  f3c4		       85 02		      sta	WSYNC
   1479  f3c6		       85 00		      sta	VSYNC
   1480  f3c8		       85 02		      STA	WSYNC
   1481  f3ca		       85 02		      STA	WSYNC
   1482  f3cc		       4a		      lsr
   1483  f3cd		       85 02		      STA	WSYNC
   1484  f3cf		       85 00		      STA	VSYNC
   1485  f3d1		       85 01		      sta	VBLANK
   1486  f3d3					      ifnconst	overscan_time
   1487  f3d3		       a9 a5		      lda	#37+128
   1488  f3d5				  -	      else
   1489  f3d5				  -	      lda	#overscan_time+128
   1490  f3d5					      endif
   1491  f3d5		       8d 96 02 	      sta	TIM64T
   1492  f3d8
   1493  f3d8				  -	      ifconst	interlaced
   1494  f3d8				  -	      jmp	postsync
   1495  f3d8				  -
   1496  f3d8				  -oddframevsync
   1497  f3d8				  -	      sta	WSYNC
   1498  f3d8				  -
   1499  f3d8				  -	      LDA	($80,X)	; 11 waste
   1500  f3d8				  -	      LDA	($80,X)	; 11 waste
   1501  f3d8				  -	      LDA	($80,X)	; 11 waste
   1502  f3d8				  -
   1503  f3d8				  -	      lda	#2
   1504  f3d8				  -	      sta	VSYNC
   1505  f3d8				  -	      sta	WSYNC
   1506  f3d8				  -	      sta	WSYNC
   1507  f3d8				  -	      sta	WSYNC
   1508  f3d8				  -
   1509  f3d8				  -	      LDA	($80,X)	; 11 waste
   1510  f3d8				  -	      LDA	($80,X)	; 11 waste
   1511  f3d8				  -	      LDA	($80,X)	; 11 waste
   1512  f3d8				  -
   1513  f3d8				  -	      lda	#0
   1514  f3d8				  -	      sta	VSYNC
   1515  f3d8				  -	      sta	VBLANK
   1516  f3d8				  -	      ifnconst	overscan_time
   1517  f3d8				  -	      lda	#37+128
   1518  f3d8				  -	      else
   1519  f3d8				  -	      lda	#overscan_time+128
   1520  f3d8				  -	      endif
   1521  f3d8				  -	      sta	TIM64T
   1522  f3d8				  -
   1523  f3d8				  -postsync
   1524  f3d8					      endif
   1525  f3d8
   1526  f3d8				  -	      ifconst	legacy
   1527  f3d8				  -	      if	legacy < 100
   1528  f3d8				  -	      ldx	#4
   1529  f3d8				  -adjustloop
   1530  f3d8				  -	      lda	player0x,x
   1531  f3d8				  -	      sec
   1532  f3d8				  -	      sbc	#14	;?
   1533  f3d8				  -	      sta	player0x,x
   1534  f3d8				  -	      dex
   1535  f3d8				  -	      bpl	adjustloop
   1536  f3d8				  -	      endif
   1537  f3d8					      endif
   1538  f3d8				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3d8				  -	      repeat	($fa-(<*))
   1540  f3d8				  -	      nop
   1541  f3d8				  -	      repend
   1542  f3d8					      endif
   1543  f3d8		       85 02		      sta	WSYNC
   1544  f3da		       a2 04		      ldx	#4
      0  f3dc					      SLEEP	3
      1  f3dc				   .CYCLES    SET	3
      2  f3dc
      3  f3dc				  -	      IF	.CYCLES < 2
      4  f3dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3dc				  -	      ERR
      6  f3dc					      ENDIF
      7  f3dc
      8  f3dc					      IF	.CYCLES & 1
      9  f3dc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3dc		       04 00		      nop	0
     11  f3de				  -	      ELSE
     12  f3de				  -	      bit	VSYNC
     13  f3de					      ENDIF
     14  f3de				   .CYCLES    SET	.CYCLES - 3
     15  f3de					      ENDIF
     16  f3de
     17  f3de				  -	      REPEAT	.CYCLES / 2
     18  f3de				  -	      nop
     19  f3de					      REPEND
   1546  f3de				   HorPosLoop		; 5
   1547  f3de		       b5 80		      lda	player0x,X	;+4 9
   1548  f3e0		       38		      sec		;+2 11
   1549  f3e1				   DivideLoop
   1550  f3e1		       e9 0f		      sbc	#15
   1551  f3e3		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3e5		       95 9c		      sta	temp1,X	;+4 19
   1553  f3e7		       95 10		      sta	RESP0,X	;+4 23
   1554  f3e9		       85 02		      sta	WSYNC
   1555  f3eb		       ca		      dex
   1556  f3ec		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3ee							; 4
   1558  f3ee
   1559  f3ee		       a2 04		      ldx	#4
   1560  f3f0		       b4 9c		      ldy	temp1,X
   1561  f3f2		       b9 4e f3 	      lda	repostable-256,Y
   1562  f3f5		       95 20		      sta	HMP0,X	;+14 18
   1563  f3f7
   1564  f3f7		       ca		      dex
   1565  f3f8		       b4 9c		      ldy	temp1,X
   1566  f3fa		       b9 4e f3 	      lda	repostable-256,Y
   1567  f3fd		       95 20		      sta	HMP0,X	;+14 32
   1568  f3ff
   1569  f3ff		       ca		      dex
   1570  f400		       b4 9c		      ldy	temp1,X
   1571  f402		       b9 4e f3 	      lda	repostable-256,Y
   1572  f405		       95 20		      sta	HMP0,X	;+14 46
   1573  f407
   1574  f407		       ca		      dex
   1575  f408		       b4 9c		      ldy	temp1,X
   1576  f40a		       b9 4e f3 	      lda	repostable-256,Y
   1577  f40d		       95 20		      sta	HMP0,X	;+14 60
   1578  f40f
   1579  f40f		       ca		      dex
   1580  f410		       b4 9c		      ldy	temp1,X
   1581  f412		       b9 4e f3 	      lda	repostable-256,Y
   1582  f415		       95 20		      sta	HMP0,X	;+14 74
   1583  f417
   1584  f417		       85 02		      sta	WSYNC
   1585  f419
   1586  f419		       85 2a		      sta	HMOVE	;+3 3
   1587  f41b
   1588  f41b
   1589  f41b				  -	      ifconst	legacy
   1590  f41b				  -	      if	legacy < 100
   1591  f41b				  -	      ldx	#4
   1592  f41b				  -adjustloop2
   1593  f41b				  -	      lda	player0x,x
   1594  f41b				  -	      clc
   1595  f41b				  -	      adc	#14	;?
   1596  f41b				  -	      sta	player0x,x
   1597  f41b				  -	      dex
   1598  f41b				  -	      bpl	adjustloop2
   1599  f41b				  -	      endif
   1600  f41b					      endif
   1601  f41b
   1602  f41b
   1603  f41b
   1604  f41b
   1605  f41b							;set score pointers
   1606  f41b		       a7 95		      lax	score+2
   1607  f41d		       20 4e f4 	      jsr	scorepointerset
   1608  f420		       84 9b		      sty	scorepointers+5
   1609  f422		       86 98		      stx	scorepointers+2
   1610  f424		       a7 94		      lax	score+1
   1611  f426		       20 4e f4 	      jsr	scorepointerset
   1612  f429		       84 9a		      sty	scorepointers+4
   1613  f42b		       86 97		      stx	scorepointers+1
   1614  f42d		       a7 93		      lax	score
   1615  f42f		       20 4e f4 	      jsr	scorepointerset
   1616  f432		       84 99		      sty	scorepointers+3
   1617  f434		       86 96		      stx	scorepointers
   1618  f436
   1619  f436				   vblk
   1620  f436							; run possible vblank bB code
   1621  f436				  -	      ifconst	vblank_bB_code
   1622  f436				  -	      jsr	vblank_bB_code
   1623  f436					      endif
   1624  f436				   vblk2
   1625  f436		       ad 84 02 	      LDA	INTIM
   1626  f439		       30 fb		      bmi	vblk2
   1627  f43b		       4c 34 f0 	      jmp	kernel
   1628  f43e
   1629  f43e
   1630  f43e		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f447		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f44e				   repostable
   1633  f44e
   1634  f44e				   scorepointerset
   1635  f44e		       29 0f		      and	#$0F
   1636  f450		       0a		      asl
   1637  f451		       0a		      asl
   1638  f452		       0a		      asl
   1639  f453		       69 9c		      adc	#<scoretable
   1640  f455		       a8		      tay
   1641  f456		       8a		      txa
   1642  f457							; and #$F0
   1643  f457							; lsr
   1644  f457		       4b f0		      asr	#$F0
   1645  f459		       69 9c		      adc	#<scoretable
   1646  f45b		       aa		      tax
   1647  f45c		       60		      rts
   1648  f45d				   game
   1649  f45d				   .L00 		;  rem ----------------------------------------------------------------------------
   1650  f45d
   1651  f45d				   .L01 		;  rem Demo for moving an animated sprite that can fire a missile in any direction
   1652  f45d
   1653  f45d				   .L02 		;  rem   
   1654  f45d
   1655  f45d				   .L03 		;  rem   You can move around your sprite and fire in any direction.
   1656  f45d
   1657  f45d				   .L04 		;  rem
   1658  f45d
   1659  f45d				   .L05 		;  rem  In trying to keep this code as short as possible, I left out the following:
   1660  f45d
   1661  f45d				   .L06 		;  rem   There is no collision detection
   1662  f45d
   1663  f45d				   .L07 		;  rem   There are no enemies to shoot at
   1664  f45d
   1665  f45d				   .L08 		;  rem   player movement is not restricted, you can move off of the screen
   1666  f45d
   1667  f45d				   .L09 		;  rem   There is no defined playfield
   1668  f45d
   1669  f45d				   .L010		;  rem ----------------------------------------------------------------------------
   1670  f45d
   1671  f45d				   .
   1672  f45d							;
   1673  f45d
   1674  f45d				   .L011		;  rem ----------------------------------------------------------------------------
   1675  f45d
   1676  f45d				   .L012		;  rem  Variables
   1677  f45d
   1678  f45d				   .L013		;  rem
   1679  f45d
   1680  f45d				   .L014		;  rem     I set the inital direction of the joystick to RIGHT, so when you start
   1681  f45d
   1682  f45d				   .L015		;  rem     the game for the first time you're able to fire the gun before you move
   1683  f45d
   1684  f45d				   .L016		;  rem
   1685  f45d
   1686  f45d				   .L017		;  rem ----------------------------------------------------------------------------
   1687  f45d
   1688  f45d				   .L018		;  a = 76  : rem player1x location
   1689  f45d
   1690  f45d		       a9 4c		      LDA	#76
   1691  f45f		       85 d4		      STA	a
   1692  f461				   .L019		;  b = 50  : rem player1y location
   1693  f461
   1694  f461		       a9 32		      LDA	#50
   1695  f463		       85 d5		      STA	b
   1696  f465				   .L020		;  rem ----------------------------------------------------------------------------
   1697  f465
   1698  f465				   .L021		;  c{1} = 0  : rem Turned on if the last location of the joystick was UP
   1699  f465
   1700  f465		       a5 d6		      LDA	c
   1701  f467		       29 fd		      AND	#253
   1702  f469		       85 d6		      STA	c
   1703  f46b				   .L022		;  c{2} = 0  : rem Turned on if the last location of the joystick was DOWN
   1704  f46b
   1705  f46b		       a5 d6		      LDA	c
   1706  f46d		       29 fb		      AND	#251
   1707  f46f		       85 d6		      STA	c
   1708  f471				   .L023		;  c{3} = 0  : rem Turned on if the last location of the joystick was LEFT
   1709  f471
   1710  f471		       a5 d6		      LDA	c
   1711  f473		       29 f7		      AND	#247
   1712  f475		       85 d6		      STA	c
   1713  f477				   .L024		;  c{4} = 1  : rem Turned on if the last location of the joystick was RIGHT
   1714  f477
   1715  f477		       a5 d6		      LDA	c
   1716  f479		       09 10		      ORA	#16
   1717  f47b		       85 d6		      STA	c
   1718  f47d				   .L025		;  c{5} = 0  : rem Turned on if the last location of the joystick was UP+LEFT
   1719  f47d
   1720  f47d		       a5 d6		      LDA	c
   1721  f47f		       29 df		      AND	#223
   1722  f481		       85 d6		      STA	c
   1723  f483				   .L026		;  c{6} = 0  : rem Turned on if the last location of the joystick was UP+RIGHT
   1724  f483
   1725  f483		       a5 d6		      LDA	c
   1726  f485		       29 bf		      AND	#191
   1727  f487		       85 d6		      STA	c
   1728  f489				   .L027		;  c{7} = 0  : rem Turned on if the last location of the joystick was DOWN+LEFT
   1729  f489
   1730  f489		       a5 d6		      LDA	c
   1731  f48b		       29 7f		      AND	#127
   1732  f48d		       85 d6		      STA	c
   1733  f48f				   .L028		;  c{0} = 0  : rem Turned on if the last location of the joystick was DOWN+RIGHT
   1734  f48f
   1735  f48f		       a5 d6		      LDA	c
   1736  f491		       29 fe		      AND	#254
   1737  f493		       85 d6		      STA	c
   1738  f495				   .L029		;  rem ----------------------------------------------------------------------------
   1739  f495
   1740  f495				   .L030		;  e = 20  : rem Counter for limiting travel of fired missile
   1741  f495
   1742  f495		       a9 14		      LDA	#20
   1743  f497		       85 d8		      STA	e
   1744  f499				   .L031		;  w = 0  : rem Used to determine player reflection (REFP1) 
   1745  f499
   1746  f499		       a9 00		      LDA	#0
   1747  f49b		       85 ea		      STA	w
   1748  f49d				   .L032		;  rem ----------------------------------------------------------------------------
   1749  f49d
   1750  f49d				   .
   1751  f49d							;
   1752  f49d
   1753  f49d				   .start
   1754  f49d							; start
   1755  f49d
   1756  f49d				   .
   1757  f49d							;
   1758  f49d
   1759  f49d				   .L033		;  drawscreen
   1760  f49d
   1761  f49d		       20 bd f3 	      jsr	drawscreen
   1762  f4a0				   .
   1763  f4a0							;
   1764  f4a0
   1765  f4a0				   .L034		;  rem ---------------------------------------------------------------------------------
   1766  f4a0
   1767  f4a0				   .L035		;  rem This section sets a value for the last direction the joystick was pushed
   1768  f4a0
   1769  f4a0				   .L036		;  rem
   1770  f4a0
   1771  f4a0				   .L037		;  rem  This determines the direction the bullet will be fired later, and also
   1772  f4a0
   1773  f4a0				   .L038		;  rem  allows you to keep firing the bullet in the same direction after you
   1774  f4a0
   1775  f4a0				   .L039		;  rem  have stopped moving.
   1776  f4a0
   1777  f4a0				   .L040		;  rem
   1778  f4a0
   1779  f4a0				   .L041		;  rem  Each time you move, each of the eight possible directions of the joystick is
   1780  f4a0
   1781  f4a0				   .L042		;  rem  marked as on or off with a bit variable.
   1782  f4a0
   1783  f4a0				   .L043		;  rem ---------------------------------------------------------------------------------
   1784  f4a0
   1785  f4a0				   .
   1786  f4a0							;
   1787  f4a0
   1788  f4a0				   .L044		;  if joy0up then c{1} = 1 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   1789  f4a0
   1790  f4a0		       a9 10		      lda	#$10
   1791  f4a2		       2c 80 02 	      bit	SWCHA
   1792  f4a5		       d0 30		      BNE	.skipL044
   1793  f4a7				   .condpart0
   1794  f4a7		       a5 d6		      LDA	c
   1795  f4a9		       09 02		      ORA	#2
   1796  f4ab		       85 d6		      STA	c
   1797  f4ad		       a5 d6		      LDA	c
   1798  f4af		       29 fb		      AND	#251
   1799  f4b1		       85 d6		      STA	c
   1800  f4b3		       a5 d6		      LDA	c
   1801  f4b5		       29 f7		      AND	#247
   1802  f4b7		       85 d6		      STA	c
   1803  f4b9		       a5 d6		      LDA	c
   1804  f4bb		       29 ef		      AND	#239
   1805  f4bd		       85 d6		      STA	c
   1806  f4bf		       a5 d6		      LDA	c
   1807  f4c1		       29 df		      AND	#223
   1808  f4c3		       85 d6		      STA	c
   1809  f4c5		       a5 d6		      LDA	c
   1810  f4c7		       29 bf		      AND	#191
   1811  f4c9		       85 d6		      STA	c
   1812  f4cb		       a5 d6		      LDA	c
   1813  f4cd		       29 7f		      AND	#127
   1814  f4cf		       85 d6		      STA	c
   1815  f4d1		       a5 d6		      LDA	c
   1816  f4d3		       29 fe		      AND	#254
   1817  f4d5		       85 d6		      STA	c
   1818  f4d7				   .skipL044
   1819  f4d7				   .L045		;  if joy0down then c{1} = 0 : c{2} = 1 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   1820  f4d7
   1821  f4d7		       a9 20		      lda	#$20
   1822  f4d9		       2c 80 02 	      bit	SWCHA
   1823  f4dc		       d0 30		      BNE	.skipL045
   1824  f4de				   .condpart1
   1825  f4de		       a5 d6		      LDA	c
   1826  f4e0		       29 fd		      AND	#253
   1827  f4e2		       85 d6		      STA	c
   1828  f4e4		       a5 d6		      LDA	c
   1829  f4e6		       09 04		      ORA	#4
   1830  f4e8		       85 d6		      STA	c
   1831  f4ea		       a5 d6		      LDA	c
   1832  f4ec		       29 f7		      AND	#247
   1833  f4ee		       85 d6		      STA	c
   1834  f4f0		       a5 d6		      LDA	c
   1835  f4f2		       29 ef		      AND	#239
   1836  f4f4		       85 d6		      STA	c
   1837  f4f6		       a5 d6		      LDA	c
   1838  f4f8		       29 df		      AND	#223
   1839  f4fa		       85 d6		      STA	c
   1840  f4fc		       a5 d6		      LDA	c
   1841  f4fe		       29 bf		      AND	#191
   1842  f500		       85 d6		      STA	c
   1843  f502		       a5 d6		      LDA	c
   1844  f504		       29 7f		      AND	#127
   1845  f506		       85 d6		      STA	c
   1846  f508		       a5 d6		      LDA	c
   1847  f50a		       29 fe		      AND	#254
   1848  f50c		       85 d6		      STA	c
   1849  f50e				   .skipL045
   1850  f50e				   .L046		;  if joy0left then c{1} = 0 : c{2} = 0 : c{3} = 1 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   1851  f50e
   1852  f50e		       2c 80 02 	      bit	SWCHA
   1853  f511		       70 30		      BVS	.skipL046
   1854  f513				   .condpart2
   1855  f513		       a5 d6		      LDA	c
   1856  f515		       29 fd		      AND	#253
   1857  f517		       85 d6		      STA	c
   1858  f519		       a5 d6		      LDA	c
   1859  f51b		       29 fb		      AND	#251
   1860  f51d		       85 d6		      STA	c
   1861  f51f		       a5 d6		      LDA	c
   1862  f521		       09 08		      ORA	#8
   1863  f523		       85 d6		      STA	c
   1864  f525		       a5 d6		      LDA	c
   1865  f527		       29 ef		      AND	#239
   1866  f529		       85 d6		      STA	c
   1867  f52b		       a5 d6		      LDA	c
   1868  f52d		       29 df		      AND	#223
   1869  f52f		       85 d6		      STA	c
   1870  f531		       a5 d6		      LDA	c
   1871  f533		       29 bf		      AND	#191
   1872  f535		       85 d6		      STA	c
   1873  f537		       a5 d6		      LDA	c
   1874  f539		       29 7f		      AND	#127
   1875  f53b		       85 d6		      STA	c
   1876  f53d		       a5 d6		      LDA	c
   1877  f53f		       29 fe		      AND	#254
   1878  f541		       85 d6		      STA	c
   1879  f543				   .skipL046
   1880  f543				   .L047		;  if joy0right then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 1 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   1881  f543
   1882  f543		       2c 80 02 	      bit	SWCHA
   1883  f546		       30 30		      BMI	.skipL047
   1884  f548				   .condpart3
   1885  f548		       a5 d6		      LDA	c
   1886  f54a		       29 fd		      AND	#253
   1887  f54c		       85 d6		      STA	c
   1888  f54e		       a5 d6		      LDA	c
   1889  f550		       29 fb		      AND	#251
   1890  f552		       85 d6		      STA	c
   1891  f554		       a5 d6		      LDA	c
   1892  f556		       29 f7		      AND	#247
   1893  f558		       85 d6		      STA	c
   1894  f55a		       a5 d6		      LDA	c
   1895  f55c		       09 10		      ORA	#16
   1896  f55e		       85 d6		      STA	c
   1897  f560		       a5 d6		      LDA	c
   1898  f562		       29 df		      AND	#223
   1899  f564		       85 d6		      STA	c
   1900  f566		       a5 d6		      LDA	c
   1901  f568		       29 bf		      AND	#191
   1902  f56a		       85 d6		      STA	c
   1903  f56c		       a5 d6		      LDA	c
   1904  f56e		       29 7f		      AND	#127
   1905  f570		       85 d6		      STA	c
   1906  f572		       a5 d6		      LDA	c
   1907  f574		       29 fe		      AND	#254
   1908  f576		       85 d6		      STA	c
   1909  f578				   .skipL047
   1910  f578				   .L048		;  if joy0up  &&  joy0left then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 1 : c{6} = 0 : c{7} = 0 : c{0} = 0
   1911  f578
   1912  f578		       a9 10		      lda	#$10
   1913  f57a		       2c 80 02 	      bit	SWCHA
   1914  f57d		       d0 35		      BNE	.skipL048
   1915  f57f				   .condpart4
   1916  f57f		       2c 80 02 	      bit	SWCHA
   1917  f582		       70 30		      BVS	.skip4then
   1918  f584				   .condpart5
   1919  f584		       a5 d6		      LDA	c
   1920  f586		       29 fd		      AND	#253
   1921  f588		       85 d6		      STA	c
   1922  f58a		       a5 d6		      LDA	c
   1923  f58c		       29 fb		      AND	#251
   1924  f58e		       85 d6		      STA	c
   1925  f590		       a5 d6		      LDA	c
   1926  f592		       29 f7		      AND	#247
   1927  f594		       85 d6		      STA	c
   1928  f596		       a5 d6		      LDA	c
   1929  f598		       29 ef		      AND	#239
   1930  f59a		       85 d6		      STA	c
   1931  f59c		       a5 d6		      LDA	c
   1932  f59e		       09 20		      ORA	#32
   1933  f5a0		       85 d6		      STA	c
   1934  f5a2		       a5 d6		      LDA	c
   1935  f5a4		       29 bf		      AND	#191
   1936  f5a6		       85 d6		      STA	c
   1937  f5a8		       a5 d6		      LDA	c
   1938  f5aa		       29 7f		      AND	#127
   1939  f5ac		       85 d6		      STA	c
   1940  f5ae		       a5 d6		      LDA	c
   1941  f5b0		       29 fe		      AND	#254
   1942  f5b2		       85 d6		      STA	c
   1943  f5b4				   .skip4then
   1944  f5b4				   .skipL048
   1945  f5b4				   .L049		;  if joy0up  &&  joy0right then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 1 : c{7} = 0 : c{0} = 0
   1946  f5b4
   1947  f5b4		       a9 10		      lda	#$10
   1948  f5b6		       2c 80 02 	      bit	SWCHA
   1949  f5b9		       d0 35		      BNE	.skipL049
   1950  f5bb				   .condpart6
   1951  f5bb		       2c 80 02 	      bit	SWCHA
   1952  f5be		       30 30		      BMI	.skip6then
   1953  f5c0				   .condpart7
   1954  f5c0		       a5 d6		      LDA	c
   1955  f5c2		       29 fd		      AND	#253
   1956  f5c4		       85 d6		      STA	c
   1957  f5c6		       a5 d6		      LDA	c
   1958  f5c8		       29 fb		      AND	#251
   1959  f5ca		       85 d6		      STA	c
   1960  f5cc		       a5 d6		      LDA	c
   1961  f5ce		       29 f7		      AND	#247
   1962  f5d0		       85 d6		      STA	c
   1963  f5d2		       a5 d6		      LDA	c
   1964  f5d4		       29 ef		      AND	#239
   1965  f5d6		       85 d6		      STA	c
   1966  f5d8		       a5 d6		      LDA	c
   1967  f5da		       29 df		      AND	#223
   1968  f5dc		       85 d6		      STA	c
   1969  f5de		       a5 d6		      LDA	c
   1970  f5e0		       09 40		      ORA	#64
   1971  f5e2		       85 d6		      STA	c
   1972  f5e4		       a5 d6		      LDA	c
   1973  f5e6		       29 7f		      AND	#127
   1974  f5e8		       85 d6		      STA	c
   1975  f5ea		       a5 d6		      LDA	c
   1976  f5ec		       29 fe		      AND	#254
   1977  f5ee		       85 d6		      STA	c
   1978  f5f0				   .skip6then
   1979  f5f0				   .skipL049
   1980  f5f0				   .L050		;  if joy0down  &&  joy0left then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 1 : c{0} = 0
   1981  f5f0
   1982  f5f0		       a9 20		      lda	#$20
   1983  f5f2		       2c 80 02 	      bit	SWCHA
   1984  f5f5		       d0 35		      BNE	.skipL050
   1985  f5f7				   .condpart8
   1986  f5f7		       2c 80 02 	      bit	SWCHA
   1987  f5fa		       70 30		      BVS	.skip8then
   1988  f5fc				   .condpart9
   1989  f5fc		       a5 d6		      LDA	c
   1990  f5fe		       29 fd		      AND	#253
   1991  f600		       85 d6		      STA	c
   1992  f602		       a5 d6		      LDA	c
   1993  f604		       29 fb		      AND	#251
   1994  f606		       85 d6		      STA	c
   1995  f608		       a5 d6		      LDA	c
   1996  f60a		       29 f7		      AND	#247
   1997  f60c		       85 d6		      STA	c
   1998  f60e		       a5 d6		      LDA	c
   1999  f610		       29 ef		      AND	#239
   2000  f612		       85 d6		      STA	c
   2001  f614		       a5 d6		      LDA	c
   2002  f616		       29 df		      AND	#223
   2003  f618		       85 d6		      STA	c
   2004  f61a		       a5 d6		      LDA	c
   2005  f61c		       29 bf		      AND	#191
   2006  f61e		       85 d6		      STA	c
   2007  f620		       a5 d6		      LDA	c
   2008  f622		       09 80		      ORA	#128
   2009  f624		       85 d6		      STA	c
   2010  f626		       a5 d6		      LDA	c
   2011  f628		       29 fe		      AND	#254
   2012  f62a		       85 d6		      STA	c
   2013  f62c				   .skip8then
   2014  f62c				   .skipL050
   2015  f62c				   .L051		;  if joy0down  &&  joy0right then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 1
   2016  f62c
   2017  f62c		       a9 20		      lda	#$20
   2018  f62e		       2c 80 02 	      bit	SWCHA
   2019  f631		       d0 35		      BNE	.skipL051
   2020  f633				   .condpart10
   2021  f633		       2c 80 02 	      bit	SWCHA
   2022  f636		       30 30		      BMI	.skip10then
   2023  f638				   .condpart11
   2024  f638		       a5 d6		      LDA	c
   2025  f63a		       29 fd		      AND	#253
   2026  f63c		       85 d6		      STA	c
   2027  f63e		       a5 d6		      LDA	c
   2028  f640		       29 fb		      AND	#251
   2029  f642		       85 d6		      STA	c
   2030  f644		       a5 d6		      LDA	c
   2031  f646		       29 f7		      AND	#247
   2032  f648		       85 d6		      STA	c
   2033  f64a		       a5 d6		      LDA	c
   2034  f64c		       29 ef		      AND	#239
   2035  f64e		       85 d6		      STA	c
   2036  f650		       a5 d6		      LDA	c
   2037  f652		       29 df		      AND	#223
   2038  f654		       85 d6		      STA	c
   2039  f656		       a5 d6		      LDA	c
   2040  f658		       29 bf		      AND	#191
   2041  f65a		       85 d6		      STA	c
   2042  f65c		       a5 d6		      LDA	c
   2043  f65e		       29 7f		      AND	#127
   2044  f660		       85 d6		      STA	c
   2045  f662		       a5 d6		      LDA	c
   2046  f664		       09 01		      ORA	#1
   2047  f666		       85 d6		      STA	c
   2048  f668				   .skip10then
   2049  f668				   .skipL051
   2050  f668				   .
   2051  f668							;
   2052  f668
   2053  f668				   .L052		;  rem ------------------------------------------------------------------
   2054  f668
   2055  f668				   .L053		;  rem  Set color of player sprites and missiles
   2056  f668
   2057  f668				   .L054		;  rem ------------------------------------------------------------------
   2058  f668
   2059  f668				   .L055		;  COLUP1 = 28
   2060  f668
   2061  f668		       a9 1c		      LDA	#28
   2062  f66a		       85 07		      STA	COLUP1
   2063  f66c				   .L056		;  COLUP0 = 28
   2064  f66c
   2065  f66c		       a9 1c		      LDA	#28
   2066  f66e		       85 06		      STA	COLUP0
   2067  f670				   .
   2068  f670							;
   2069  f670
   2070  f670				   .L057		;  rem ------------------------------------------------------------------
   2071  f670
   2072  f670				   .L058		;  rem  Set initial location of player sprite
   2073  f670
   2074  f670				   .L059		;  rem ------------------------------------------------------------------
   2075  f670
   2076  f670				   .L060		;  player1x = a : player1y = b
   2077  f670
   2078  f670		       a5 d4		      LDA	a
   2079  f672		       85 81		      STA	player1x
   2080  f674		       a5 d5		      LDA	b
   2081  f676		       85 86		      STA	player1y
   2082  f678				   .
   2083  f678							;
   2084  f678
   2085  f678				   .L061		;  rem ------------------------------------------------------------------
   2086  f678
   2087  f678				   .L062		;  rem  Increase 20 to a larger number to make the bullets travel farther
   2088  f678
   2089  f678				   .L063		;  rem ------------------------------------------------------------------
   2090  f678
   2091  f678				   .L064		;  e = e + 1
   2092  f678
   2093  f678		       e6 d8		      INC	e
   2094  f67a				   .L065		;  if e > 20 then e = 0
   2095  f67a
   2096  f67a		       a9 14		      LDA	#20
   2097  f67c		       c5 d8		      CMP	e
   2098  f67e		       b0 04		      BCS	.skipL065
   2099  f680				   .condpart12
   2100  f680		       a9 00		      LDA	#0
   2101  f682		       85 d8		      STA	e
   2102  f684				   .skipL065
   2103  f684				   .
   2104  f684							;
   2105  f684
   2106  f684				   .L066		;  rem ------------------------------------------------------------------
   2107  f684
   2108  f684				   .L067		;  rem  Player Movement
   2109  f684
   2110  f684				   .L068		;  rem ------------------------------------------------------------------
   2111  f684
   2112  f684				   .L069		;  if joy0up then b = b - 1
   2113  f684
   2114  f684		       a9 10		      lda	#$10
   2115  f686		       2c 80 02 	      bit	SWCHA
   2116  f689		       d0 02		      BNE	.skipL069
   2117  f68b				   .condpart13
   2118  f68b		       c6 d5		      DEC	b
   2119  f68d				   .skipL069
   2120  f68d				   .L070		;  if joy0down then b = b + 1
   2121  f68d
   2122  f68d		       a9 20		      lda	#$20
   2123  f68f		       2c 80 02 	      bit	SWCHA
   2124  f692		       d0 02		      BNE	.skipL070
   2125  f694				   .condpart14
   2126  f694		       e6 d5		      INC	b
   2127  f696				   .skipL070
   2128  f696				   .L071		;  if joy0left then a = a - 1
   2129  f696
   2130  f696		       2c 80 02 	      bit	SWCHA
   2131  f699		       70 02		      BVS	.skipL071
   2132  f69b				   .condpart15
   2133  f69b		       c6 d4		      DEC	a
   2134  f69d				   .skipL071
   2135  f69d				   .L072		;  if joy0right then a = a + 1
   2136  f69d
   2137  f69d		       2c 80 02 	      bit	SWCHA
   2138  f6a0		       30 02		      BMI	.skipL072
   2139  f6a2				   .condpart16
   2140  f6a2		       e6 d4		      INC	a
   2141  f6a4				   .skipL072
   2142  f6a4				   .
   2143  f6a4							;
   2144  f6a4
   2145  f6a4				   .L073		;  rem ------------------------------------------------------------------
   2146  f6a4
   2147  f6a4				   .L074		;  rem  if you let go of the fire button, the missile shot is turned off,
   2148  f6a4
   2149  f6a4				   .L075		;  rem  and the gunshot travel length variable (e) is reset to 0.
   2150  f6a4
   2151  f6a4				   .L076		;  rem ------------------------------------------------------------------
   2152  f6a4
   2153  f6a4				   .L077		;  if !joy0fire then missile0x = 0 : missile0y = 0 : e = 0
   2154  f6a4
   2155  f6a4		       24 0c		      bit	INPT4
   2156  f6a6		       10 08		      BPL	.skipL077
   2157  f6a8				   .condpart17
   2158  f6a8		       a9 00		      LDA	#0
   2159  f6aa		       85 82		      STA	missile0x
   2160  f6ac		       85 91		      STA	missile0y
   2161  f6ae		       85 d8		      STA	e
   2162  f6b0				   .skipL077
   2163  f6b0				   .
   2164  f6b0							;
   2165  f6b0
   2166  f6b0				   .L078		;  rem ------------------------------------------------------------------
   2167  f6b0
   2168  f6b0				   .L079		;  rem  Fire the Missile
   2169  f6b0
   2170  f6b0				   .L080		;  rem    This code is what actually fires the missile.
   2171  f6b0
   2172  f6b0				   .L081		;  rem  
   2173  f6b0
   2174  f6b0				   .L082		;  rem  It checks for a combination of pressing the fire button and
   2175  f6b0
   2176  f6b0				   .L083		;  rem    the direction the joystick was most recently moved in to
   2177  f6b0
   2178  f6b0				   .L084		;  rem    determine which direction to fire the missile.
   2179  f6b0
   2180  f6b0				   .L085		;  rem
   2181  f6b0
   2182  f6b0				   .L086		;  rem  the E variable determines the length of the shot
   2183  f6b0
   2184  f6b0				   .L087		;  rem ------------------------------------------------------------------
   2185  f6b0
   2186  f6b0				   .
   2187  f6b0							;
   2188  f6b0
   2189  f6b0				   .L088		;  rem diagonal shots
   2190  f6b0
   2191  f6b0				   .L089		;  if joy0fire  &&  c{0} then missile0x = player1x + 7 + e : missile0y = player1y - 3 + e
   2192  f6b0
   2193  f6b0		       24 0c		      bit	INPT4
   2194  f6b2		       30 19		      BMI	.skipL089
   2195  f6b4				   .condpart18
   2196  f6b4		       a5 d6		      LDA	c
   2197  f6b6		       4a		      LSR
   2198  f6b7		       90 14		      BCC	.skip18then
   2199  f6b9				   .condpart19
   2200  f6b9							; complex statement detected
   2201  f6b9		       a5 81		      LDA	player1x
   2202  f6bb		       18		      CLC
   2203  f6bc		       69 07		      ADC	#7
   2204  f6be		       18		      CLC
   2205  f6bf		       65 d8		      ADC	e
   2206  f6c1		       85 82		      STA	missile0x
   2207  f6c3							; complex statement detected
   2208  f6c3		       a5 86		      LDA	player1y
   2209  f6c5		       38		      SEC
   2210  f6c6		       e9 03		      SBC	#3
   2211  f6c8		       18		      CLC
   2212  f6c9		       65 d8		      ADC	e
   2213  f6cb		       85 91		      STA	missile0y
   2214  f6cd				   .skip18then
   2215  f6cd				   .skipL089
   2216  f6cd				   .L090		;  if joy0fire  &&  c{5} then missile0x = player1x - e : missile0y = player1y - 7 - e
   2217  f6cd
   2218  f6cd		       24 0c		      bit	INPT4
   2219  f6cf		       30 17		      BMI	.skipL090
   2220  f6d1				   .condpart20
   2221  f6d1		       a5 d6		      LDA	c
   2222  f6d3		       29 20		      AND	#32
   2223  f6d5		       f0 11		      BEQ	.skip20then
   2224  f6d7				   .condpart21
   2225  f6d7		       a5 81		      LDA	player1x
   2226  f6d9		       38		      SEC
   2227  f6da		       e5 d8		      SBC	e
   2228  f6dc		       85 82		      STA	missile0x
   2229  f6de							; complex statement detected
   2230  f6de		       a5 86		      LDA	player1y
   2231  f6e0		       38		      SEC
   2232  f6e1		       e9 07		      SBC	#7
   2233  f6e3		       38		      SEC
   2234  f6e4		       e5 d8		      SBC	e
   2235  f6e6		       85 91		      STA	missile0y
   2236  f6e8				   .skip20then
   2237  f6e8				   .skipL090
   2238  f6e8				   .L091		;  if joy0fire  &&  c{7} then missile0x = player1x - e : missile0y = player1y + 1 + e
   2239  f6e8
   2240  f6e8		       24 0c		      bit	INPT4
   2241  f6ea		       30 15		      BMI	.skipL091
   2242  f6ec				   .condpart22
   2243  f6ec		       24 d6		      BIT	c
   2244  f6ee		       10 11		      BPL	.skip22then
   2245  f6f0				   .condpart23
   2246  f6f0		       a5 81		      LDA	player1x
   2247  f6f2		       38		      SEC
   2248  f6f3		       e5 d8		      SBC	e
   2249  f6f5		       85 82		      STA	missile0x
   2250  f6f7							; complex statement detected
   2251  f6f7		       a5 86		      LDA	player1y
   2252  f6f9		       18		      CLC
   2253  f6fa		       69 01		      ADC	#1
   2254  f6fc		       18		      CLC
   2255  f6fd		       65 d8		      ADC	e
   2256  f6ff		       85 91		      STA	missile0y
   2257  f701				   .skip22then
   2258  f701				   .skipL091
   2259  f701				   .L092		;  if joy0fire  &&  c{6} then missile0x = player1x + 7 + e : missile0y = player1y - 7 - e
   2260  f701
   2261  f701		       24 0c		      bit	INPT4
   2262  f703		       30 18		      BMI	.skipL092
   2263  f705				   .condpart24
   2264  f705		       24 d6		      BIT	c
   2265  f707		       50 14		      BVC	.skip24then
   2266  f709				   .condpart25
   2267  f709							; complex statement detected
   2268  f709		       a5 81		      LDA	player1x
   2269  f70b		       18		      CLC
   2270  f70c		       69 07		      ADC	#7
   2271  f70e		       18		      CLC
   2272  f70f		       65 d8		      ADC	e
   2273  f711		       85 82		      STA	missile0x
   2274  f713							; complex statement detected
   2275  f713		       a5 86		      LDA	player1y
   2276  f715		       38		      SEC
   2277  f716		       e9 07		      SBC	#7
   2278  f718		       38		      SEC
   2279  f719		       e5 d8		      SBC	e
   2280  f71b		       85 91		      STA	missile0y
   2281  f71d				   .skip24then
   2282  f71d				   .skipL092
   2283  f71d				   .
   2284  f71d							;
   2285  f71d
   2286  f71d				   .L093		;  rem left and right shots
   2287  f71d
   2288  f71d				   .L094		;  if joy0fire  &&  c{3} then missile0x = player1x - e : missile0y = player1y - 5
   2289  f71d
   2290  f71d		       24 0c		      bit	INPT4
   2291  f71f		       30 14		      BMI	.skipL094
   2292  f721				   .condpart26
   2293  f721		       a5 d6		      LDA	c
   2294  f723		       29 08		      AND	#8
   2295  f725		       f0 0e		      BEQ	.skip26then
   2296  f727				   .condpart27
   2297  f727		       a5 81		      LDA	player1x
   2298  f729		       38		      SEC
   2299  f72a		       e5 d8		      SBC	e
   2300  f72c		       85 82		      STA	missile0x
   2301  f72e		       a5 86		      LDA	player1y
   2302  f730		       38		      SEC
   2303  f731		       e9 05		      SBC	#5
   2304  f733		       85 91		      STA	missile0y
   2305  f735				   .skip26then
   2306  f735				   .skipL094
   2307  f735				   .L095		;  if joy0fire  &&  c{4} then missile0x = player1x + 8 + e : missile0y = player1y - 5
   2308  f735
   2309  f735		       24 0c		      bit	INPT4
   2310  f737		       30 17		      BMI	.skipL095
   2311  f739				   .condpart28
   2312  f739		       a5 d6		      LDA	c
   2313  f73b		       29 10		      AND	#16
   2314  f73d		       f0 11		      BEQ	.skip28then
   2315  f73f				   .condpart29
   2316  f73f							; complex statement detected
   2317  f73f		       a5 81		      LDA	player1x
   2318  f741		       18		      CLC
   2319  f742		       69 08		      ADC	#8
   2320  f744		       18		      CLC
   2321  f745		       65 d8		      ADC	e
   2322  f747		       85 82		      STA	missile0x
   2323  f749		       a5 86		      LDA	player1y
   2324  f74b		       38		      SEC
   2325  f74c		       e9 05		      SBC	#5
   2326  f74e		       85 91		      STA	missile0y
   2327  f750				   .skip28then
   2328  f750				   .skipL095
   2329  f750				   .
   2330  f750							;
   2331  f750
   2332  f750				   .L096		;  rem up and down shots
   2333  f750
   2334  f750				   .L097		;  if joy0fire  &&  c{1} then missile0x = player1x + 5 : missile0y = player1y - 10 - e
   2335  f750
   2336  f750		       24 0c		      bit	INPT4
   2337  f752		       30 17		      BMI	.skipL097
   2338  f754				   .condpart30
   2339  f754		       a5 d6		      LDA	c
   2340  f756		       29 02		      AND	#2
   2341  f758		       f0 11		      BEQ	.skip30then
   2342  f75a				   .condpart31
   2343  f75a		       a5 81		      LDA	player1x
   2344  f75c		       18		      CLC
   2345  f75d		       69 05		      ADC	#5
   2346  f75f		       85 82		      STA	missile0x
   2347  f761							; complex statement detected
   2348  f761		       a5 86		      LDA	player1y
   2349  f763		       38		      SEC
   2350  f764		       e9 0a		      SBC	#10
   2351  f766		       38		      SEC
   2352  f767		       e5 d8		      SBC	e
   2353  f769		       85 91		      STA	missile0y
   2354  f76b				   .skip30then
   2355  f76b				   .skipL097
   2356  f76b				   .L098		;  if joy0fire  &&  c{2} then missile0x = player1x + 5 : missile0y = player1y + 3 + e
   2357  f76b
   2358  f76b		       24 0c		      bit	INPT4
   2359  f76d		       30 17		      BMI	.skipL098
   2360  f76f				   .condpart32
   2361  f76f		       a5 d6		      LDA	c
   2362  f771		       29 04		      AND	#4
   2363  f773		       f0 11		      BEQ	.skip32then
   2364  f775				   .condpart33
   2365  f775		       a5 81		      LDA	player1x
   2366  f777		       18		      CLC
   2367  f778		       69 05		      ADC	#5
   2368  f77a		       85 82		      STA	missile0x
   2369  f77c							; complex statement detected
   2370  f77c		       a5 86		      LDA	player1y
   2371  f77e		       18		      CLC
   2372  f77f		       69 03		      ADC	#3
   2373  f781		       18		      CLC
   2374  f782		       65 d8		      ADC	e
   2375  f784		       85 91		      STA	missile0y
   2376  f786				   .skip32then
   2377  f786				   .skipL098
   2378  f786				   .
   2379  f786							;
   2380  f786
   2381  f786				   .L099		;  rem ------------------------------------------------------------------
   2382  f786
   2383  f786				   .L0100		;  rem This stops the animation and shows a still sprite when you're 
   2384  f786
   2385  f786				   .L0101		;  rem not moving.
   2386  f786
   2387  f786				   .L0102		;  rem ------------------------------------------------------------------
   2388  f786
   2389  f786				   .L0103		;  if !joy0up	&&  !joy0down  &&  !joy0left  &&  !joy0right then y = 30  : goto still
   2390  f786
   2391  f786		       a9 10		      lda	#$10
   2392  f788		       2c 80 02 	      bit	SWCHA
   2393  f78b		       f0 18		      BEQ	.skipL0103
   2394  f78d				   .condpart34
   2395  f78d		       a9 20		      lda	#$20
   2396  f78f		       2c 80 02 	      bit	SWCHA
   2397  f792		       f0 11		      BEQ	.skip34then
   2398  f794				   .condpart35
   2399  f794		       2c 80 02 	      bit	SWCHA
   2400  f797		       50 0c		      BVC	.skip35then
   2401  f799				   .condpart36
   2402  f799		       2c 80 02 	      bit	SWCHA
   2403  f79c		       10 07		      BPL	.skip36then
   2404  f79e				   .condpart37
   2405  f79e		       a9 1e		      LDA	#30
   2406  f7a0		       85 ec		      STA	y
   2407  f7a2		       4c 0a f8 	      jmp	.still
   2408  f7a5
   2409  f7a5				   .skip36then
   2410  f7a5				   .skip35then
   2411  f7a5				   .skip34then
   2412  f7a5				   .skipL0103
   2413  f7a5				   .
   2414  f7a5							;
   2415  f7a5
   2416  f7a5				   .L0104		;  rem ------------------------------------------------------------------
   2417  f7a5
   2418  f7a5				   .L0105		;  rem stillreturn is put in as a marker to return back from the sub
   2419  f7a5
   2420  f7a5				   .L0106		;  rem that changes the sprite to a still, non moving image.
   2421  f7a5
   2422  f7a5				   .L0107		;  rem ------------------------------------------------------------------
   2423  f7a5
   2424  f7a5				   .stillreturn
   2425  f7a5							; stillreturn
   2426  f7a5
   2427  f7a5				   .
   2428  f7a5							;
   2429  f7a5
   2430  f7a5				   .L0108		;  rem ------------------------------------------------------------------
   2431  f7a5
   2432  f7a5				   .L0109		;  rem Player Animation
   2433  f7a5
   2434  f7a5				   .L0110		;  rem   Y is the counter for the player animation.  You can change the
   2435  f7a5
   2436  f7a5				   .L0111		;  rem   animation rate by changing the 30,20,10 to a different 
   2437  f7a5
   2438  f7a5				   .L0112		;  rem   sequence of numbers.
   2439  f7a5
   2440  f7a5				   .L0113		;  rem ------------------------------------------------------------------
   2441  f7a5
   2442  f7a5				   .
   2443  f7a5							;
   2444  f7a5
   2445  f7a5				   .L0114		;  y = y + 1
   2446  f7a5
   2447  f7a5		       e6 ec		      INC	y
   2448  f7a7				   .
   2449  f7a7							;
   2450  f7a7
   2451  f7a7				   .L0115		;  if y = 30 then player1: 
   2452  f7a7
   2453  f7a7		       a5 ec		      LDA	y
   2454  f7a9		       c9 1e		      CMP	#30
   2455  f7ab		       d0 0c		      BNE	.skipL0115
   2456  f7ad				   .condpart38
   2457  f7ad		       a2 19		      LDX	#<player38then_1
   2458  f7af		       86 8c		      STX	player1pointerlo
   2459  f7b1		       a9 f8		      LDA	#>player38then_1
   2460  f7b3		       85 8d		      STA	player1pointerhi
   2461  f7b5		       a9 0a		      LDA	#10
   2462  f7b7		       85 8f		      STA	player1height
   2463  f7b9				   .skipL0115
   2464  f7b9				   .L0116		;  if y = 20 then player1:
   2465  f7b9
   2466  f7b9		       a5 ec		      LDA	y
   2467  f7bb		       c9 14		      CMP	#20
   2468  f7bd		       d0 0c		      BNE	.skipL0116
   2469  f7bf				   .condpart39
   2470  f7bf		       a2 24		      LDX	#<player39then_1
   2471  f7c1		       86 8c		      STX	player1pointerlo
   2472  f7c3		       a9 f8		      LDA	#>player39then_1
   2473  f7c5		       85 8d		      STA	player1pointerhi
   2474  f7c7		       a9 0a		      LDA	#10
   2475  f7c9		       85 8f		      STA	player1height
   2476  f7cb				   .skipL0116
   2477  f7cb				   .L0117		;  if y = 10 then player1:
   2478  f7cb
   2479  f7cb		       a5 ec		      LDA	y
   2480  f7cd		       c9 0a		      CMP	#10
   2481  f7cf		       d0 0c		      BNE	.skipL0117
   2482  f7d1				   .condpart40
   2483  f7d1		       a2 2f		      LDX	#<player40then_1
   2484  f7d3		       86 8c		      STX	player1pointerlo
   2485  f7d5		       a9 f8		      LDA	#>player40then_1
   2486  f7d7		       85 8d		      STA	player1pointerhi
   2487  f7d9		       a9 0a		      LDA	#10
   2488  f7db		       85 8f		      STA	player1height
   2489  f7dd				   .skipL0117
   2490  f7dd				   .
   2491  f7dd							;
   2492  f7dd
   2493  f7dd				   .L0118		;  if y > 30 then y = 0
   2494  f7dd
   2495  f7dd		       a9 1e		      LDA	#30
   2496  f7df		       c5 ec		      CMP	y
   2497  f7e1		       b0 04		      BCS	.skipL0118
   2498  f7e3				   .condpart41
   2499  f7e3		       a9 00		      LDA	#0
   2500  f7e5		       85 ec		      STA	y
   2501  f7e7				   .skipL0118
   2502  f7e7				   .
   2503  f7e7							;
   2504  f7e7
   2505  f7e7				   .L0119		;  rem ------------------------------------------------------------------
   2506  f7e7
   2507  f7e7				   .L0120		;  rem This will make the player face left when moving left.
   2508  f7e7
   2509  f7e7				   .L0121		;  rem ------------------------------------------------------------------
   2510  f7e7
   2511  f7e7				   .L0122		;  if !joy0left  &&  !joy0right then skipref
   2512  f7e7
   2513  f7e7		       2c 80 02 	      bit	SWCHA
   2514  f7ea		       50 05		      BVC	.skipL0122
   2515  f7ec				   .condpart42
   2516  f7ec		       2c 80 02 	      bit	SWCHA
   2517  f7ef		       30 16		      bmi	.skipref
   2518  f7f1				   .skipL0122
   2519  f7f1				   .L0123		;  if joy0left then w = 8 : REFP1 = 8
   2520  f7f1
   2521  f7f1		       2c 80 02 	      bit	SWCHA
   2522  f7f4		       70 06		      BVS	.skipL0123
   2523  f7f6				   .condpart43
   2524  f7f6		       a9 08		      LDA	#8
   2525  f7f8		       85 ea		      STA	w
   2526  f7fa		       85 0c		      STA	REFP1
   2527  f7fc				   .skipL0123
   2528  f7fc				   .L0124		;  if joy0right then w = 0 : REFP1 = 0
   2529  f7fc
   2530  f7fc		       2c 80 02 	      bit	SWCHA
   2531  f7ff		       30 06		      BMI	.skipL0124
   2532  f801				   .condpart44
   2533  f801		       a9 00		      LDA	#0
   2534  f803		       85 ea		      STA	w
   2535  f805		       85 0c		      STA	REFP1
   2536  f807				   .skipL0124
   2537  f807				   .skipref
   2538  f807							; skipref
   2539  f807
   2540  f807				   .
   2541  f807							;
   2542  f807
   2543  f807				   .L0125		;  goto start
   2544  f807
   2545  f807		       4c 9d f4 	      jmp	.start
   2546  f80a
   2547  f80a				   .
   2548  f80a							;
   2549  f80a
   2550  f80a				   .L0126		;  rem ------------------------------------------------------------------
   2551  f80a
   2552  f80a				   .L0127		;  rem Display a "still" sprite when the player is not moving.
   2553  f80a
   2554  f80a				   .L0128		;  rem ------------------------------------------------------------------
   2555  f80a
   2556  f80a				   .still
   2557  f80a							; still
   2558  f80a
   2559  f80a				   .L0129		;  player1:
   2560  f80a
   2561  f80a		       a2 3a		      LDX	#<playerL0129_1
   2562  f80c		       86 8c		      STX	player1pointerlo
   2563  f80e		       a9 f8		      LDA	#>playerL0129_1
   2564  f810		       85 8d		      STA	player1pointerhi
   2565  f812		       a9 0a		      LDA	#10
   2566  f814		       85 8f		      STA	player1height
   2567  f816				   .L0130		;  goto stillreturn
   2568  f816
   2569  f816		       4c a5 f7 	      jmp	.stillreturn
   2570  f819
   2571  f819				   .
   2572  f819							;
   2573  f819
   2574  f819				   .
   2575  f819							;
   2576  f819
   2577  f819				  -	      if	(<*) > (<(*+10))
   2578  f819				  -	      repeat	($100-<*)
   2579  f819				  -	      .byte	0
   2580  f819				  -	      repend
   2581  f819					      endif
   2582  f819				   player38then_1
   2583  f819		       06		      .byte.b	%00000110
   2584  f81a		       24		      .byte.b	%00100100
   2585  f81b		       34		      .byte.b	%00110100
   2586  f81c		       18		      .byte.b	%00011000
   2587  f81d		       00		      .byte.b	%00000000
   2588  f81e		       9e		      .byte.b	%10011110
   2589  f81f		       64		      .byte.b	%01100100
   2590  f820		       10		      .byte.b	%00010000
   2591  f821		       18		      .byte.b	%00011000
   2592  f822		       3c		      .byte.b	%00111100
   2593  f823		       18		      .byte.b	%00011000
   2594  f824				  -	      if	(<*) > (<(*+10))
   2595  f824				  -	      repeat	($100-<*)
   2596  f824				  -	      .byte	0
   2597  f824				  -	      repend
   2598  f824					      endif
   2599  f824				   player39then_1
   2600  f824		       40		      .byte.b	%01000000
   2601  f825		       63		      .byte.b	%01100011
   2602  f826		       36		      .byte.b	%00110110
   2603  f827		       1c		      .byte.b	%00011100
   2604  f828		       28		      .byte.b	%00101000
   2605  f829		       3c		      .byte.b	%00111100
   2606  f82a		       24		      .byte.b	%00100100
   2607  f82b		       10		      .byte.b	%00010000
   2608  f82c		       18		      .byte.b	%00011000
   2609  f82d		       3c		      .byte.b	%00111100
   2610  f82e		       18		      .byte.b	%00011000
   2611  f82f				  -	      if	(<*) > (<(*+10))
   2612  f82f				  -	      repeat	($100-<*)
   2613  f82f				  -	      .byte	0
   2614  f82f				  -	      repend
   2615  f82f					      endif
   2616  f82f				   player40then_1
   2617  f82f		       1c		      .byte.b	%00011100
   2618  f830		       18		      .byte.b	%00011000
   2619  f831		       18		      .byte.b	%00011000
   2620  f832		       20		      .byte.b	%00100000
   2621  f833		       5a		      .byte.b	%01011010
   2622  f834		       7c		      .byte.b	%01111100
   2623  f835		       24		      .byte.b	%00100100
   2624  f836		       10		      .byte.b	%00010000
   2625  f837		       18		      .byte.b	%00011000
   2626  f838		       3c		      .byte.b	%00111100
   2627  f839		       18		      .byte.b	%00011000
   2628  f83a				  -	      if	(<*) > (<(*+10))
   2629  f83a				  -	      repeat	($100-<*)
   2630  f83a				  -	      .byte	0
   2631  f83a				  -	      repend
   2632  f83a					      endif
   2633  f83a				   playerL0129_1
   2634  f83a		       1c		      .byte.b	%00011100
   2635  f83b		       18		      .byte.b	%00011000
   2636  f83c		       18		      .byte.b	%00011000
   2637  f83d		       20		      .byte.b	%00100000
   2638  f83e		       5a		      .byte.b	%01011010
   2639  f83f		       7c		      .byte.b	%01111100
   2640  f840		       24		      .byte.b	%00100100
   2641  f841		       10		      .byte.b	%00010000
   2642  f842		       18		      .byte.b	%00011000
   2643  f843		       3c		      .byte.b	%00111100
   2644  f844		       18		      .byte.b	%00011000
   2645  f845					      if	ECHOFIRST
      1879 bytes of ROM space left
   2646  f845					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   2647  f845					      endif
   2648  f845		       00 01	   ECHOFIRST  =	1
   2649  f845
   2650  f845
   2651  f845
   2652  f845							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2653  f845
   2654  f845							; feel free to modify the score graphics - just keep each digit 8 high
   2655  f845							; and keep the conditional compilation stuff intact
   2656  f845				  -	      ifconst	ROM2k
   2657  f845				  -	      ORG	$F7AC-8
   2658  f845					      else
   2659  f845				  -	      ifconst	bankswitch
   2660  f845				  -	      if	bankswitch == 8
   2661  f845				  -	      ORG	$2F94-bscode_length
   2662  f845				  -	      RORG	$FF94-bscode_length
   2663  f845				  -	      endif
   2664  f845				  -	      if	bankswitch == 16
   2665  f845				  -	      ORG	$4F94-bscode_length
   2666  f845				  -	      RORG	$FF94-bscode_length
   2667  f845				  -	      endif
   2668  f845				  -	      if	bankswitch == 32
   2669  f845				  -	      ORG	$8F94-bscode_length
   2670  f845				  -	      RORG	$FF94-bscode_length
   2671  f845				  -	      endif
   2672  f845				  -	      if	bankswitch == 64
   2673  f845				  -	      ORG	$10F80-bscode_length
   2674  f845				  -	      RORG	$1FF80-bscode_length
   2675  f845				  -	      endif
   2676  f845					      else
   2677  ff9c					      ORG	$FF9C
   2678  ff9c					      endif
   2679  ff9c					      endif
   2680  ff9c
   2681  ff9c							; font equates
   2682  ff9c		       00 01	   .21stcentury =	1
   2683  ff9c		       00 02	   alarmclock =	2
   2684  ff9c		       00 03	   handwritten =	3
   2685  ff9c		       00 04	   interrupted =	4
   2686  ff9c		       00 05	   retroputer =	5
   2687  ff9c		       00 06	   whimsey    =	6
   2688  ff9c		       00 07	   tiny       =	7
   2689  ff9c		       00 08	   hex	      =	8
   2690  ff9c
   2691  ff9c				  -	      ifconst	font
   2692  ff9c				  -	      if	font == hex
   2693  ff9c				  -	      ORG	. - 48
   2694  ff9c				  -	      endif
   2695  ff9c					      endif
   2696  ff9c
   2697  ff9c				   scoretable
   2698  ff9c
   2699  ff9c				  -	      ifconst	font
   2700  ff9c				  -	      if	font == .21stcentury
   2701  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   2702  ff9c				  -	      endif
   2703  ff9c				  -	      if	font == alarmclock
   2704  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   2705  ff9c				  -	      endif
   2706  ff9c				  -	      if	font == handwritten
   2707  ff9c				  -	      include	"score_graphics.asm.handwritten"
   2708  ff9c				  -	      endif
   2709  ff9c				  -	      if	font == interrupted
   2710  ff9c				  -	      include	"score_graphics.asm.interrupted"
   2711  ff9c				  -	      endif
   2712  ff9c				  -	      if	font == retroputer
   2713  ff9c				  -	      include	"score_graphics.asm.retroputer"
   2714  ff9c				  -	      endif
   2715  ff9c				  -	      if	font == whimsey
   2716  ff9c				  -	      include	"score_graphics.asm.whimsey"
   2717  ff9c				  -	      endif
   2718  ff9c				  -	      if	font == tiny
   2719  ff9c				  -	      include	"score_graphics.asm.tiny"
   2720  ff9c				  -	      endif
   2721  ff9c				  -	      if	font == hex
   2722  ff9c				  -	      include	"score_graphics.asm.hex"
   2723  ff9c				  -	      endif
   2724  ff9c					      else		; default font
   2725  ff9c
   2726  ff9c		       3c		      .byte.b	%00111100
   2727  ff9d		       66		      .byte.b	%01100110
   2728  ff9e		       66		      .byte.b	%01100110
   2729  ff9f		       66		      .byte.b	%01100110
   2730  ffa0		       66		      .byte.b	%01100110
   2731  ffa1		       66		      .byte.b	%01100110
   2732  ffa2		       66		      .byte.b	%01100110
   2733  ffa3		       3c		      .byte.b	%00111100
   2734  ffa4
   2735  ffa4		       7e		      .byte.b	%01111110
   2736  ffa5		       18		      .byte.b	%00011000
   2737  ffa6		       18		      .byte.b	%00011000
   2738  ffa7		       18		      .byte.b	%00011000
   2739  ffa8		       18		      .byte.b	%00011000
   2740  ffa9		       38		      .byte.b	%00111000
   2741  ffaa		       18		      .byte.b	%00011000
   2742  ffab		       08		      .byte.b	%00001000
   2743  ffac
   2744  ffac		       7e		      .byte.b	%01111110
   2745  ffad		       60		      .byte.b	%01100000
   2746  ffae		       60		      .byte.b	%01100000
   2747  ffaf		       3c		      .byte.b	%00111100
   2748  ffb0		       06		      .byte.b	%00000110
   2749  ffb1		       06		      .byte.b	%00000110
   2750  ffb2		       46		      .byte.b	%01000110
   2751  ffb3		       3c		      .byte.b	%00111100
   2752  ffb4
   2753  ffb4		       3c		      .byte.b	%00111100
   2754  ffb5		       46		      .byte.b	%01000110
   2755  ffb6		       06		      .byte.b	%00000110
   2756  ffb7		       06		      .byte.b	%00000110
   2757  ffb8		       1c		      .byte.b	%00011100
   2758  ffb9		       06		      .byte.b	%00000110
   2759  ffba		       46		      .byte.b	%01000110
   2760  ffbb		       3c		      .byte.b	%00111100
   2761  ffbc
   2762  ffbc		       0c		      .byte.b	%00001100
   2763  ffbd		       0c		      .byte.b	%00001100
   2764  ffbe		       7e		      .byte.b	%01111110
   2765  ffbf		       4c		      .byte.b	%01001100
   2766  ffc0		       4c		      .byte.b	%01001100
   2767  ffc1		       2c		      .byte.b	%00101100
   2768  ffc2		       1c		      .byte.b	%00011100
   2769  ffc3		       0c		      .byte.b	%00001100
   2770  ffc4
   2771  ffc4		       3c		      .byte.b	%00111100
   2772  ffc5		       46		      .byte.b	%01000110
   2773  ffc6		       06		      .byte.b	%00000110
   2774  ffc7		       06		      .byte.b	%00000110
   2775  ffc8		       3c		      .byte.b	%00111100
   2776  ffc9		       60		      .byte.b	%01100000
   2777  ffca		       60		      .byte.b	%01100000
   2778  ffcb		       7e		      .byte.b	%01111110
   2779  ffcc
   2780  ffcc		       3c		      .byte.b	%00111100
   2781  ffcd		       66		      .byte.b	%01100110
   2782  ffce		       66		      .byte.b	%01100110
   2783  ffcf		       66		      .byte.b	%01100110
   2784  ffd0		       7c		      .byte.b	%01111100
   2785  ffd1		       60		      .byte.b	%01100000
   2786  ffd2		       62		      .byte.b	%01100010
   2787  ffd3		       3c		      .byte.b	%00111100
   2788  ffd4
   2789  ffd4		       30		      .byte.b	%00110000
   2790  ffd5		       30		      .byte.b	%00110000
   2791  ffd6		       30		      .byte.b	%00110000
   2792  ffd7		       18		      .byte.b	%00011000
   2793  ffd8		       0c		      .byte.b	%00001100
   2794  ffd9		       06		      .byte.b	%00000110
   2795  ffda		       42		      .byte.b	%01000010
   2796  ffdb		       3e		      .byte.b	%00111110
   2797  ffdc
   2798  ffdc		       3c		      .byte.b	%00111100
   2799  ffdd		       66		      .byte.b	%01100110
   2800  ffde		       66		      .byte.b	%01100110
   2801  ffdf		       66		      .byte.b	%01100110
   2802  ffe0		       3c		      .byte.b	%00111100
   2803  ffe1		       66		      .byte.b	%01100110
   2804  ffe2		       66		      .byte.b	%01100110
   2805  ffe3		       3c		      .byte.b	%00111100
   2806  ffe4
   2807  ffe4		       3c		      .byte.b	%00111100
   2808  ffe5		       46		      .byte.b	%01000110
   2809  ffe6		       06		      .byte.b	%00000110
   2810  ffe7		       3e		      .byte.b	%00111110
   2811  ffe8		       66		      .byte.b	%01100110
   2812  ffe9		       66		      .byte.b	%01100110
   2813  ffea		       66		      .byte.b	%01100110
   2814  ffeb		       3c		      .byte.b	%00111100
   2815  ffec
   2816  ffec					      ifnconst	DPC_kernel_options
   2817  ffec
   2818  ffec		       00		      .byte.b	%00000000
   2819  ffed		       00		      .byte.b	%00000000
   2820  ffee		       00		      .byte.b	%00000000
   2821  ffef		       00		      .byte.b	%00000000
   2822  fff0		       00		      .byte.b	%00000000
   2823  fff1		       00		      .byte.b	%00000000
   2824  fff2		       00		      .byte.b	%00000000
   2825  fff3		       00		      .byte.b	%00000000
   2826  fff4
   2827  fff4					      endif
   2828  fff4
   2829  fff4					      endif
   2830  fff4
   2831  fff4				  -	      ifconst	ROM2k
   2832  fff4				  -	      ORG	$F7FC
   2833  fff4					      else
   2834  fff4				  -	      ifconst	bankswitch
   2835  fff4				  -	      if	bankswitch == 8
   2836  fff4				  -	      ORG	$2FF4-bscode_length
   2837  fff4				  -	      RORG	$FFF4-bscode_length
   2838  fff4				  -	      endif
   2839  fff4				  -	      if	bankswitch == 16
   2840  fff4				  -	      ORG	$4FF4-bscode_length
   2841  fff4				  -	      RORG	$FFF4-bscode_length
   2842  fff4				  -	      endif
   2843  fff4				  -	      if	bankswitch == 32
   2844  fff4				  -	      ORG	$8FF4-bscode_length
   2845  fff4				  -	      RORG	$FFF4-bscode_length
   2846  fff4				  -	      endif
   2847  fff4				  -	      if	bankswitch == 64
   2848  fff4				  -	      ORG	$10FE0-bscode_length
   2849  fff4				  -	      RORG	$1FFE0-bscode_length
   2850  fff4				  -	      endif
   2851  fff4					      else
   2852  fffc					      ORG	$FFFC
   2853  fffc					      endif
   2854  fffc					      endif
   2855  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2856  fffc
   2857  fffc				  -	      ifconst	bankswitch
   2858  fffc				  -	      if	bankswitch == 8
   2859  fffc				  -	      ORG	$2FFC
   2860  fffc				  -	      RORG	$FFFC
   2861  fffc				  -	      endif
   2862  fffc				  -	      if	bankswitch == 16
   2863  fffc				  -	      ORG	$4FFC
   2864  fffc				  -	      RORG	$FFFC
   2865  fffc				  -	      endif
   2866  fffc				  -	      if	bankswitch == 32
   2867  fffc				  -	      ORG	$8FFC
   2868  fffc				  -	      RORG	$FFFC
   2869  fffc				  -	      endif
   2870  fffc				  -	      if	bankswitch == 64
   2871  fffc				  -	      ORG	$10FF0
   2872  fffc				  -	      RORG	$1FFF0
   2873  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   2874  fffc				  -	      ORG	$10FF8
   2875  fffc				  -	      RORG	$1FFF8
   2876  fffc				  -	      ifconst	superchip
   2877  fffc				  -	      .byte	"E","F","S","C"
   2878  fffc				  -	      else
   2879  fffc				  -	      .byte	"E","F","E","F"
   2880  fffc				  -	      endif
   2881  fffc				  -	      ORG	$10FFC
   2882  fffc				  -	      RORG	$1FFFC
   2883  fffc				  -	      endif
   2884  fffc					      else
   2885  fffc				  -	      ifconst	ROM2k
   2886  fffc				  -	      ORG	$F7FC
   2887  fffc					      else
   2888  fffc					      ORG	$FFFC
   2889  fffc					      endif
   2890  fffc					      endif
   2891  fffc		       00 f0		      .word.w	(start & $ffff)
   2892  fffe		       00 f0		      .word.w	(start & $ffff)
