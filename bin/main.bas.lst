------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 00	    moved      =	0
      4  10000 ????		00 e1	    playerSprite =	n
      5  10000 ????		00 e0	    monsterSprite =	m
      6  10000 ????		00 db	    p1x        =	h
      7  10000 ????		00 da	    p1y        =	g
      8  10000 ????		00 d9	    p0x        =	f
      9  10000 ????		00 d7	    p0y        =	d
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 00	    moved      =	0
      4  10000 ????		00 e1	    playerSprite =	n
      5  10000 ????		00 e0	    monsterSprite =	m
      6  10000 ????		00 db	    p1x        =	h
      7  10000 ????		00 da	    p1y        =	g
      8  10000 ????		00 d9	    p0x        =	f
      9  10000 ????		00 d7	    p0y        =	d
------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 5d f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8					      ifnconst	no_blank_lines
    279  f0d8					      ifnconst	playercolors
    280  f0d8		       a5 90		      lda	missile0height	;3
    281  f0da		       c7 91		      dcp	missile0y	;5
    282  f0dc		       e5 f6		      sbc	stack1
    283  f0de		       85 1d		      sta	ENAM0	;3
    284  f0e0				  -	      else
    285  f0e0				  -	      lda	(player0color),y
    286  f0e0				  -	      sta	player0colorstore
    287  f0e0				  -	      sleep	6
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef				  -	      ifconst	PFcolors
    403  f0ef				  -	      tay
    404  f0ef				  -	      lda	(pfcolortable),y
    405  f0ef				  -	      ifnconst	backgroundchange
    406  f0ef				  -	      sta	COLUPF
    407  f0ef				  -	      else
    408  f0ef				  -	      sta	COLUBK
    409  f0ef				  -	      endif
    410  f0ef				  -	      ifconst	pfrowheight
    411  f0ef				  -	      lda	#pfrowheight
    412  f0ef				  -	      else
    413  f0ef				  -	      ifnconst	pfres
    414  f0ef				  -	      lda	#8
    415  f0ef				  -	      else
    416  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0ef				  -	      endif
    418  f0ef				  -	      endif
    419  f0ef				  -	      sta	temp1
    420  f0ef					      endif
    421  f0ef					      ifnconst	PFcolorandheight
    422  f0ef					      ifnconst	PFcolors
    423  f0ef					      ifnconst	PFheights
    424  f0ef					      ifnconst	no_blank_lines
    425  f0ef							; read paddle 0
    426  f0ef							; lo-res paddle read
    427  f0ef							; bit INPT0
    428  f0ef							; bmi paddleskipread
    429  f0ef							; inc paddle0
    430  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    432  f0f4				  -	      ifconst	pfrowheight
    433  f0f4				  -	      lda	#pfrowheight
    434  f0f4					      else
    435  f0f4					      ifnconst	pfres
    436  f0f4		       a9 08		      lda	#8
    437  f0f6				  -	      else
    438  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f6					      endif
    440  f0f6					      endif
    441  f0f6		       85 9c		      sta	temp1
    442  f0f8					      endif
    443  f0f8					      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    460  f106				  -	      else
    461  f106				  -	      ldy	#124
    462  f106				  -	      lda	(pfcolortable),y
    463  f106				  -	      sta	COLUPF
    464  f106					      endif
    465  f106
    466  f106				  -	      ifconst	PFheights
    467  f106				  -	      ldx	#1
    468  f106				  -			;sleep 4
    469  f106				  -	      sleep	3	; this was over 1 cycle
    470  f106					      else
    471  f106		       a6 ef		      ldx	playfieldpos
    472  f108							;sleep 3
      0  f108					      sleep	2	; this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    474  f109					      endif
    475  f109
    476  f109		       4c 27 f1 	      jmp	enterlastkernel
    477  f10c
    478  f10c				  -	      else
    479  f10c				  -lastkernelline
    480  f10c				  -
    481  f10c				  -	      ifconst	PFheights
    482  f10c				  -	      ldx	#1
    483  f10c				  -			;sleep 5
    484  f10c				  -	      sleep	4	; this was over 1 cycle
    485  f10c				  -	      else
    486  f10c				  -	      ldx	playfieldpos
    487  f10c				  -			;sleep 4
    488  f10c				  -	      sleep	3	; this was over 1 cycle
    489  f10c				  -	      endif
    490  f10c				  -
    491  f10c				  -	      cpx	#0
    492  f10c				  -	      bne	.enterfromNBL
    493  f10c				  -	      jmp	no_blank_lines_bailout
    494  f10c					      endif
    495  f10c
    496  f10c				  -	      if	((<*)>$d5)
    497  f10c				  -	      align	256
    498  f10c					      endif
    499  f10c							; this is a kludge to prevent page wrapping - fix!!!
    500  f10c
    501  f10c				   .skipDrawlastP1
    502  f10c		       a9 00		      lda	#0
    503  f10e		       a8		      tay		; added so we don't cross a page
    504  f10f		       4c 39 f1 	      jmp	.continuelastP1
    505  f112
    506  f112				   .endkerloop		; enter at cycle 59??
    507  f112
    508  f112		       ea		      nop
    509  f113
    510  f113				   .enterfromNBL
    511  f113				  -	      ifconst	pfres
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f113				  -	      sty	PF1L	;3
    514  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f113				  -	      sty	PF2L	;3
    516  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f113				  -	      sty	PF1R	; possibly too early?
    518  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f113				  -	      sty	PF2R	;3
    520  f113					      else
    521  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f116		       84 0e		      sty	PF1L	;3
    523  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11b		       84 0f		      sty	PF2L	;3
    525  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f120		       84 0e		      sty	PF1R	; possibly too early?
    527  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f125		       84 0f		      sty	PF2R	;3
    529  f127					      endif
    530  f127
    531  f127				   enterlastkernel
    532  f127		       a5 92		      lda	ballheight
    533  f129
    534  f129							; tya
    535  f129		       c7 89		      dcp	bally
    536  f12b							; sleep 4
    537  f12b
    538  f12b							; sbc stack3
    539  f12b		       2a		      rol
    540  f12c		       2a		      rol
    541  f12d		       85 1f		      sta	ENABL
    542  f12f
    543  f12f		       a5 8f		      lda	player1height	;3
    544  f131		       c7 86		      dcp	player1y	;5
    545  f133		       90 d7		      bcc	.skipDrawlastP1
    546  f135		       a4 86		      ldy	player1y	;3
    547  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f139							; so it doesn't cross a page boundary!
    549  f139
    550  f139				   .continuelastP1
    551  f139		       85 1c		      sta	GRP1	;3
    552  f13b
    553  f13b					      ifnconst	player1colors
    554  f13b		       a5 87		      lda	missile1height	;3
    555  f13d		       c7 88		      dcp	missile1y	;5
    556  f13f				  -	      else
    557  f13f				  -	      lda	(player1color),y
    558  f13f				  -	      sta	COLUP1
    559  f13f					      endif
    560  f13f
    561  f13f		       ca		      dex
    562  f140							;dec temp4 ; might try putting this above PF writes
    563  f140		       f0 36		      beq	endkernel
    564  f142
    565  f142
    566  f142				  -	      ifconst	pfres
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f142				  -	      sty	PF1L	;3
    569  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f142				  -	      sty	PF2L	;3
    571  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f142				  -	      sty	PF1R	; possibly too early?
    573  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f142				  -	      sty	PF2R	;3
    575  f142					      else
    576  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f145		       84 0e		      sty	PF1L	;3
    578  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14a		       84 0f		      sty	PF2L	;3
    580  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f14f		       84 0e		      sty	PF1R	; possibly too early?
    582  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f154		       84 0f		      sty	PF2R	;3
    584  f156					      endif
    585  f156
    586  f156					      ifnconst	player1colors
    587  f156		       2a		      rol		;2
    588  f157		       2a		      rol		;2
    589  f158		       85 1e		      sta	ENAM1	;3
    590  f15a				  -	      else
    591  f15a				  -	      ifnconst	playercolors
    592  f15a				  -	      sleep	7
    593  f15a				  -	      else
    594  f15a				  -	      lda.w	player0colorstore
    595  f15a				  -	      sta	COLUP0
    596  f15a				  -	      endif
    597  f15a					      endif
    598  f15a
    599  f15a		       ad 8e 00 	      lda.w	player0height
    600  f15d		       c7 85		      dcp	player0y
    601  f15f		       90 11		      bcc	.skipDrawlastP0
    602  f161		       a4 85		      ldy	player0y
    603  f163		       b1 8a		      lda	(player0pointer),y
    604  f165				   .continuelastP0
    605  f165		       85 1b		      sta	GRP0
    606  f167
    607  f167
    608  f167
    609  f167					      ifnconst	no_blank_lines
    610  f167		       a5 90		      lda	missile0height	;3
    611  f169		       c7 91		      dcp	missile0y	;5
    612  f16b		       e5 f6		      sbc	stack1
    613  f16d		       85 1d		      sta	ENAM0	;3
    614  f16f		       4c 12 f1 	      jmp	.endkerloop
    615  f172				  -	      else
    616  f172				  -	      ifconst	readpaddle
    617  f172				  -	      ldy	currentpaddle
    618  f172				  -	      lda	INPT0,y
    619  f172				  -	      bpl	noreadpaddle2
    620  f172				  -	      inc	paddle
    621  f172				  -	      jmp	.endkerloop
    622  f172				  -noreadpaddle2
    623  f172				  -	      sleep	4
    624  f172				  -	      jmp	.endkerloop
    625  f172				  -	      else		; no_blank_lines and no paddle reading
    626  f172				  -	      pla
    627  f172				  -	      pha		; 14 cycles in 4 bytes
    628  f172				  -	      pla
    629  f172				  -	      pha
    630  f172				  -			; sleep 14
    631  f172				  -	      jmp	.endkerloop
    632  f172				  -	      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 65 f1 	      jmp	.continuelastP0
    647  f178
    648  f178				  -	      ifconst	no_blank_lines
    649  f178				  -no_blank_lines_bailout
    650  f178				  -	      ldx	#0
    651  f178					      endif
    652  f178
    653  f178				   endkernel
    654  f178							; 6 digit score routine
    655  f178		       86 0e		      stx	PF1
    656  f17a		       86 0f		      stx	PF2
    657  f17c		       86 0d		      stx	PF0
    658  f17e		       18		      clc
    659  f17f
    660  f17f				  -	      ifconst	pfrowheight
    661  f17f				  -	      lda	#pfrowheight+2
    662  f17f					      else
    663  f17f					      ifnconst	pfres
    664  f17f		       a9 0a		      lda	#10
    665  f181				  -	      else
    666  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f181					      endif
    668  f181					      endif
    669  f181
    670  f181		       e5 ef		      sbc	playfieldpos
    671  f183		       85 ef		      sta	playfieldpos
    672  f185		       8a		      txa
    673  f186
    674  f186				  -	      ifconst	shakescreen
    675  f186				  -	      bit	shakescreen
    676  f186				  -	      bmi	noshakescreen2
    677  f186				  -	      ldx	#$3D
    678  f186				  -noshakescreen2
    679  f186					      endif
    680  f186
    681  f186		       95 02		      sta	WSYNC,x
    682  f188
    683  f188							; STA WSYNC ;first one, need one more
    684  f188		       85 0b		      sta	REFP0
    685  f18a		       85 0c		      sta	REFP1
    686  f18c		       85 1b		      STA	GRP0
    687  f18e		       85 1c		      STA	GRP1
    688  f190							; STA PF1
    689  f190							; STA PF2
    690  f190		       85 2b		      sta	HMCLR
    691  f192		       85 1d		      sta	ENAM0
    692  f194		       85 1e		      sta	ENAM1
    693  f196		       85 1f		      sta	ENABL
    694  f198
    695  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19a		       85 85		      sta	player0y
    697  f19c		       a5 9e		      lda	temp3
    698  f19e		       85 86		      sta	player1y
    699  f1a0					      ifnconst	player1colors
    700  f1a0		       a5 a1		      lda	temp6
    701  f1a2		       85 88		      sta	missile1y
    702  f1a4					      endif
    703  f1a4					      ifnconst	playercolors
    704  f1a4					      ifnconst	readpaddle
    705  f1a4		       a5 a0		      lda	temp5
    706  f1a6		       85 91		      sta	missile0y
    707  f1a8					      endif
    708  f1a8					      endif
    709  f1a8		       a5 f7		      lda	stack2
    710  f1aa		       85 89		      sta	bally
    711  f1ac
    712  f1ac							; strangely, this isn't required any more. might have
    713  f1ac							; resulted from the no_blank_lines score bounce fix
    714  f1ac							;ifconst no_blank_lines
    715  f1ac							;sta WSYNC
    716  f1ac							;endif
    717  f1ac
    718  f1ac		       ad 84 02 	      lda	INTIM
    719  f1af		       18		      clc
    720  f1b0					      ifnconst	vblank_time
    721  f1b0		       69 8e		      adc	#43+12+87
    722  f1b2				  -	      else
    723  f1b2				  -	      adc	#vblank_time+12+87
    724  f1b2				  -
    725  f1b2					      endif
    726  f1b2							; sta WSYNC
    727  f1b2		       8d 96 02 	      sta	TIM64T
    728  f1b5
    729  f1b5				  -	      ifconst	minikernel
    730  f1b5				  -	      jsr	minikernel
    731  f1b5					      endif
    732  f1b5
    733  f1b5							; now reassign temp vars for score pointers
    734  f1b5
    735  f1b5							; score pointers contain:
    736  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b5							; swap lo2->temp1
    738  f1b5							; swap lo4->temp3
    739  f1b5							; swap lo6->temp5
    740  f1b5					      ifnconst	noscore
    741  f1b5		       a5 97		      lda	scorepointers+1
    742  f1b7							; ldy temp1
    743  f1b7		       85 9c		      sta	temp1
    744  f1b9							; sty scorepointers+1
    745  f1b9
    746  f1b9		       a5 99		      lda	scorepointers+3
    747  f1bb							; ldy temp3
    748  f1bb		       85 9e		      sta	temp3
    749  f1bd							; sty scorepointers+3
    750  f1bd
    751  f1bd
    752  f1bd		       85 2b		      sta	HMCLR
    753  f1bf		       ba		      tsx
    754  f1c0		       86 f6		      stx	stack1
    755  f1c2		       a2 e0		      ldx	#$E0
    756  f1c4		       86 20		      stx	HMP0
    757  f1c6
    758  f1c6		       a5 a3		      LDA	scorecolor
    759  f1c8		       85 06		      STA	COLUP0
    760  f1ca		       85 07		      STA	COLUP1
    761  f1cc				  -	      ifconst	scorefade
    762  f1cc				  -	      STA	stack2
    763  f1cc					      endif
    764  f1cc				  -	      ifconst	pfscore
    765  f1cc				  -	      lda	pfscorecolor
    766  f1cc				  -	      sta	COLUPF
    767  f1cc					      endif
    768  f1cc		       85 02		      sta	WSYNC
    769  f1ce		       a2 00		      ldx	#0
    770  f1d0		       86 1b		      STx	GRP0
    771  f1d2		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1d4
    773  f1d4		       a5 9b		      lda	scorepointers+5
    774  f1d6							; ldy temp5
    775  f1d6		       95 a0		      sta	temp5,x
    776  f1d8							; sty scorepointers+5
    777  f1d8		       a9 ff		      lda	#>scoretable
    778  f1da		       85 97		      sta	scorepointers+1
    779  f1dc		       85 99		      sta	scorepointers+3
    780  f1de		       85 9b		      sta	scorepointers+5
    781  f1e0		       85 9d		      sta	temp2
    782  f1e2		       85 9f		      sta	temp4
    783  f1e4		       85 a1		      sta	temp6
    784  f1e6		       a0 07		      LDY	#7
    785  f1e8		       84 25		      STY	VDELP0
    786  f1ea		       85 10		      STA	RESP0
    787  f1ec		       85 11		      STA	RESP1
    788  f1ee
    789  f1ee
    790  f1ee		       a9 03		      LDA	#$03
    791  f1f0		       85 04		      STA	NUSIZ0
    792  f1f2		       85 05		      STA	NUSIZ1
    793  f1f4		       85 26		      STA	VDELP1
    794  f1f6		       a9 f0		      LDA	#$F0
    795  f1f8		       85 21		      STA	HMP1
    796  f1fa		       b1 96		      lda	(scorepointers),y
    797  f1fc		       85 1b		      sta	GRP0
    798  f1fe		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f200		       4c 0b f2 	      jmp	beginscore
    800  f203
    801  f203
    802  f203				  -	      if	((<*)>$d4)
    803  f203				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f203					      endif
    805  f203
    806  f203				   loop2
    807  f203		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f205		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f207				  -	      ifconst	pfscore
    810  f207				  -	      lda.w	pfscore1
    811  f207				  -	      sta	PF1
    812  f207					      else
    813  f207				  -	      ifconst	scorefade
    814  f207				  -	      sleep	2
    815  f207				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f207					      else
      0  f207					      sleep	7
      1  f207				   .CYCLES    SET	7
      2  f207
      3  f207				  -	      IF	.CYCLES < 2
      4  f207				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f207				  -	      ERR
      6  f207					      ENDIF
      7  f207
      8  f207					      IF	.CYCLES & 1
      9  f207					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f207		       04 00		      nop	0
     11  f209				  -	      ELSE
     12  f209				  -	      bit	VSYNC
     13  f209					      ENDIF
     14  f209				   .CYCLES    SET	.CYCLES - 3
     15  f209					      ENDIF
     16  f209
     17  f209					      REPEAT	.CYCLES / 2
     18  f209		       ea		      nop
     17  f209					      REPEND
     18  f20a		       ea		      nop
     19  f20b					      REPEND
    818  f20b					      endif
    819  f20b					      endif
    820  f20b							; cycle 0
    821  f20b				   beginscore
    822  f20b		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f20d		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f20f		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f211		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f213		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f215		       9a		      txs
    828  f216		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f218				  -	      ifconst	scorefade
    830  f218				  -	      lda	stack2
    831  f218					      else
      0  f218					      sleep	3
      1  f218				   .CYCLES    SET	3
      2  f218
      3  f218				  -	      IF	.CYCLES < 2
      4  f218				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f218				  -	      ERR
      6  f218					      ENDIF
      7  f218
      8  f218					      IF	.CYCLES & 1
      9  f218					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f218		       04 00		      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a					      ENDIF
     14  f21a				   .CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a				  -	      REPEAT	.CYCLES / 2
     18  f21a				  -	      nop
     19  f21a					      REPEND
    833  f21a					      endif
    834  f21a
    835  f21a				  -	      ifconst	pfscore
    836  f21a				  -	      lda	pfscore2
    837  f21a				  -	      sta	PF1
    838  f21a					      else
    839  f21a				  -	      ifconst	scorefade
    840  f21a				  -	      sta	COLUP0
    841  f21a				  -	      sta	COLUP1
    842  f21a					      else
      0  f21a					      sleep	6
      1  f21a				   .CYCLES    SET	6
      2  f21a
      3  f21a				  -	      IF	.CYCLES < 2
      4  f21a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21a				  -	      ERR
      6  f21a					      ENDIF
      7  f21a
      8  f21a				  -	      IF	.CYCLES & 1
      9  f21a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21a				  -	      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a				  -	      ENDIF
     14  f21a				  -.CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a					      REPEAT	.CYCLES / 2
     18  f21a		       ea		      nop
     17  f21a					      REPEND
     18  f21b		       ea		      nop
     17  f21b					      REPEND
     18  f21c		       ea		      nop
     19  f21d					      REPEND
    844  f21d					      endif
    845  f21d					      endif
    846  f21d
    847  f21d		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f21f		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f221		       ba		      tsx
    850  f222		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f224		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f226		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f228		       88		      dey
    854  f229		       10 d8		      bpl	loop2	;+2 60 180
    855  f22b
    856  f22b		       a6 f6		      ldx	stack1
    857  f22d		       9a		      txs
    858  f22e							; lda scorepointers+1
    859  f22e		       a4 9c		      ldy	temp1
    860  f230							; sta temp1
    861  f230		       84 97		      sty	scorepointers+1
    862  f232
    863  f232		       a9 00		      LDA	#0
    864  f234		       85 0e		      sta	PF1
    865  f236		       85 1b		      STA	GRP0
    866  f238		       85 1c		      STA	GRP1
    867  f23a		       85 25		      STA	VDELP0
    868  f23c		       85 26		      STA	VDELP1	;do we need these
    869  f23e		       85 04		      STA	NUSIZ0
    870  f240		       85 05		      STA	NUSIZ1
    871  f242
    872  f242							; lda scorepointers+3
    873  f242		       a4 9e		      ldy	temp3
    874  f244							; sta temp3
    875  f244		       84 99		      sty	scorepointers+3
    876  f246
    877  f246							; lda scorepointers+5
    878  f246		       a4 a0		      ldy	temp5
    879  f248							; sta temp5
    880  f248		       84 9b		      sty	scorepointers+5
    881  f24a					      endif		;noscore
    882  f24a				  -	      ifconst	readpaddle
    883  f24a				  -	      lda	#%11000010
    884  f24a					      else
    885  f24a				  -	      ifconst	qtcontroller
    886  f24a				  -	      lda	qtcontroller
    887  f24a				  -	      lsr		; bit 0 in carry
    888  f24a				  -	      lda	#4
    889  f24a				  -	      ror		; carry into top of A
    890  f24a					      else
    891  f24a		       a9 02		      lda	#2
    892  f24c					      endif		; qtcontroller
    893  f24c					      endif		; readpaddle
    894  f24c		       85 02		      sta	WSYNC
    895  f24e		       85 01		      sta	VBLANK
      0  f250					      RETURN
      1  f250					      ifnconst	bankswitch
      2  f250		       60		      rts
      3  f251				  -	      else
      4  f251				  -	      jmp	BS_return
      5  f251					      endif
    897  f251				  -	      ifconst	shakescreen
    898  f251				  -doshakescreen
    899  f251				  -	      bit	shakescreen
    900  f251				  -	      bmi	noshakescreen
    901  f251				  -	      sta	WSYNC
    902  f251				  -noshakescreen
    903  f251				  -	      ldx	missile0height
    904  f251				  -	      inx
    905  f251				  -	      rts
    906  f251					      endif
    907  f251
    908  f251							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f251
    910  f251							; playfield drawing routines
    911  f251							; you get a 32x12 bitmapped display in a single color :)
    912  f251							; 0-31 and 0-11
    913  f251
    914  f251				   pfclear		; clears playfield - or fill with pattern
    915  f251				  -	      ifconst	pfres
    916  f251				  -	      ldx	#pfres*pfwidth-1
    917  f251					      else
    918  f251		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f253					      endif
    920  f253				   pfclear_loop
    921  f253					      ifnconst	superchip
    922  f253		       95 a4		      sta	playfield,x
    923  f255				  -	      else
    924  f255				  -	      sta	playfield-128,x
    925  f255					      endif
    926  f255		       ca		      dex
    927  f256		       10 fb		      bpl	pfclear_loop
      0  f258					      RETURN
      1  f258					      ifnconst	bankswitch
      2  f258		       60		      rts
      3  f259				  -	      else
      4  f259				  -	      jmp	BS_return
      5  f259					      endif
    929  f259
    930  f259				   setuppointers
    931  f259		       86 9d		      stx	temp2	; store on.off.flip value
    932  f25b		       aa		      tax		; put x-value in x 
    933  f25c		       4a		      lsr
    934  f25d		       4a		      lsr
    935  f25e		       4a		      lsr		; divide x pos by 8 
    936  f25f		       85 9c		      sta	temp1
    937  f261		       98		      tya
    938  f262		       0a		      asl
    939  f263					      if	pfwidth=4
    940  f263		       0a		      asl		; multiply y pos by 4
    941  f264					      endif		; else multiply by 2
    942  f264		       18		      clc
    943  f265		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f267		       a8		      tay		; put the value in y
    945  f268		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f26a		       60		      rts
    947  f26b
    948  f26b				   pfread
    949  f26b							;x=xvalue, y=yvalue
    950  f26b		       20 59 f2 	      jsr	setuppointers
    951  f26e		       bd d3 f2 	      lda	setbyte,x
    952  f271		       39 a4 00 	      and	playfield,y
    953  f274		       5d d3 f2 	      eor	setbyte,x
    954  f277							; beq readzero
    955  f277							; lda #1
    956  f277							; readzero
      0  f277					      RETURN
      1  f277					      ifnconst	bankswitch
      2  f277		       60		      rts
      3  f278				  -	      else
      4  f278				  -	      jmp	BS_return
      5  f278					      endif
    958  f278
    959  f278				   pfpixel
    960  f278							;x=xvalue, y=yvalue, a=0,1,2
    961  f278		       20 59 f2 	      jsr	setuppointers
    962  f27b
    963  f27b				  -	      ifconst	bankswitch
    964  f27b				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f27b				  -	      beq	pixelon_r	; if "on" go to on
    966  f27b				  -	      lsr
    967  f27b				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f27b				  -	      lda	playfield,y	; if here, it's "flip"
    969  f27b				  -	      eor	setbyte,x
    970  f27b				  -	      ifconst	superchip
    971  f27b				  -	      sta	playfield-128,y
    972  f27b				  -	      else
    973  f27b				  -	      sta	playfield,y
    974  f27b				  -	      endif
    975  f27b				  -	      RETURN
    976  f27b				  -pixelon_r
    977  f27b				  -	      lda	playfield,y
    978  f27b				  -	      ora	setbyte,x
    979  f27b				  -	      ifconst	superchip
    980  f27b				  -	      sta	playfield-128,y
    981  f27b				  -	      else
    982  f27b				  -	      sta	playfield,y
    983  f27b				  -	      endif
    984  f27b				  -	      RETURN
    985  f27b				  -pixeloff_r
    986  f27b				  -	      lda	setbyte,x
    987  f27b				  -	      eor	#$ff
    988  f27b				  -	      and	playfield,y
    989  f27b				  -	      ifconst	superchip
    990  f27b				  -	      sta	playfield-128,y
    991  f27b				  -	      else
    992  f27b				  -	      sta	playfield,y
    993  f27b				  -	      endif
    994  f27b				  -	      RETURN
    995  f27b				  -
    996  f27b					      else
    997  f27b		       4c ac f2 	      jmp	plotpoint
    998  f27e					      endif
    999  f27e
   1000  f27e				   pfhline
   1001  f27e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f27e		       20 59 f2 	      jsr	setuppointers
   1003  f281		       4c 8b f2 	      jmp	noinc
   1004  f284				   keepgoing
   1005  f284		       e8		      inx
   1006  f285		       8a		      txa
   1007  f286		       29 07		      and	#7
   1008  f288		       d0 01		      bne	noinc
   1009  f28a		       c8		      iny
   1010  f28b				   noinc
   1011  f28b		       20 ac f2 	      jsr	plotpoint
   1012  f28e		       e4 9e		      cpx	temp3
   1013  f290		       30 f2		      bmi	keepgoing
      0  f292					      RETURN
      1  f292					      ifnconst	bankswitch
      2  f292		       60		      rts
      3  f293				  -	      else
      4  f293				  -	      jmp	BS_return
      5  f293					      endif
   1015  f293
   1016  f293				   pfvline
   1017  f293							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f293		       20 59 f2 	      jsr	setuppointers
   1019  f296		       84 9c		      sty	temp1	; store memory location offset
   1020  f298		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f29a		       a5 9e		      lda	temp3
   1022  f29c		       0a		      asl
   1023  f29d					      if	pfwidth=4
   1024  f29d		       0a		      asl		; multiply by 4
   1025  f29e					      endif		; else multiply by 2
   1026  f29e		       85 9e		      sta	temp3	; store it
   1027  f2a0							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2a0							; right now, temp1=y=starting memory location, temp3=final
   1029  f2a0							; x should equal original x value
   1030  f2a0				   keepgoingy
   1031  f2a0		       20 ac f2 	      jsr	plotpoint
   1032  f2a3		       c8		      iny
   1033  f2a4		       c8		      iny
   1034  f2a5					      if	pfwidth=4
   1035  f2a5		       c8		      iny
   1036  f2a6		       c8		      iny
   1037  f2a7					      endif
   1038  f2a7		       c4 9e		      cpy	temp3
   1039  f2a9		       30 f5		      bmi	keepgoingy
      0  f2ab					      RETURN
      1  f2ab					      ifnconst	bankswitch
      2  f2ab		       60		      rts
      3  f2ac				  -	      else
      4  f2ac				  -	      jmp	BS_return
      5  f2ac					      endif
   1041  f2ac
   1042  f2ac				   plotpoint
   1043  f2ac		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2ae		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2b0		       4a		      lsr
   1046  f2b1		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2b3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2b6		       5d d3 f2 	      eor	setbyte,x
   1049  f2b9				  -	      ifconst	superchip
   1050  f2b9				  -	      sta	playfield-128,y
   1051  f2b9					      else
   1052  f2b9		       99 a4 00 	      sta	playfield,y
   1053  f2bc					      endif
   1054  f2bc		       60		      rts
   1055  f2bd				   pixelon
   1056  f2bd		       b9 a4 00 	      lda	playfield,y
   1057  f2c0		       1d d3 f2 	      ora	setbyte,x
   1058  f2c3				  -	      ifconst	superchip
   1059  f2c3				  -	      sta	playfield-128,y
   1060  f2c3					      else
   1061  f2c3		       99 a4 00 	      sta	playfield,y
   1062  f2c6					      endif
   1063  f2c6		       60		      rts
   1064  f2c7				   pixeloff
   1065  f2c7		       bd d3 f2 	      lda	setbyte,x
   1066  f2ca		       49 ff		      eor	#$ff
   1067  f2cc		       39 a4 00 	      and	playfield,y
   1068  f2cf				  -	      ifconst	superchip
   1069  f2cf				  -	      sta	playfield-128,y
   1070  f2cf					      else
   1071  f2cf		       99 a4 00 	      sta	playfield,y
   1072  f2d2					      endif
   1073  f2d2		       60		      rts
   1074  f2d3
   1075  f2d3				   setbyte
   1076  f2d3					      ifnconst	pfcenter
   1077  f2d3		       80		      .byte.b	$80
   1078  f2d4		       40		      .byte.b	$40
   1079  f2d5		       20		      .byte.b	$20
   1080  f2d6		       10		      .byte.b	$10
   1081  f2d7		       08		      .byte.b	$08
   1082  f2d8		       04		      .byte.b	$04
   1083  f2d9		       02		      .byte.b	$02
   1084  f2da		       01		      .byte.b	$01
   1085  f2db					      endif
   1086  f2db		       01		      .byte.b	$01
   1087  f2dc		       02		      .byte.b	$02
   1088  f2dd		       04		      .byte.b	$04
   1089  f2de		       08		      .byte.b	$08
   1090  f2df		       10		      .byte.b	$10
   1091  f2e0		       20		      .byte.b	$20
   1092  f2e1		       40		      .byte.b	$40
   1093  f2e2		       80		      .byte.b	$80
   1094  f2e3		       80		      .byte.b	$80
   1095  f2e4		       40		      .byte.b	$40
   1096  f2e5		       20		      .byte.b	$20
   1097  f2e6		       10		      .byte.b	$10
   1098  f2e7		       08		      .byte.b	$08
   1099  f2e8		       04		      .byte.b	$04
   1100  f2e9		       02		      .byte.b	$02
   1101  f2ea		       01		      .byte.b	$01
   1102  f2eb		       01		      .byte.b	$01
   1103  f2ec		       02		      .byte.b	$02
   1104  f2ed		       04		      .byte.b	$04
   1105  f2ee		       08		      .byte.b	$08
   1106  f2ef		       10		      .byte.b	$10
   1107  f2f0		       20		      .byte.b	$20
   1108  f2f1		       40		      .byte.b	$40
   1109  f2f2		       80		      .byte.b	$80
   1110  f2f3							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f2f3
   1112  f2f3				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f2f3		       d0 13		      bne	notleft
   1114  f2f5							;left
   1115  f2f5				  -	      ifconst	pfres
   1116  f2f5				  -	      ldx	#pfres*4
   1117  f2f5					      else
   1118  f2f5		       a2 30		      ldx	#48
   1119  f2f7					      endif
   1120  f2f7				   leftloop
   1121  f2f7		       b5 a3		      lda	playfield-1,x
   1122  f2f9		       4a		      lsr
   1123  f2fa
   1124  f2fa				  -	      ifconst	superchip
   1125  f2fa				  -	      lda	playfield-2,x
   1126  f2fa				  -	      rol
   1127  f2fa				  -	      sta	playfield-130,x
   1128  f2fa				  -	      lda	playfield-3,x
   1129  f2fa				  -	      ror
   1130  f2fa				  -	      sta	playfield-131,x
   1131  f2fa				  -	      lda	playfield-4,x
   1132  f2fa				  -	      rol
   1133  f2fa				  -	      sta	playfield-132,x
   1134  f2fa				  -	      lda	playfield-1,x
   1135  f2fa				  -	      ror
   1136  f2fa				  -	      sta	playfield-129,x
   1137  f2fa					      else
   1138  f2fa		       36 a2		      rol	playfield-2,x
   1139  f2fc		       76 a1		      ror	playfield-3,x
   1140  f2fe		       36 a0		      rol	playfield-4,x
   1141  f300		       76 a3		      ror	playfield-1,x
   1142  f302					      endif
   1143  f302
   1144  f302		       8a		      txa
   1145  f303		       cb 04		      sbx	#4
   1146  f305		       d0 f0		      bne	leftloop
      0  f307					      RETURN
      1  f307					      ifnconst	bankswitch
      2  f307		       60		      rts
      3  f308				  -	      else
      4  f308				  -	      jmp	BS_return
      5  f308					      endif
   1148  f308
   1149  f308				   notleft
   1150  f308		       4a		      lsr
   1151  f309		       90 13		      bcc	notright
   1152  f30b							;right
   1153  f30b
   1154  f30b				  -	      ifconst	pfres
   1155  f30b				  -	      ldx	#pfres*4
   1156  f30b					      else
   1157  f30b		       a2 30		      ldx	#48
   1158  f30d					      endif
   1159  f30d				   rightloop
   1160  f30d		       b5 a0		      lda	playfield-4,x
   1161  f30f		       4a		      lsr
   1162  f310				  -	      ifconst	superchip
   1163  f310				  -	      lda	playfield-3,x
   1164  f310				  -	      rol
   1165  f310				  -	      sta	playfield-131,x
   1166  f310				  -	      lda	playfield-2,x
   1167  f310				  -	      ror
   1168  f310				  -	      sta	playfield-130,x
   1169  f310				  -	      lda	playfield-1,x
   1170  f310				  -	      rol
   1171  f310				  -	      sta	playfield-129,x
   1172  f310				  -	      lda	playfield-4,x
   1173  f310				  -	      ror
   1174  f310				  -	      sta	playfield-132,x
   1175  f310					      else
   1176  f310		       36 a1		      rol	playfield-3,x
   1177  f312		       76 a2		      ror	playfield-2,x
   1178  f314		       36 a3		      rol	playfield-1,x
   1179  f316		       76 a0		      ror	playfield-4,x
   1180  f318					      endif
   1181  f318		       8a		      txa
   1182  f319		       cb 04		      sbx	#4
   1183  f31b		       d0 f0		      bne	rightloop
      0  f31d					      RETURN
      1  f31d					      ifnconst	bankswitch
      2  f31d		       60		      rts
      3  f31e				  -	      else
      4  f31e				  -	      jmp	BS_return
      5  f31e					      endif
   1185  f31e
   1186  f31e				   notright
   1187  f31e		       4a		      lsr
   1188  f31f		       90 49		      bcc	notup
   1189  f321							;up
   1190  f321		       4a		      lsr
   1191  f322		       90 02		      bcc	onedecup
   1192  f324		       c6 ef		      dec	playfieldpos
   1193  f326				   onedecup
   1194  f326		       c6 ef		      dec	playfieldpos
   1195  f328		       f0 02		      beq	shiftdown
   1196  f32a		       10 3d		      bpl	noshiftdown2
   1197  f32c				   shiftdown
   1198  f32c				  -	      ifconst	pfrowheight
   1199  f32c				  -	      lda	#pfrowheight
   1200  f32c					      else
   1201  f32c					      ifnconst	pfres
   1202  f32c		       a9 08		      lda	#8
   1203  f32e				  -	      else
   1204  f32e				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f32e					      endif
   1206  f32e					      endif
   1207  f32e
   1208  f32e		       85 ef		      sta	playfieldpos
   1209  f330		       a5 a7		      lda	playfield+3
   1210  f332		       85 9f		      sta	temp4
   1211  f334		       a5 a6		      lda	playfield+2
   1212  f336		       85 9e		      sta	temp3
   1213  f338		       a5 a5		      lda	playfield+1
   1214  f33a		       85 9d		      sta	temp2
   1215  f33c		       a5 a4		      lda	playfield
   1216  f33e		       85 9c		      sta	temp1
   1217  f340		       a2 00		      ldx	#0
   1218  f342				   up2
   1219  f342		       b5 a8		      lda	playfield+4,x
   1220  f344				  -	      ifconst	superchip
   1221  f344				  -	      sta	playfield-128,x
   1222  f344				  -	      lda	playfield+5,x
   1223  f344				  -	      sta	playfield-127,x
   1224  f344				  -	      lda	playfield+6,x
   1225  f344				  -	      sta	playfield-126,x
   1226  f344				  -	      lda	playfield+7,x
   1227  f344				  -	      sta	playfield-125,x
   1228  f344					      else
   1229  f344		       95 a4		      sta	playfield,x
   1230  f346		       b5 a9		      lda	playfield+5,x
   1231  f348		       95 a5		      sta	playfield+1,x
   1232  f34a		       b5 aa		      lda	playfield+6,x
   1233  f34c		       95 a6		      sta	playfield+2,x
   1234  f34e		       b5 ab		      lda	playfield+7,x
   1235  f350		       95 a7		      sta	playfield+3,x
   1236  f352					      endif
   1237  f352		       8a		      txa
   1238  f353		       cb fc		      sbx	#252
   1239  f355				  -	      ifconst	pfres
   1240  f355				  -	      cpx	#(pfres-1)*4
   1241  f355					      else
   1242  f355		       e0 2c		      cpx	#44
   1243  f357					      endif
   1244  f357		       d0 e9		      bne	up2
   1245  f359
   1246  f359		       a5 9f		      lda	temp4
   1247  f35b
   1248  f35b				  -	      ifconst	superchip
   1249  f35b				  -	      ifconst	pfres
   1250  f35b				  -	      sta	playfield+pfres*4-129
   1251  f35b				  -	      lda	temp3
   1252  f35b				  -	      sta	playfield+pfres*4-130
   1253  f35b				  -	      lda	temp2
   1254  f35b				  -	      sta	playfield+pfres*4-131
   1255  f35b				  -	      lda	temp1
   1256  f35b				  -	      sta	playfield+pfres*4-132
   1257  f35b				  -	      else
   1258  f35b				  -	      sta	playfield+47-128
   1259  f35b				  -	      lda	temp3
   1260  f35b				  -	      sta	playfield+46-128
   1261  f35b				  -	      lda	temp2
   1262  f35b				  -	      sta	playfield+45-128
   1263  f35b				  -	      lda	temp1
   1264  f35b				  -	      sta	playfield+44-128
   1265  f35b				  -	      endif
   1266  f35b					      else
   1267  f35b				  -	      ifconst	pfres
   1268  f35b				  -	      sta	playfield+pfres*4-1
   1269  f35b				  -	      lda	temp3
   1270  f35b				  -	      sta	playfield+pfres*4-2
   1271  f35b				  -	      lda	temp2
   1272  f35b				  -	      sta	playfield+pfres*4-3
   1273  f35b				  -	      lda	temp1
   1274  f35b				  -	      sta	playfield+pfres*4-4
   1275  f35b					      else
   1276  f35b		       85 d3		      sta	playfield+47
   1277  f35d		       a5 9e		      lda	temp3
   1278  f35f		       85 d2		      sta	playfield+46
   1279  f361		       a5 9d		      lda	temp2
   1280  f363		       85 d1		      sta	playfield+45
   1281  f365		       a5 9c		      lda	temp1
   1282  f367		       85 d0		      sta	playfield+44
   1283  f369					      endif
   1284  f369					      endif
   1285  f369				   noshiftdown2
      0  f369					      RETURN
      1  f369					      ifnconst	bankswitch
      2  f369		       60		      rts
      3  f36a				  -	      else
      4  f36a				  -	      jmp	BS_return
      5  f36a					      endif
   1287  f36a
   1288  f36a
   1289  f36a				   notup
   1290  f36a							;down
   1291  f36a		       4a		      lsr
   1292  f36b		       b0 02		      bcs	oneincup
   1293  f36d		       e6 ef		      inc	playfieldpos
   1294  f36f				   oneincup
   1295  f36f		       e6 ef		      inc	playfieldpos
   1296  f371		       a5 ef		      lda	playfieldpos
   1297  f373
   1298  f373				  -	      ifconst	pfrowheight
   1299  f373				  -	      cmp	#pfrowheight+1
   1300  f373					      else
   1301  f373					      ifnconst	pfres
   1302  f373		       c9 09		      cmp	#9
   1303  f375				  -	      else
   1304  f375				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f375					      endif
   1306  f375					      endif
   1307  f375
   1308  f375		       90 3b		      bcc	noshiftdown
   1309  f377		       a9 01		      lda	#1
   1310  f379		       85 ef		      sta	playfieldpos
   1311  f37b
   1312  f37b				  -	      ifconst	pfres
   1313  f37b				  -	      lda	playfield+pfres*4-1
   1314  f37b				  -	      sta	temp4
   1315  f37b				  -	      lda	playfield+pfres*4-2
   1316  f37b				  -	      sta	temp3
   1317  f37b				  -	      lda	playfield+pfres*4-3
   1318  f37b				  -	      sta	temp2
   1319  f37b				  -	      lda	playfield+pfres*4-4
   1320  f37b					      else
   1321  f37b		       a5 d3		      lda	playfield+47
   1322  f37d		       85 9f		      sta	temp4
   1323  f37f		       a5 d2		      lda	playfield+46
   1324  f381		       85 9e		      sta	temp3
   1325  f383		       a5 d1		      lda	playfield+45
   1326  f385		       85 9d		      sta	temp2
   1327  f387		       a5 d0		      lda	playfield+44
   1328  f389					      endif
   1329  f389
   1330  f389		       85 9c		      sta	temp1
   1331  f38b
   1332  f38b				  -	      ifconst	pfres
   1333  f38b				  -	      ldx	#(pfres-1)*4
   1334  f38b					      else
   1335  f38b		       a2 2c		      ldx	#44
   1336  f38d					      endif
   1337  f38d				   down2
   1338  f38d		       b5 a3		      lda	playfield-1,x
   1339  f38f				  -	      ifconst	superchip
   1340  f38f				  -	      sta	playfield-125,x
   1341  f38f				  -	      lda	playfield-2,x
   1342  f38f				  -	      sta	playfield-126,x
   1343  f38f				  -	      lda	playfield-3,x
   1344  f38f				  -	      sta	playfield-127,x
   1345  f38f				  -	      lda	playfield-4,x
   1346  f38f				  -	      sta	playfield-128,x
   1347  f38f					      else
   1348  f38f		       95 a7		      sta	playfield+3,x
   1349  f391		       b5 a2		      lda	playfield-2,x
   1350  f393		       95 a6		      sta	playfield+2,x
   1351  f395		       b5 a1		      lda	playfield-3,x
   1352  f397		       95 a5		      sta	playfield+1,x
   1353  f399		       b5 a0		      lda	playfield-4,x
   1354  f39b		       95 a4		      sta	playfield,x
   1355  f39d					      endif
   1356  f39d		       8a		      txa
   1357  f39e		       cb 04		      sbx	#4
   1358  f3a0		       d0 eb		      bne	down2
   1359  f3a2
   1360  f3a2		       a5 9f		      lda	temp4
   1361  f3a4				  -	      ifconst	superchip
   1362  f3a4				  -	      sta	playfield-125
   1363  f3a4				  -	      lda	temp3
   1364  f3a4				  -	      sta	playfield-126
   1365  f3a4				  -	      lda	temp2
   1366  f3a4				  -	      sta	playfield-127
   1367  f3a4				  -	      lda	temp1
   1368  f3a4				  -	      sta	playfield-128
   1369  f3a4					      else
   1370  f3a4		       85 a7		      sta	playfield+3
   1371  f3a6		       a5 9e		      lda	temp3
   1372  f3a8		       85 a6		      sta	playfield+2
   1373  f3aa		       a5 9d		      lda	temp2
   1374  f3ac		       85 a5		      sta	playfield+1
   1375  f3ae		       a5 9c		      lda	temp1
   1376  f3b0		       85 a4		      sta	playfield
   1377  f3b2					      endif
   1378  f3b2				   noshiftdown
      0  f3b2					      RETURN
      1  f3b2					      ifnconst	bankswitch
      2  f3b2		       60		      rts
      3  f3b3				  -	      else
      4  f3b3				  -	      jmp	BS_return
      5  f3b3					      endif
   1380  f3b3							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3b3
   1382  f3b3							;standard routines needed for pretty much all games
   1383  f3b3							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3b3							; repositioning code and score pointer setup moved to overscan
   1385  f3b3							; read switches, joysticks now compiler generated (more efficient)
   1386  f3b3
   1387  f3b3				   randomize
   1388  f3b3		       a5 a2		      lda	rand
   1389  f3b5		       4a		      lsr
   1390  f3b6				  -	      ifconst	rand16
   1391  f3b6				  -	      rol	rand16
   1392  f3b6					      endif
   1393  f3b6		       90 02		      bcc	noeor
   1394  f3b8		       49 b4		      eor	#$B4
   1395  f3ba				   noeor
   1396  f3ba		       85 a2		      sta	rand
   1397  f3bc				  -	      ifconst	rand16
   1398  f3bc				  -	      eor	rand16
   1399  f3bc					      endif
      0  f3bc					      RETURN
      1  f3bc					      ifnconst	bankswitch
      2  f3bc		       60		      rts
      3  f3bd				  -	      else
      4  f3bd				  -	      jmp	BS_return
      5  f3bd					      endif
   1401  f3bd							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3bd
   1403  f3bd				   drawscreen
   1404  f3bd				  -	      ifconst	debugscore
   1405  f3bd				  -	      ldx	#14
   1406  f3bd				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3bd				  -
   1408  f3bd				  -	      ifconst	mincycles
   1409  f3bd				  -	      lda	mincycles
   1410  f3bd				  -	      cmp	INTIM
   1411  f3bd				  -	      lda	mincycles
   1412  f3bd				  -	      bcc	nochange
   1413  f3bd				  -	      lda	INTIM
   1414  f3bd				  -	      sta	mincycles
   1415  f3bd				  -nochange
   1416  f3bd				  -	      endif
   1417  f3bd				  -
   1418  f3bd				  -			; cmp #$2B
   1419  f3bd				  -			; bcs no_cycles_left
   1420  f3bd				  -	      bmi	cycles_left
   1421  f3bd				  -	      ldx	#64
   1422  f3bd				  -	      eor	#$ff	;make negative
   1423  f3bd				  -cycles_left
   1424  f3bd				  -	      stx	scorecolor
   1425  f3bd				  -	      and	#$7f	; clear sign bit
   1426  f3bd				  -	      tax
   1427  f3bd				  -	      lda	scorebcd,x
   1428  f3bd				  -	      sta	score+2
   1429  f3bd				  -	      lda	scorebcd1,x
   1430  f3bd				  -	      sta	score+1
   1431  f3bd				  -	      jmp	done_debugscore
   1432  f3bd				  -scorebcd
   1433  f3bd				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3bd				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3bd				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3bd				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3bd				  -scorebcd1
   1438  f3bd				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3bd				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3bd				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3bd				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3bd				  -done_debugscore
   1443  f3bd					      endif
   1444  f3bd
   1445  f3bd				  -	      ifconst	debugcycles
   1446  f3bd				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3bd				  -			; cmp #$2B
   1448  f3bd				  -			; BCC overscan
   1449  f3bd				  -	      bmi	overscan
   1450  f3bd				  -	      sta	COLUBK
   1451  f3bd				  -	      bcs	doneoverscan
   1452  f3bd					      endif
   1453  f3bd
   1454  f3bd				   overscan
   1455  f3bd				  -	      ifconst	interlaced
   1456  f3bd				  -	      PHP
   1457  f3bd				  -	      PLA
   1458  f3bd				  -	      EOR	#4	; flip interrupt bit
   1459  f3bd				  -	      PHA
   1460  f3bd				  -	      PLP
   1461  f3bd				  -	      AND	#4	; isolate the interrupt bit
   1462  f3bd				  -	      TAX		; save it for later
   1463  f3bd					      endif
   1464  f3bd
   1465  f3bd				   overscanloop
   1466  f3bd		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3c0		       30 fb		      bmi	overscanloop
   1468  f3c2				   doneoverscan
   1469  f3c2
   1470  f3c2							;do VSYNC
   1471  f3c2
   1472  f3c2				  -	      ifconst	interlaced
   1473  f3c2				  -	      CPX	#4
   1474  f3c2				  -	      BNE	oddframevsync
   1475  f3c2					      endif
   1476  f3c2
   1477  f3c2		       a9 02		      lda	#2
   1478  f3c4		       85 02		      sta	WSYNC
   1479  f3c6		       85 00		      sta	VSYNC
   1480  f3c8		       85 02		      STA	WSYNC
   1481  f3ca		       85 02		      STA	WSYNC
   1482  f3cc		       4a		      lsr
   1483  f3cd		       85 02		      STA	WSYNC
   1484  f3cf		       85 00		      STA	VSYNC
   1485  f3d1		       85 01		      sta	VBLANK
   1486  f3d3					      ifnconst	overscan_time
   1487  f3d3		       a9 a5		      lda	#37+128
   1488  f3d5				  -	      else
   1489  f3d5				  -	      lda	#overscan_time+128
   1490  f3d5					      endif
   1491  f3d5		       8d 96 02 	      sta	TIM64T
   1492  f3d8
   1493  f3d8				  -	      ifconst	interlaced
   1494  f3d8				  -	      jmp	postsync
   1495  f3d8				  -
   1496  f3d8				  -oddframevsync
   1497  f3d8				  -	      sta	WSYNC
   1498  f3d8				  -
   1499  f3d8				  -	      LDA	($80,X)	; 11 waste
   1500  f3d8				  -	      LDA	($80,X)	; 11 waste
   1501  f3d8				  -	      LDA	($80,X)	; 11 waste
   1502  f3d8				  -
   1503  f3d8				  -	      lda	#2
   1504  f3d8				  -	      sta	VSYNC
   1505  f3d8				  -	      sta	WSYNC
   1506  f3d8				  -	      sta	WSYNC
   1507  f3d8				  -	      sta	WSYNC
   1508  f3d8				  -
   1509  f3d8				  -	      LDA	($80,X)	; 11 waste
   1510  f3d8				  -	      LDA	($80,X)	; 11 waste
   1511  f3d8				  -	      LDA	($80,X)	; 11 waste
   1512  f3d8				  -
   1513  f3d8				  -	      lda	#0
   1514  f3d8				  -	      sta	VSYNC
   1515  f3d8				  -	      sta	VBLANK
   1516  f3d8				  -	      ifnconst	overscan_time
   1517  f3d8				  -	      lda	#37+128
   1518  f3d8				  -	      else
   1519  f3d8				  -	      lda	#overscan_time+128
   1520  f3d8				  -	      endif
   1521  f3d8				  -	      sta	TIM64T
   1522  f3d8				  -
   1523  f3d8				  -postsync
   1524  f3d8					      endif
   1525  f3d8
   1526  f3d8				  -	      ifconst	legacy
   1527  f3d8				  -	      if	legacy < 100
   1528  f3d8				  -	      ldx	#4
   1529  f3d8				  -adjustloop
   1530  f3d8				  -	      lda	player0x,x
   1531  f3d8				  -	      sec
   1532  f3d8				  -	      sbc	#14	;?
   1533  f3d8				  -	      sta	player0x,x
   1534  f3d8				  -	      dex
   1535  f3d8				  -	      bpl	adjustloop
   1536  f3d8				  -	      endif
   1537  f3d8					      endif
   1538  f3d8				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3d8				  -	      repeat	($fa-(<*))
   1540  f3d8				  -	      nop
   1541  f3d8				  -	      repend
   1542  f3d8					      endif
   1543  f3d8		       85 02		      sta	WSYNC
   1544  f3da		       a2 04		      ldx	#4
      0  f3dc					      SLEEP	3
      1  f3dc				   .CYCLES    SET	3
      2  f3dc
      3  f3dc				  -	      IF	.CYCLES < 2
      4  f3dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3dc				  -	      ERR
      6  f3dc					      ENDIF
      7  f3dc
      8  f3dc					      IF	.CYCLES & 1
      9  f3dc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3dc		       04 00		      nop	0
     11  f3de				  -	      ELSE
     12  f3de				  -	      bit	VSYNC
     13  f3de					      ENDIF
     14  f3de				   .CYCLES    SET	.CYCLES - 3
     15  f3de					      ENDIF
     16  f3de
     17  f3de				  -	      REPEAT	.CYCLES / 2
     18  f3de				  -	      nop
     19  f3de					      REPEND
   1546  f3de				   HorPosLoop		; 5
   1547  f3de		       b5 80		      lda	player0x,X	;+4 9
   1548  f3e0		       38		      sec		;+2 11
   1549  f3e1				   DivideLoop
   1550  f3e1		       e9 0f		      sbc	#15
   1551  f3e3		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3e5		       95 9c		      sta	temp1,X	;+4 19
   1553  f3e7		       95 10		      sta	RESP0,X	;+4 23
   1554  f3e9		       85 02		      sta	WSYNC
   1555  f3eb		       ca		      dex
   1556  f3ec		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3ee							; 4
   1558  f3ee
   1559  f3ee		       a2 04		      ldx	#4
   1560  f3f0		       b4 9c		      ldy	temp1,X
   1561  f3f2		       b9 4e f3 	      lda	repostable-256,Y
   1562  f3f5		       95 20		      sta	HMP0,X	;+14 18
   1563  f3f7
   1564  f3f7		       ca		      dex
   1565  f3f8		       b4 9c		      ldy	temp1,X
   1566  f3fa		       b9 4e f3 	      lda	repostable-256,Y
   1567  f3fd		       95 20		      sta	HMP0,X	;+14 32
   1568  f3ff
   1569  f3ff		       ca		      dex
   1570  f400		       b4 9c		      ldy	temp1,X
   1571  f402		       b9 4e f3 	      lda	repostable-256,Y
   1572  f405		       95 20		      sta	HMP0,X	;+14 46
   1573  f407
   1574  f407		       ca		      dex
   1575  f408		       b4 9c		      ldy	temp1,X
   1576  f40a		       b9 4e f3 	      lda	repostable-256,Y
   1577  f40d		       95 20		      sta	HMP0,X	;+14 60
   1578  f40f
   1579  f40f		       ca		      dex
   1580  f410		       b4 9c		      ldy	temp1,X
   1581  f412		       b9 4e f3 	      lda	repostable-256,Y
   1582  f415		       95 20		      sta	HMP0,X	;+14 74
   1583  f417
   1584  f417		       85 02		      sta	WSYNC
   1585  f419
   1586  f419		       85 2a		      sta	HMOVE	;+3 3
   1587  f41b
   1588  f41b
   1589  f41b				  -	      ifconst	legacy
   1590  f41b				  -	      if	legacy < 100
   1591  f41b				  -	      ldx	#4
   1592  f41b				  -adjustloop2
   1593  f41b				  -	      lda	player0x,x
   1594  f41b				  -	      clc
   1595  f41b				  -	      adc	#14	;?
   1596  f41b				  -	      sta	player0x,x
   1597  f41b				  -	      dex
   1598  f41b				  -	      bpl	adjustloop2
   1599  f41b				  -	      endif
   1600  f41b					      endif
   1601  f41b
   1602  f41b
   1603  f41b
   1604  f41b
   1605  f41b							;set score pointers
   1606  f41b		       a7 95		      lax	score+2
   1607  f41d		       20 4e f4 	      jsr	scorepointerset
   1608  f420		       84 9b		      sty	scorepointers+5
   1609  f422		       86 98		      stx	scorepointers+2
   1610  f424		       a7 94		      lax	score+1
   1611  f426		       20 4e f4 	      jsr	scorepointerset
   1612  f429		       84 9a		      sty	scorepointers+4
   1613  f42b		       86 97		      stx	scorepointers+1
   1614  f42d		       a7 93		      lax	score
   1615  f42f		       20 4e f4 	      jsr	scorepointerset
   1616  f432		       84 99		      sty	scorepointers+3
   1617  f434		       86 96		      stx	scorepointers
   1618  f436
   1619  f436				   vblk
   1620  f436							; run possible vblank bB code
   1621  f436				  -	      ifconst	vblank_bB_code
   1622  f436				  -	      jsr	vblank_bB_code
   1623  f436					      endif
   1624  f436				   vblk2
   1625  f436		       ad 84 02 	      LDA	INTIM
   1626  f439		       30 fb		      bmi	vblk2
   1627  f43b		       4c 34 f0 	      jmp	kernel
   1628  f43e
   1629  f43e
   1630  f43e		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f447		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f44e				   repostable
   1633  f44e
   1634  f44e				   scorepointerset
   1635  f44e		       29 0f		      and	#$0F
   1636  f450		       0a		      asl
   1637  f451		       0a		      asl
   1638  f452		       0a		      asl
   1639  f453		       69 9c		      adc	#<scoretable
   1640  f455		       a8		      tay
   1641  f456		       8a		      txa
   1642  f457							; and #$F0
   1643  f457							; lsr
   1644  f457		       4b f0		      asr	#$F0
   1645  f459		       69 9c		      adc	#<scoretable
   1646  f45b		       aa		      tax
   1647  f45c		       60		      rts
   1648  f45d				   game
   1649  f45d				   .L00 		;  rem ---------------------------------------------------------------------------------
   1650  f45d
   1651  f45d				   .L01 		;  rem Shadow Over Space an Atari Game by James Weeks 2025 
   1652  f45d
   1653  f45d				   .
   1654  f45d							; 
   1655  f45d
   1656  f45d				   .L02 		;  rem ---------------------------------------------------------------------------------  
   1657  f45d
   1658  f45d				   .L03 		;  set romsize 4k  :  rem set rom size for cartridge and IDE
   1659  f45d
   1660  f45d				   .
   1661  f45d							; 
   1662  f45d
   1663  f45d				   .L04 		;  rem variables
   1664  f45d
   1665  f45d				   .L05 		;  rem ----------------------------------------------------------------------------
   1666  f45d
   1667  f45d				   .L06 		;  c{1} = 0  : rem Turned on if the last location of the joystick was UP
   1668  f45d
   1669  f45d		       a5 d6		      LDA	c
   1670  f45f		       29 fd		      AND	#253
   1671  f461		       85 d6		      STA	c
   1672  f463				   .L07 		;  c{2} = 0  : rem Turned on if the last location of the joystick was DOWN
   1673  f463
   1674  f463		       a5 d6		      LDA	c
   1675  f465		       29 fb		      AND	#251
   1676  f467		       85 d6		      STA	c
   1677  f469				   .L08 		;  c{3} = 0  : rem Turned on if the last location of the joystick was LEFT
   1678  f469
   1679  f469		       a5 d6		      LDA	c
   1680  f46b		       29 f7		      AND	#247
   1681  f46d		       85 d6		      STA	c
   1682  f46f				   .L09 		;  c{4} = 1  : rem Turned on if the last location of the joystick was RIGHT
   1683  f46f
   1684  f46f		       a5 d6		      LDA	c
   1685  f471		       09 10		      ORA	#16
   1686  f473		       85 d6		      STA	c
   1687  f475				   .L010		;  c{5} = 0  : rem Turned on if the last location of the joystick was UP+LEFT
   1688  f475
   1689  f475		       a5 d6		      LDA	c
   1690  f477		       29 df		      AND	#223
   1691  f479		       85 d6		      STA	c
   1692  f47b				   .L011		;  c{6} = 0  : rem Turned on if the last location of the joystick was UP+RIGHT
   1693  f47b
   1694  f47b		       a5 d6		      LDA	c
   1695  f47d		       29 bf		      AND	#191
   1696  f47f		       85 d6		      STA	c
   1697  f481				   .L012		;  c{7} = 0  : rem Turned on if the last location of the joystick was DOWN+LEFT
   1698  f481
   1699  f481		       a5 d6		      LDA	c
   1700  f483		       29 7f		      AND	#127
   1701  f485		       85 d6		      STA	c
   1702  f487				   .L013		;  c{0} = 0  : rem Turned on if the last location of the joystick was DOWN+RIGHT
   1703  f487
   1704  f487		       a5 d6		      LDA	c
   1705  f489		       29 fe		      AND	#254
   1706  f48b		       85 d6		      STA	c
   1707  f48d				   .L014		;  rem ----------------------------------------------------------------------------
   1708  f48d
   1709  f48d				   .L015		;  e = 20  : rem Counter for limiting travel of fired missile
   1710  f48d
   1711  f48d		       a9 14		      LDA	#20
   1712  f48f		       85 d8		      STA	e
   1713  f491				   .L016		;  w = 0  : rem Used to determine player reflection (REFP1)
   1714  f491
   1715  f491		       a9 00		      LDA	#0
   1716  f493		       85 ea		      STA	w
   1717  f495				   .L017		;  rem ----------------------------------------------------------------------------
   1718  f495
   1719  f495				   .L018		;  f  =  50  :  rem variable for player horizontal position
   1720  f495
   1721  f495		       a9 32		      LDA	#50
   1722  f497		       85 d9		      STA	f
   1723  f499				   .L019		;  d  =  50  :  rem variable for player vertical position
   1724  f499
   1725  f499		       a9 32		      LDA	#50
   1726  f49b		       85 d7		      STA	d
   1727  f49d				   .L020		;  g  =  30  :  rem monster position vertical
   1728  f49d
   1729  f49d		       a9 1e		      LDA	#30
   1730  f49f		       85 da		      STA	g
   1731  f4a1				   .L021		;  h  =  90  :  rem monster position horizontal
   1732  f4a1
   1733  f4a1		       a9 5a		      LDA	#90
   1734  f4a3		       85 db		      STA	h
   1735  f4a5				   .L022		;  m  =  0  :	rem counter for monster animation frames
   1736  f4a5
   1737  f4a5		       a9 00		      LDA	#0
   1738  f4a7		       85 e0		      STA	m
   1739  f4a9				   .L023		;  n  =  0  :	rem counter for player animation frames
   1740  f4a9
   1741  f4a9		       a9 00		      LDA	#0
   1742  f4ab		       85 e1		      STA	n
   1743  f4ad				   .L024		;  z  =  0  :	rem Flag to simulate monster ai
   1744  f4ad
   1745  f4ad		       a9 00		      LDA	#0
   1746  f4af		       85 ed		      STA	z
   1747  f4b1				   .L025		;  k  =  0  :	rem flag for monster missile
   1748  f4b1
   1749  f4b1		       a9 00		      LDA	#0
   1750  f4b3		       85 de		      STA	k
   1751  f4b5				   .L026		;  p  =  30  :  rem flag for monster health
   1752  f4b5
   1753  f4b5		       a9 1e		      LDA	#30
   1754  f4b7		       85 e3		      STA	p
   1755  f4b9				   .L027		;  j  =  5  :	rem flag for player health
   1756  f4b9
   1757  f4b9		       a9 05		      LDA	#5
   1758  f4bb		       85 dd		      STA	j
   1759  f4bd				   .L028		;  s  =  0  :	rem player sprite direction
   1760  f4bd
   1761  f4bd		       a9 00		      LDA	#0
   1762  f4bf		       85 e6		      STA	s
   1763  f4c1				   .
   1764  f4c1							; 
   1765  f4c1
   1766  f4c1				   .L029		;  rem ---------------------------------------------------------------------------------
   1767  f4c1
   1768  f4c1				   .L030		;  dim p0y  =	d  :  rem player vertical position
   1769  f4c1
   1770  f4c1				   .L031		;  dim p0x  =	f  :  rem player horizontal position
   1771  f4c1
   1772  f4c1				   .
   1773  f4c1							; 
   1774  f4c1
   1775  f4c1				   .L032		;  dim p1y  =	g  :  rem set p1y to g, monster vertical position
   1776  f4c1
   1777  f4c1				   .L033		;  dim p1x  =	h  :  rem set p1x to h, moster horizantal position
   1778  f4c1
   1779  f4c1				   .
   1780  f4c1							; 
   1781  f4c1
   1782  f4c1				   .L034		;  dim monsterSprite  =  m  :	rem set variable m, counter fo monster animation frames
   1783  f4c1
   1784  f4c1				   .L035		;  dim playerSprite  =  n  :  rem set variable n, counter fo player animation frames
   1785  f4c1
   1786  f4c1				   .
   1787  f4c1							; 
   1788  f4c1
   1789  f4c1				   .L036		;  dim moved  =  0  :	rem Flag to check if the player moved
   1790  f4c1
   1791  f4c1				   .
   1792  f4c1							; 
   1793  f4c1
   1794  f4c1				   .L037		;  rem ---------------------------------------------------------------------------------
   1795  f4c1
   1796  f4c1				   .L038		;  player0x  =  p0x  :  rem set player position x
   1797  f4c1
   1798  f4c1		       a5 d9		      LDA	p0x
   1799  f4c3		       85 80		      STA	player0x
   1800  f4c5				   .L039		;  player0y  =  p0y  :  rem set player position y
   1801  f4c5
   1802  f4c5		       a5 d7		      LDA	p0y
   1803  f4c7		       85 85		      STA	player0y
   1804  f4c9				   .L040		;  player1y  =  p1y  :  rem set monster position y
   1805  f4c9
   1806  f4c9		       a5 da		      LDA	p1y
   1807  f4cb		       85 86		      STA	player1y
   1808  f4cd				   .L041		;  player1x  =  p1x  :  rem set monster position x
   1809  f4cd
   1810  f4cd		       a5 db		      LDA	p1x
   1811  f4cf		       85 81		      STA	player1x
   1812  f4d1				   .
   1813  f4d1							; 
   1814  f4d1
   1815  f4d1				   .
   1816  f4d1							; 
   1817  f4d1
   1818  f4d1				   .
   1819  f4d1							; 
   1820  f4d1
   1821  f4d1				   .titlescreen
   1822  f4d1							; titlescreen
   1823  f4d1
   1824  f4d1				   .L042		;  rem ---------------------------------------------------------------------------------
   1825  f4d1
   1826  f4d1				   .L043		;  COLUPF =  $A0  +   ( rand  &  3 )	:  rem set the playfield color of title screen 
   1827  f4d1
   1828  f4d1							; complex statement detected
   1829  f4d1		       a9 a0		      LDA	#$A0
   1830  f4d3		       48		      PHA
   1831  f4d4		       20 b3 f3 	      jsr	randomize
   1832  f4d7		       29 03		      AND	#3
   1833  f4d9		       ba		      TSX
   1834  f4da		       e8		      INX
   1835  f4db		       9a		      TXS
   1836  f4dc		       18		      CLC
   1837  f4dd		       75 00		      ADC	$00,x
   1838  f4df		       85 08		      STA	COLUPF
   1839  f4e1				   .
   1840  f4e1							; 
   1841  f4e1
   1842  f4e1				   .L044		;  rem the playfield command draws the X's on the screen.  Must use capital X, must be 32x11.
   1843  f4e1
   1844  f4e1				   .L045		;  playfield:
   1845  f4e1
   1846  f4e1				  -	      ifconst	pfres
   1847  f4e1				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1848  f4e1					      else
   1849  f4e1		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1850  f4e3					      endif
   1851  f4e3		       4c 12 f5 	      jmp	pflabel0
   1852  f4e6				   PF_data0
   1853  f4e6		       fd 6e		      .byte.b	%11111101, %01101110
   1854  f4e8					      if	(pfwidth>2)
   1855  f4e8		       74 fe		      .byte.b	%01110100, %11111110
   1856  f4ea					      endif
   1857  f4ea		       85 aa		      .byte.b	%10000101, %10101010
   1858  f4ec					      if	(pfwidth>2)
   1859  f4ec		       54 82		      .byte.b	%01010100, %10000010
   1860  f4ee					      endif
   1861  f4ee		       f7 ae		      .byte.b	%11110111, %10101110
   1862  f4f0					      if	(pfwidth>2)
   1863  f4f0		       54 82		      .byte.b	%01010100, %10000010
   1864  f4f2					      endif
   1865  f4f2		       15 aa		      .byte.b	%00010101, %10101010
   1866  f4f4					      if	(pfwidth>2)
   1867  f4f4		       55 82		      .byte.b	%01010101, %10000010
   1868  f4f6					      endif
   1869  f4f6		       f5 6a		      .byte.b	%11110101, %01101010
   1870  f4f8					      if	(pfwidth>2)
   1871  f4f8		       76 83		      .byte.b	%01110110, %10000011
   1872  f4fa					      endif
   1873  f4fa		       f7 ee		      .byte.b	%11110111, %11101110
   1874  f4fc					      if	(pfwidth>2)
   1875  f4fc		       bf 83		      .byte.b	%10111111, %10000011
   1876  f4fe					      endif
   1877  f4fe		       85 2a		      .byte.b	%10000101, %00101010
   1878  f500					      if	(pfwidth>2)
   1879  f500		       20 80		      .byte.b	%00100000, %10000000
   1880  f502					      endif
   1881  f502		       f7 2e		      .byte.b	%11110111, %00101110
   1882  f504					      if	(pfwidth>2)
   1883  f504		       3e 80		      .byte.b	%00111110, %10000000
   1884  f506					      endif
   1885  f506		       14 2a		      .byte.b	%00010100, %00101010
   1886  f508					      if	(pfwidth>2)
   1887  f508		       20 80		      .byte.b	%00100000, %10000000
   1888  f50a					      endif
   1889  f50a		       f4 ea		      .byte.b	%11110100, %11101010
   1890  f50c					      if	(pfwidth>2)
   1891  f50c		       bf 83		      .byte.b	%10111111, %10000011
   1892  f50e					      endif
   1893  f50e		       ff ff		      .byte.b	%11111111, %11111111
   1894  f510					      if	(pfwidth>2)
   1895  f510		       ff ff		      .byte.b	%11111111, %11111111
   1896  f512					      endif
   1897  f512				   pflabel0
   1898  f512		       bd e6 f4 	      lda	PF_data0,x
   1899  f515		       95 a4		      sta	playfield,x
   1900  f517		       ca		      dex
   1901  f518		       10 f8		      bpl	pflabel0
   1902  f51a				   .
   1903  f51a							; 
   1904  f51a
   1905  f51a				   .L046		;  drawscreen
   1906  f51a
   1907  f51a		       20 bd f3 	      jsr	drawscreen
   1908  f51d				   .
   1909  f51d							; 
   1910  f51d
   1911  f51d				   .L047		;  if joy0fire then goto main	:  rem if you press fire on the joystick, you'll leave the title screen and start the main program below
   1912  f51d
   1913  f51d		       24 0c		      bit	INPT4
   1914  f51f		       30 03		      BMI	.skipL047
   1915  f521				   .condpart0
   1916  f521		       4c 27 f5 	      jmp	.main
   1917  f524				   .skipL047
   1918  f524				   .
   1919  f524							; 
   1920  f524
   1921  f524				   .L048		;  goto titlescreen  :  rem if the joystick button is not pressed, just loop back to the titlescreen again
   1922  f524
   1923  f524		       4c d1 f4 	      jmp	.titlescreen
   1924  f527				   .
   1925  f527							; 
   1926  f527
   1927  f527				   .
   1928  f527							; 
   1929  f527
   1930  f527				   .L049		;  rem ---------------------------------------------------------------------------------
   1931  f527
   1932  f527				   .main
   1933  f527							; main
   1934  f527
   1935  f527				   .
   1936  f527							; 
   1937  f527
   1938  f527				   .L050		;  rem ---------------------------------------------------------------------------------
   1939  f527
   1940  f527				   .L051		;  if p  =  0 then goto win  :  rem player hits monster 30 times win
   1941  f527
   1942  f527		       a5 e3		      LDA	p
   1943  f529		       c9 00		      CMP	#0
   1944  f52b		       d0 03		      BNE	.skipL051
   1945  f52d				   .condpart1
   1946  f52d		       4c 27 fb 	      jmp	.win
   1947  f530				   .skipL051
   1948  f530				   .L052		;  if j  =  0 then goto lose  :  rem player get hit 5 times lose
   1949  f530
   1950  f530		       a5 dd		      LDA	j
   1951  f532		       c9 00		      CMP	#0
   1952  f534		       d0 03		      BNE	.skipL052
   1953  f536				   .condpart2
   1954  f536		       4c 76 fb 	      jmp	.lose
   1955  f539				   .skipL052
   1956  f539				   .
   1957  f539							; 
   1958  f539
   1959  f539				   .L053		;  if joy0right then w  =  1  :  rem Set direction to right
   1960  f539
   1961  f539		       2c 80 02 	      bit	SWCHA
   1962  f53c		       30 04		      BMI	.skipL053
   1963  f53e				   .condpart3
   1964  f53e		       a9 01		      LDA	#1
   1965  f540		       85 ea		      STA	w
   1966  f542				   .skipL053
   1967  f542				   .L054		;  if joy0left then w	=  0  :  rem Set direction to left
   1968  f542
   1969  f542		       2c 80 02 	      bit	SWCHA
   1970  f545		       70 04		      BVS	.skipL054
   1971  f547				   .condpart4
   1972  f547		       a9 00		      LDA	#0
   1973  f549		       85 ea		      STA	w
   1974  f54b				   .skipL054
   1975  f54b				   .
   1976  f54b							; 
   1977  f54b
   1978  f54b				   .L055		;  playerSprite  =  playerSprite  +  1  :  rem Increase animation frame counter
   1979  f54b
   1980  f54b		       e6 e1		      INC	playerSprite
   1981  f54d				   .
   1982  f54d							; 
   1983  f54d
   1984  f54d				   .L056		;  if playerSprite  >	30 then playerSprite  =  0  :  rem Reset animation cycle
   1985  f54d
   1986  f54d		       a9 1e		      LDA	#30
   1987  f54f		       c5 e1		      CMP	playerSprite
   1988  f551		       b0 04		      BCS	.skipL056
   1989  f553				   .condpart5
   1990  f553		       a9 00		      LDA	#0
   1991  f555		       85 e1		      STA	playerSprite
   1992  f557				   .skipL056
   1993  f557				   .
   1994  f557							; 
   1995  f557
   1996  f557				   .L057		;  if joy0right then s  =  1  :  rem Set direction to right
   1997  f557
   1998  f557		       2c 80 02 	      bit	SWCHA
   1999  f55a		       30 04		      BMI	.skipL057
   2000  f55c				   .condpart6
   2001  f55c		       a9 01		      LDA	#1
   2002  f55e		       85 e6		      STA	s
   2003  f560				   .skipL057
   2004  f560				   .L058		;  if joy0left then s	=  0  :  rem Set direction to left
   2005  f560
   2006  f560		       2c 80 02 	      bit	SWCHA
   2007  f563		       70 04		      BVS	.skipL058
   2008  f565				   .condpart7
   2009  f565		       a9 00		      LDA	#0
   2010  f567		       85 e6		      STA	s
   2011  f569				   .skipL058
   2012  f569				   .
   2013  f569							; 
   2014  f569
   2015  f569				   .L059		;  playerSprite  =  playerSprite  +  1  :  rem Increase animation frame counter
   2016  f569
   2017  f569		       e6 e1		      INC	playerSprite
   2018  f56b				   .
   2019  f56b							; 
   2020  f56b
   2021  f56b				   .L060		;  if playerSprite  >	30 then playerSprite  =  0  :  rem Reset animation cycle
   2022  f56b
   2023  f56b		       a9 1e		      LDA	#30
   2024  f56d		       c5 e1		      CMP	playerSprite
   2025  f56f		       b0 04		      BCS	.skipL060
   2026  f571				   .condpart8
   2027  f571		       a9 00		      LDA	#0
   2028  f573		       85 e1		      STA	playerSprite
   2029  f575				   .skipL060
   2030  f575				   .
   2031  f575							; 
   2032  f575
   2033  f575				   .L061		;  if s  =  1 then player0:
   2034  f575
   2035  f575		       a5 e6		      LDA	s
   2036  f577		       c9 01		      CMP	#1
   2037  f579		       d0 0c		      BNE	.skipL061
   2038  f57b				   .condpart9
   2039  f57b		       a2 c5		      LDX	#<player9then_0
   2040  f57d		       86 8a		      STX	player0pointerlo
   2041  f57f		       a9 fb		      LDA	#>player9then_0
   2042  f581		       85 8b		      STA	player0pointerhi
   2043  f583		       a9 0f		      LDA	#15
   2044  f585		       85 8e		      STA	player0height
   2045  f587				   .skipL061
   2046  f587				   .
   2047  f587							; 
   2048  f587
   2049  f587				   .L062		;  if s  =  0 then player0:	     
   2050  f587
   2051  f587		       a5 e6		      LDA	s
   2052  f589		       c9 00		      CMP	#0
   2053  f58b		       d0 0c		      BNE	.skipL062
   2054  f58d				   .condpart10
   2055  f58d		       a2 d5		      LDX	#<player10then_0
   2056  f58f		       86 8a		      STX	player0pointerlo
   2057  f591		       a9 fb		      LDA	#>player10then_0
   2058  f593		       85 8b		      STA	player0pointerhi
   2059  f595		       a9 0f		      LDA	#15
   2060  f597		       85 8e		      STA	player0height
   2061  f599				   .skipL062
   2062  f599				   .
   2063  f599							; 
   2064  f599
   2065  f599				   .L063		;  monsterSprite  =  monsterSprite  +	1  :  rem animation frames for monster
   2066  f599
   2067  f599		       e6 e0		      INC	monsterSprite
   2068  f59b				   .
   2069  f59b							; 
   2070  f59b
   2071  f59b				   .L064		;  if monsterSprite  =  10 then player1: 
   2072  f59b
   2073  f59b		       a5 e0		      LDA	monsterSprite
   2074  f59d		       c9 0a		      CMP	#10
   2075  f59f		       d0 0c		      BNE	.skipL064
   2076  f5a1				   .condpart11
   2077  f5a1		       a2 e5		      LDX	#<player11then_1
   2078  f5a3		       86 8c		      STX	player1pointerlo
   2079  f5a5		       a9 fb		      LDA	#>player11then_1
   2080  f5a7		       85 8d		      STA	player1pointerhi
   2081  f5a9		       a9 0a		      LDA	#10
   2082  f5ab		       85 8f		      STA	player1height
   2083  f5ad				   .skipL064
   2084  f5ad				   .
   2085  f5ad							; 
   2086  f5ad
   2087  f5ad				   .L065		;  if monsterSprite  =  20 then player1:
   2088  f5ad
   2089  f5ad		       a5 e0		      LDA	monsterSprite
   2090  f5af		       c9 14		      CMP	#20
   2091  f5b1		       d0 0c		      BNE	.skipL065
   2092  f5b3				   .condpart12
   2093  f5b3		       a2 f0		      LDX	#<player12then_1
   2094  f5b5		       86 8c		      STX	player1pointerlo
   2095  f5b7		       a9 fb		      LDA	#>player12then_1
   2096  f5b9		       85 8d		      STA	player1pointerhi
   2097  f5bb		       a9 0a		      LDA	#10
   2098  f5bd		       85 8f		      STA	player1height
   2099  f5bf				   .skipL065
   2100  f5bf				   .
   2101  f5bf							; 
   2102  f5bf
   2103  f5bf				   .L066		;  if monsterSprite  =  30 then player1:
   2104  f5bf
   2105  f5bf		       a5 e0		      LDA	monsterSprite
   2106  f5c1		       c9 1e		      CMP	#30
   2107  f5c3		       d0 0c		      BNE	.skipL066
   2108  f5c5				   .condpart13
   2109  f5c5		       a2 00		      LDX	#<player13then_1
   2110  f5c7		       86 8c		      STX	player1pointerlo
   2111  f5c9		       a9 fc		      LDA	#>player13then_1
   2112  f5cb		       85 8d		      STA	player1pointerhi
   2113  f5cd		       a9 0a		      LDA	#10
   2114  f5cf		       85 8f		      STA	player1height
   2115  f5d1				   .skipL066
   2116  f5d1				   .
   2117  f5d1							; 
   2118  f5d1
   2119  f5d1				   .L067		;  rem ---------------------------------------------------------------------------------
   2120  f5d1
   2121  f5d1				   .L068		;  playfield:
   2122  f5d1
   2123  f5d1				  -	      ifconst	pfres
   2124  f5d1				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2125  f5d1					      else
   2126  f5d1		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2127  f5d3					      endif
   2128  f5d3		       4c 02 f6 	      jmp	pflabel1
   2129  f5d6				   PF_data1
   2130  f5d6		       ff ff		      .byte.b	%11111111, %11111111
   2131  f5d8					      if	(pfwidth>2)
   2132  f5d8		       ff ff		      .byte.b	%11111111, %11111111
   2133  f5da					      endif
   2134  f5da		       80 00		      .byte.b	%10000000, %00000000
   2135  f5dc					      if	(pfwidth>2)
   2136  f5dc		       00 80		      .byte.b	%00000000, %10000000
   2137  f5de					      endif
   2138  f5de		       80 00		      .byte.b	%10000000, %00000000
   2139  f5e0					      if	(pfwidth>2)
   2140  f5e0		       00 80		      .byte.b	%00000000, %10000000
   2141  f5e2					      endif
   2142  f5e2		       80 00		      .byte.b	%10000000, %00000000
   2143  f5e4					      if	(pfwidth>2)
   2144  f5e4		       00 80		      .byte.b	%00000000, %10000000
   2145  f5e6					      endif
   2146  f5e6		       80 00		      .byte.b	%10000000, %00000000
   2147  f5e8					      if	(pfwidth>2)
   2148  f5e8		       00 80		      .byte.b	%00000000, %10000000
   2149  f5ea					      endif
   2150  f5ea		       80 00		      .byte.b	%10000000, %00000000
   2151  f5ec					      if	(pfwidth>2)
   2152  f5ec		       00 80		      .byte.b	%00000000, %10000000
   2153  f5ee					      endif
   2154  f5ee		       80 00		      .byte.b	%10000000, %00000000
   2155  f5f0					      if	(pfwidth>2)
   2156  f5f0		       00 80		      .byte.b	%00000000, %10000000
   2157  f5f2					      endif
   2158  f5f2		       80 36		      .byte.b	%10000000, %00110110
   2159  f5f4					      if	(pfwidth>2)
   2160  f5f4		       00 80		      .byte.b	%00000000, %10000000
   2161  f5f6					      endif
   2162  f5f6		       90 36		      .byte.b	%10010000, %00110110
   2163  f5f8					      if	(pfwidth>2)
   2164  f5f8		       20 84		      .byte.b	%00100000, %10000100
   2165  f5fa					      endif
   2166  f5fa		       da 36		      .byte.b	%11011010, %00110110
   2167  f5fc					      if	(pfwidth>2)
   2168  f5fc		       a9 a6		      .byte.b	%10101001, %10100110
   2169  f5fe					      endif
   2170  f5fe		       ff ff		      .byte.b	%11111111, %11111111
   2171  f600					      if	(pfwidth>2)
   2172  f600		       ff ff		      .byte.b	%11111111, %11111111
   2173  f602					      endif
   2174  f602				   pflabel1
   2175  f602		       bd d6 f5 	      lda	PF_data1,x
   2176  f605		       95 a4		      sta	playfield,x
   2177  f607		       ca		      dex
   2178  f608		       10 f8		      bpl	pflabel1
   2179  f60a				   .
   2180  f60a							; 
   2181  f60a
   2182  f60a				   .L069		;  rem ---------------------------------------------------------------------------------
   2183  f60a
   2184  f60a				   .L070		;  COLUP0 =  $70  +   ( rand  &  7 )	:  rem PLAYER COLUP0=<xx> sets the color of the player 0 sprite. Valid range is 0-254 , randomizes colors 
   2185  f60a
   2186  f60a							; complex statement detected
   2187  f60a		       a9 70		      LDA	#$70
   2188  f60c		       48		      PHA
   2189  f60d		       20 b3 f3 	      jsr	randomize
   2190  f610		       29 07		      AND	#7
   2191  f612		       ba		      TSX
   2192  f613		       e8		      INX
   2193  f614		       9a		      TXS
   2194  f615		       18		      CLC
   2195  f616		       75 00		      ADC	$00,x
   2196  f618		       85 06		      STA	COLUP0
   2197  f61a				   .L071		;  COLUP1  =  $C0  +	( rand	&  7 )	 :  rem MONSTER COLUP0=<xx> sets the color of the player 0 sprite. Valid range is 0-254 , randomizes colors 
   2198  f61a
   2199  f61a							; complex statement detected
   2200  f61a		       a9 c0		      LDA	#$C0
   2201  f61c		       48		      PHA
   2202  f61d		       20 b3 f3 	      jsr	randomize
   2203  f620		       29 07		      AND	#7
   2204  f622		       ba		      TSX
   2205  f623		       e8		      INX
   2206  f624		       9a		      TXS
   2207  f625		       18		      CLC
   2208  f626		       75 00		      ADC	$00,x
   2209  f628		       85 07		      STA	COLUP1
   2210  f62a				   .L072		;  COLUPF  =  $A0  +	( rand	&  7 )	 :  rem PLAYFIELD You need to set a color for the playfield
   2211  f62a
   2212  f62a							; complex statement detected
   2213  f62a		       a9 a0		      LDA	#$A0
   2214  f62c		       48		      PHA
   2215  f62d		       20 b3 f3 	      jsr	randomize
   2216  f630		       29 07		      AND	#7
   2217  f632		       ba		      TSX
   2218  f633		       e8		      INX
   2219  f634		       9a		      TXS
   2220  f635		       18		      CLC
   2221  f636		       75 00		      ADC	$00,x
   2222  f638		       85 08		      STA	COLUPF
   2223  f63a				   .L073		;  COLUBK  =  00  :  rem BACKGROUND BALCK Change the background color with COLUBK
   2224  f63a
   2225  f63a		       a9 00		      LDA	#00
   2226  f63c		       85 09		      STA	COLUBK
   2227  f63e				   .L074		;  rem ---------------------------------------------------------------------------------
   2228  f63e
   2229  f63e				   .
   2230  f63e							; 
   2231  f63e
   2232  f63e				   .L075		;  if collision(missile1,player0) then player1x  =   ( rand  &  63 )	+  40  :  player0y  =	( rand	&  31 )   +  30  :  COLUBK  =  $46  +	( rand	&  2 )	 :  j  =  j  -	1  :  rem if missile and monster collide monster changes position
   2233  f63e
   2234  f63e		       24 01		      bit	CXM1P
   2235  f640		       10 26		      BPL	.skipL075
   2236  f642				   .condpart14
   2237  f642							; complex statement detected
   2238  f642		       20 b3 f3 	      jsr	randomize
   2239  f645		       29 3f		      AND	#63
   2240  f647		       18		      CLC
   2241  f648		       69 28		      ADC	#40
   2242  f64a		       85 81		      STA	player1x
   2243  f64c							; complex statement detected
   2244  f64c		       20 b3 f3 	      jsr	randomize
   2245  f64f		       29 1f		      AND	#31
   2246  f651		       18		      CLC
   2247  f652		       69 1e		      ADC	#30
   2248  f654		       85 85		      STA	player0y
   2249  f656							; complex statement detected
   2250  f656		       a9 46		      LDA	#$46
   2251  f658		       48		      PHA
   2252  f659		       20 b3 f3 	      jsr	randomize
   2253  f65c		       29 02		      AND	#2
   2254  f65e		       ba		      TSX
   2255  f65f		       e8		      INX
   2256  f660		       9a		      TXS
   2257  f661		       18		      CLC
   2258  f662		       75 00		      ADC	$00,x
   2259  f664		       85 09		      STA	COLUBK
   2260  f666		       c6 dd		      DEC	j
   2261  f668				   .skipL075
   2262  f668				   .
   2263  f668							; 
   2264  f668
   2265  f668				   .L076		;  if collision(missile0,player1) then player1x  =   ( rand  &  63 )	+  40  :  player1y  =	( rand	&  31 )   +  30  :  missile1y  =   ( rand  &  31 )   +	30  :  COLUBK  =  $46  +   ( rand  &  2 )   :  p  =  p	-  1  :  rem if missile and monster collide monster changes position
   2266  f668
   2267  f668		       24 00		      bit	CXM0P
   2268  f66a		       10 30		      BPL	.skipL076
   2269  f66c				   .condpart15
   2270  f66c							; complex statement detected
   2271  f66c		       20 b3 f3 	      jsr	randomize
   2272  f66f		       29 3f		      AND	#63
   2273  f671		       18		      CLC
   2274  f672		       69 28		      ADC	#40
   2275  f674		       85 81		      STA	player1x
   2276  f676							; complex statement detected
   2277  f676		       20 b3 f3 	      jsr	randomize
   2278  f679		       29 1f		      AND	#31
   2279  f67b		       18		      CLC
   2280  f67c		       69 1e		      ADC	#30
   2281  f67e		       85 86		      STA	player1y
   2282  f680							; complex statement detected
   2283  f680		       20 b3 f3 	      jsr	randomize
   2284  f683		       29 1f		      AND	#31
   2285  f685		       18		      CLC
   2286  f686		       69 1e		      ADC	#30
   2287  f688		       85 88		      STA	missile1y
   2288  f68a							; complex statement detected
   2289  f68a		       a9 46		      LDA	#$46
   2290  f68c		       48		      PHA
   2291  f68d		       20 b3 f3 	      jsr	randomize
   2292  f690		       29 02		      AND	#2
   2293  f692		       ba		      TSX
   2294  f693		       e8		      INX
   2295  f694		       9a		      TXS
   2296  f695		       18		      CLC
   2297  f696		       75 00		      ADC	$00,x
   2298  f698		       85 09		      STA	COLUBK
   2299  f69a		       c6 e3		      DEC	p
   2300  f69c				   .skipL076
   2301  f69c				   .L077		;  if collision(player0,player1) then player1x  =   ( rand  &	63 )   +  40  :  player1y  =   ( rand  &  31 )	 +  30	:  missile1y  =   ( rand  &  31 )   +  30  :  COLUBK  =  $46  +   ( rand  &  2 )   :  j  =  j  -  1  :	rem if player and monster collide monster changes position
   2302  f69c
   2303  f69c		       24 07		      bit	CXPPMM
   2304  f69e		       10 30		      BPL	.skipL077
   2305  f6a0				   .condpart16
   2306  f6a0							; complex statement detected
   2307  f6a0		       20 b3 f3 	      jsr	randomize
   2308  f6a3		       29 3f		      AND	#63
   2309  f6a5		       18		      CLC
   2310  f6a6		       69 28		      ADC	#40
   2311  f6a8		       85 81		      STA	player1x
   2312  f6aa							; complex statement detected
   2313  f6aa		       20 b3 f3 	      jsr	randomize
   2314  f6ad		       29 1f		      AND	#31
   2315  f6af		       18		      CLC
   2316  f6b0		       69 1e		      ADC	#30
   2317  f6b2		       85 86		      STA	player1y
   2318  f6b4							; complex statement detected
   2319  f6b4		       20 b3 f3 	      jsr	randomize
   2320  f6b7		       29 1f		      AND	#31
   2321  f6b9		       18		      CLC
   2322  f6ba		       69 1e		      ADC	#30
   2323  f6bc		       85 88		      STA	missile1y
   2324  f6be							; complex statement detected
   2325  f6be		       a9 46		      LDA	#$46
   2326  f6c0		       48		      PHA
   2327  f6c1		       20 b3 f3 	      jsr	randomize
   2328  f6c4		       29 02		      AND	#2
   2329  f6c6		       ba		      TSX
   2330  f6c7		       e8		      INX
   2331  f6c8		       9a		      TXS
   2332  f6c9		       18		      CLC
   2333  f6ca		       75 00		      ADC	$00,x
   2334  f6cc		       85 09		      STA	COLUBK
   2335  f6ce		       c6 dd		      DEC	j
   2336  f6d0				   .skipL077
   2337  f6d0				   .
   2338  f6d0							; 
   2339  f6d0
   2340  f6d0				   .L078		;  rem ---------------------------------------------------------------------------------
   2341  f6d0
   2342  f6d0				   .L079		;  p0x  =  0  :  rem player movement sprite left & right
   2343  f6d0
   2344  f6d0		       a9 00		      LDA	#0
   2345  f6d2		       85 d9		      STA	p0x
   2346  f6d4				   .L080		;  if joy0left then p0x  =  255
   2347  f6d4
   2348  f6d4		       2c 80 02 	      bit	SWCHA
   2349  f6d7		       70 04		      BVS	.skipL080
   2350  f6d9				   .condpart17
   2351  f6d9		       a9 ff		      LDA	#255
   2352  f6db		       85 d9		      STA	p0x
   2353  f6dd				   .skipL080
   2354  f6dd				   .L081		;  if joy0right then p0x  =  1
   2355  f6dd
   2356  f6dd		       2c 80 02 	      bit	SWCHA
   2357  f6e0		       30 04		      BMI	.skipL081
   2358  f6e2				   .condpart18
   2359  f6e2		       a9 01		      LDA	#1
   2360  f6e4		       85 d9		      STA	p0x
   2361  f6e6				   .skipL081
   2362  f6e6				   .L082		;  player0x  =  player0x  +  p0x
   2363  f6e6
   2364  f6e6		       a5 80		      LDA	player0x
   2365  f6e8		       18		      CLC
   2366  f6e9		       65 d9		      ADC	p0x
   2367  f6eb		       85 80		      STA	player0x
   2368  f6ed				   .
   2369  f6ed							; 
   2370  f6ed
   2371  f6ed				   .L083		;  p0y  =  0  :  rem player movement sprite up & down
   2372  f6ed
   2373  f6ed		       a9 00		      LDA	#0
   2374  f6ef		       85 d7		      STA	p0y
   2375  f6f1				   .L084		;  if joy0up then p0y	=  255
   2376  f6f1
   2377  f6f1		       a9 10		      lda	#$10
   2378  f6f3		       2c 80 02 	      bit	SWCHA
   2379  f6f6		       d0 04		      BNE	.skipL084
   2380  f6f8				   .condpart19
   2381  f6f8		       a9 ff		      LDA	#255
   2382  f6fa		       85 d7		      STA	p0y
   2383  f6fc				   .skipL084
   2384  f6fc				   .L085		;  if joy0down then p0y  =  1
   2385  f6fc
   2386  f6fc		       a9 20		      lda	#$20
   2387  f6fe		       2c 80 02 	      bit	SWCHA
   2388  f701		       d0 04		      BNE	.skipL085
   2389  f703				   .condpart20
   2390  f703		       a9 01		      LDA	#1
   2391  f705		       85 d7		      STA	p0y
   2392  f707				   .skipL085
   2393  f707				   .L086		;  player0y  =  player0y  +  p0y
   2394  f707
   2395  f707		       a5 85		      LDA	player0y
   2396  f709		       18		      CLC
   2397  f70a		       65 d7		      ADC	p0y
   2398  f70c		       85 85		      STA	player0y
   2399  f70e				   .
   2400  f70e							; 
   2401  f70e
   2402  f70e				   .L087		;  rem ---------------------------------------------------------------------------------
   2403  f70e
   2404  f70e				   .L088		;  rem This section sets a value for the last direction the joystick was pushed
   2405  f70e
   2406  f70e				   .L089		;  rem
   2407  f70e
   2408  f70e				   .L090		;  rem  This determines the direction the bullet will be fired later, and also
   2409  f70e
   2410  f70e				   .L091		;  rem  allows you to keep firing the bullet in the same direction after you
   2411  f70e
   2412  f70e				   .L092		;  rem  have stopped moving.
   2413  f70e
   2414  f70e				   .L093		;  rem
   2415  f70e
   2416  f70e				   .L094		;  rem  Each time you move, each of the eight possible directions of the joystick is
   2417  f70e
   2418  f70e				   .L095		;  rem  marked as on or off with a bit variable.
   2419  f70e
   2420  f70e				   .L096		;  rem ---------------------------------------------------------------------------------
   2421  f70e
   2422  f70e				   .
   2423  f70e							; 
   2424  f70e
   2425  f70e				   .L097		;  if joy0up then c{1} = 1 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   2426  f70e
   2427  f70e		       a9 10		      lda	#$10
   2428  f710		       2c 80 02 	      bit	SWCHA
   2429  f713		       d0 30		      BNE	.skipL097
   2430  f715				   .condpart21
   2431  f715		       a5 d6		      LDA	c
   2432  f717		       09 02		      ORA	#2
   2433  f719		       85 d6		      STA	c
   2434  f71b		       a5 d6		      LDA	c
   2435  f71d		       29 fb		      AND	#251
   2436  f71f		       85 d6		      STA	c
   2437  f721		       a5 d6		      LDA	c
   2438  f723		       29 f7		      AND	#247
   2439  f725		       85 d6		      STA	c
   2440  f727		       a5 d6		      LDA	c
   2441  f729		       29 ef		      AND	#239
   2442  f72b		       85 d6		      STA	c
   2443  f72d		       a5 d6		      LDA	c
   2444  f72f		       29 df		      AND	#223
   2445  f731		       85 d6		      STA	c
   2446  f733		       a5 d6		      LDA	c
   2447  f735		       29 bf		      AND	#191
   2448  f737		       85 d6		      STA	c
   2449  f739		       a5 d6		      LDA	c
   2450  f73b		       29 7f		      AND	#127
   2451  f73d		       85 d6		      STA	c
   2452  f73f		       a5 d6		      LDA	c
   2453  f741		       29 fe		      AND	#254
   2454  f743		       85 d6		      STA	c
   2455  f745				   .skipL097
   2456  f745				   .L098		;  if joy0down then c{1} = 0 : c{2} = 1 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   2457  f745
   2458  f745		       a9 20		      lda	#$20
   2459  f747		       2c 80 02 	      bit	SWCHA
   2460  f74a		       d0 30		      BNE	.skipL098
   2461  f74c				   .condpart22
   2462  f74c		       a5 d6		      LDA	c
   2463  f74e		       29 fd		      AND	#253
   2464  f750		       85 d6		      STA	c
   2465  f752		       a5 d6		      LDA	c
   2466  f754		       09 04		      ORA	#4
   2467  f756		       85 d6		      STA	c
   2468  f758		       a5 d6		      LDA	c
   2469  f75a		       29 f7		      AND	#247
   2470  f75c		       85 d6		      STA	c
   2471  f75e		       a5 d6		      LDA	c
   2472  f760		       29 ef		      AND	#239
   2473  f762		       85 d6		      STA	c
   2474  f764		       a5 d6		      LDA	c
   2475  f766		       29 df		      AND	#223
   2476  f768		       85 d6		      STA	c
   2477  f76a		       a5 d6		      LDA	c
   2478  f76c		       29 bf		      AND	#191
   2479  f76e		       85 d6		      STA	c
   2480  f770		       a5 d6		      LDA	c
   2481  f772		       29 7f		      AND	#127
   2482  f774		       85 d6		      STA	c
   2483  f776		       a5 d6		      LDA	c
   2484  f778		       29 fe		      AND	#254
   2485  f77a		       85 d6		      STA	c
   2486  f77c				   .skipL098
   2487  f77c				   .L099		;  if joy0left then c{1} = 0 : c{2} = 0 : c{3} = 1 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   2488  f77c
   2489  f77c		       2c 80 02 	      bit	SWCHA
   2490  f77f		       70 30		      BVS	.skipL099
   2491  f781				   .condpart23
   2492  f781		       a5 d6		      LDA	c
   2493  f783		       29 fd		      AND	#253
   2494  f785		       85 d6		      STA	c
   2495  f787		       a5 d6		      LDA	c
   2496  f789		       29 fb		      AND	#251
   2497  f78b		       85 d6		      STA	c
   2498  f78d		       a5 d6		      LDA	c
   2499  f78f		       09 08		      ORA	#8
   2500  f791		       85 d6		      STA	c
   2501  f793		       a5 d6		      LDA	c
   2502  f795		       29 ef		      AND	#239
   2503  f797		       85 d6		      STA	c
   2504  f799		       a5 d6		      LDA	c
   2505  f79b		       29 df		      AND	#223
   2506  f79d		       85 d6		      STA	c
   2507  f79f		       a5 d6		      LDA	c
   2508  f7a1		       29 bf		      AND	#191
   2509  f7a3		       85 d6		      STA	c
   2510  f7a5		       a5 d6		      LDA	c
   2511  f7a7		       29 7f		      AND	#127
   2512  f7a9		       85 d6		      STA	c
   2513  f7ab		       a5 d6		      LDA	c
   2514  f7ad		       29 fe		      AND	#254
   2515  f7af		       85 d6		      STA	c
   2516  f7b1				   .skipL099
   2517  f7b1				   .L0100		;  if joy0right then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 1 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   2518  f7b1
   2519  f7b1		       2c 80 02 	      bit	SWCHA
   2520  f7b4		       30 30		      BMI	.skipL0100
   2521  f7b6				   .condpart24
   2522  f7b6		       a5 d6		      LDA	c
   2523  f7b8		       29 fd		      AND	#253
   2524  f7ba		       85 d6		      STA	c
   2525  f7bc		       a5 d6		      LDA	c
   2526  f7be		       29 fb		      AND	#251
   2527  f7c0		       85 d6		      STA	c
   2528  f7c2		       a5 d6		      LDA	c
   2529  f7c4		       29 f7		      AND	#247
   2530  f7c6		       85 d6		      STA	c
   2531  f7c8		       a5 d6		      LDA	c
   2532  f7ca		       09 10		      ORA	#16
   2533  f7cc		       85 d6		      STA	c
   2534  f7ce		       a5 d6		      LDA	c
   2535  f7d0		       29 df		      AND	#223
   2536  f7d2		       85 d6		      STA	c
   2537  f7d4		       a5 d6		      LDA	c
   2538  f7d6		       29 bf		      AND	#191
   2539  f7d8		       85 d6		      STA	c
   2540  f7da		       a5 d6		      LDA	c
   2541  f7dc		       29 7f		      AND	#127
   2542  f7de		       85 d6		      STA	c
   2543  f7e0		       a5 d6		      LDA	c
   2544  f7e2		       29 fe		      AND	#254
   2545  f7e4		       85 d6		      STA	c
   2546  f7e6				   .skipL0100
   2547  f7e6				   .L0101		;  if joy0up  &&  joy0left then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 1 : c{6} = 0 : c{7} = 0 : c{0} = 0
   2548  f7e6
   2549  f7e6		       a9 10		      lda	#$10
   2550  f7e8		       2c 80 02 	      bit	SWCHA
   2551  f7eb		       d0 35		      BNE	.skipL0101
   2552  f7ed				   .condpart25
   2553  f7ed		       2c 80 02 	      bit	SWCHA
   2554  f7f0		       70 30		      BVS	.skip25then
   2555  f7f2				   .condpart26
   2556  f7f2		       a5 d6		      LDA	c
   2557  f7f4		       29 fd		      AND	#253
   2558  f7f6		       85 d6		      STA	c
   2559  f7f8		       a5 d6		      LDA	c
   2560  f7fa		       29 fb		      AND	#251
   2561  f7fc		       85 d6		      STA	c
   2562  f7fe		       a5 d6		      LDA	c
   2563  f800		       29 f7		      AND	#247
   2564  f802		       85 d6		      STA	c
   2565  f804		       a5 d6		      LDA	c
   2566  f806		       29 ef		      AND	#239
   2567  f808		       85 d6		      STA	c
   2568  f80a		       a5 d6		      LDA	c
   2569  f80c		       09 20		      ORA	#32
   2570  f80e		       85 d6		      STA	c
   2571  f810		       a5 d6		      LDA	c
   2572  f812		       29 bf		      AND	#191
   2573  f814		       85 d6		      STA	c
   2574  f816		       a5 d6		      LDA	c
   2575  f818		       29 7f		      AND	#127
   2576  f81a		       85 d6		      STA	c
   2577  f81c		       a5 d6		      LDA	c
   2578  f81e		       29 fe		      AND	#254
   2579  f820		       85 d6		      STA	c
   2580  f822				   .skip25then
   2581  f822				   .skipL0101
   2582  f822				   .L0102		;  if joy0up  &&  joy0right then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 1 : c{7} = 0 : c{0} = 0
   2583  f822
   2584  f822		       a9 10		      lda	#$10
   2585  f824		       2c 80 02 	      bit	SWCHA
   2586  f827		       d0 35		      BNE	.skipL0102
   2587  f829				   .condpart27
   2588  f829		       2c 80 02 	      bit	SWCHA
   2589  f82c		       30 30		      BMI	.skip27then
   2590  f82e				   .condpart28
   2591  f82e		       a5 d6		      LDA	c
   2592  f830		       29 fd		      AND	#253
   2593  f832		       85 d6		      STA	c
   2594  f834		       a5 d6		      LDA	c
   2595  f836		       29 fb		      AND	#251
   2596  f838		       85 d6		      STA	c
   2597  f83a		       a5 d6		      LDA	c
   2598  f83c		       29 f7		      AND	#247
   2599  f83e		       85 d6		      STA	c
   2600  f840		       a5 d6		      LDA	c
   2601  f842		       29 ef		      AND	#239
   2602  f844		       85 d6		      STA	c
   2603  f846		       a5 d6		      LDA	c
   2604  f848		       29 df		      AND	#223
   2605  f84a		       85 d6		      STA	c
   2606  f84c		       a5 d6		      LDA	c
   2607  f84e		       09 40		      ORA	#64
   2608  f850		       85 d6		      STA	c
   2609  f852		       a5 d6		      LDA	c
   2610  f854		       29 7f		      AND	#127
   2611  f856		       85 d6		      STA	c
   2612  f858		       a5 d6		      LDA	c
   2613  f85a		       29 fe		      AND	#254
   2614  f85c		       85 d6		      STA	c
   2615  f85e				   .skip27then
   2616  f85e				   .skipL0102
   2617  f85e				   .L0103		;  if joy0down  &&  joy0left then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 1 : c{0} = 0
   2618  f85e
   2619  f85e		       a9 20		      lda	#$20
   2620  f860		       2c 80 02 	      bit	SWCHA
   2621  f863		       d0 35		      BNE	.skipL0103
   2622  f865				   .condpart29
   2623  f865		       2c 80 02 	      bit	SWCHA
   2624  f868		       70 30		      BVS	.skip29then
   2625  f86a				   .condpart30
   2626  f86a		       a5 d6		      LDA	c
   2627  f86c		       29 fd		      AND	#253
   2628  f86e		       85 d6		      STA	c
   2629  f870		       a5 d6		      LDA	c
   2630  f872		       29 fb		      AND	#251
   2631  f874		       85 d6		      STA	c
   2632  f876		       a5 d6		      LDA	c
   2633  f878		       29 f7		      AND	#247
   2634  f87a		       85 d6		      STA	c
   2635  f87c		       a5 d6		      LDA	c
   2636  f87e		       29 ef		      AND	#239
   2637  f880		       85 d6		      STA	c
   2638  f882		       a5 d6		      LDA	c
   2639  f884		       29 df		      AND	#223
   2640  f886		       85 d6		      STA	c
   2641  f888		       a5 d6		      LDA	c
   2642  f88a		       29 bf		      AND	#191
   2643  f88c		       85 d6		      STA	c
   2644  f88e		       a5 d6		      LDA	c
   2645  f890		       09 80		      ORA	#128
   2646  f892		       85 d6		      STA	c
   2647  f894		       a5 d6		      LDA	c
   2648  f896		       29 fe		      AND	#254
   2649  f898		       85 d6		      STA	c
   2650  f89a				   .skip29then
   2651  f89a				   .skipL0103
   2652  f89a				   .L0104		;  if joy0down  &&  joy0right then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 1
   2653  f89a
   2654  f89a		       a9 20		      lda	#$20
   2655  f89c		       2c 80 02 	      bit	SWCHA
   2656  f89f		       d0 35		      BNE	.skipL0104
   2657  f8a1				   .condpart31
   2658  f8a1		       2c 80 02 	      bit	SWCHA
   2659  f8a4		       30 30		      BMI	.skip31then
   2660  f8a6				   .condpart32
   2661  f8a6		       a5 d6		      LDA	c
   2662  f8a8		       29 fd		      AND	#253
   2663  f8aa		       85 d6		      STA	c
   2664  f8ac		       a5 d6		      LDA	c
   2665  f8ae		       29 fb		      AND	#251
   2666  f8b0		       85 d6		      STA	c
   2667  f8b2		       a5 d6		      LDA	c
   2668  f8b4		       29 f7		      AND	#247
   2669  f8b6		       85 d6		      STA	c
   2670  f8b8		       a5 d6		      LDA	c
   2671  f8ba		       29 ef		      AND	#239
   2672  f8bc		       85 d6		      STA	c
   2673  f8be		       a5 d6		      LDA	c
   2674  f8c0		       29 df		      AND	#223
   2675  f8c2		       85 d6		      STA	c
   2676  f8c4		       a5 d6		      LDA	c
   2677  f8c6		       29 bf		      AND	#191
   2678  f8c8		       85 d6		      STA	c
   2679  f8ca		       a5 d6		      LDA	c
   2680  f8cc		       29 7f		      AND	#127
   2681  f8ce		       85 d6		      STA	c
   2682  f8d0		       a5 d6		      LDA	c
   2683  f8d2		       09 01		      ORA	#1
   2684  f8d4		       85 d6		      STA	c
   2685  f8d6				   .skip31then
   2686  f8d6				   .skipL0104
   2687  f8d6				   .
   2688  f8d6							; 
   2689  f8d6
   2690  f8d6				   .L0105		;  rem ------------------------------------------------------------------
   2691  f8d6
   2692  f8d6				   .L0106		;  rem  Increase 20 to a larger number to make the bullets travel farther
   2693  f8d6
   2694  f8d6				   .L0107		;  rem ------------------------------------------------------------------
   2695  f8d6
   2696  f8d6				   .L0108		;  e = e + 1
   2697  f8d6
   2698  f8d6		       e6 d8		      INC	e
   2699  f8d8				   .L0109		;  if e > 50 then e = 0
   2700  f8d8
   2701  f8d8		       a9 32		      LDA	#50
   2702  f8da		       c5 d8		      CMP	e
   2703  f8dc		       b0 04		      BCS	.skipL0109
   2704  f8de				   .condpart33
   2705  f8de		       a9 00		      LDA	#0
   2706  f8e0		       85 d8		      STA	e
   2707  f8e2				   .skipL0109
   2708  f8e2				   .L0110		;  rem ------------------------------------------------------------------
   2709  f8e2
   2710  f8e2				   .L0111		;  rem  if you let go of the fire button, the missile shot is turned off,
   2711  f8e2
   2712  f8e2				   .L0112		;  rem  and the gunshot travel length variable (e) is reset to 0.
   2713  f8e2
   2714  f8e2				   .L0113		;  rem ------------------------------------------------------------------
   2715  f8e2
   2716  f8e2				   .L0114		;  if !joy0fire then missile0x = 0 : missile0y = 0 : e = 0
   2717  f8e2
   2718  f8e2		       24 0c		      bit	INPT4
   2719  f8e4		       10 08		      BPL	.skipL0114
   2720  f8e6				   .condpart34
   2721  f8e6		       a9 00		      LDA	#0
   2722  f8e8		       85 82		      STA	missile0x
   2723  f8ea		       85 91		      STA	missile0y
   2724  f8ec		       85 d8		      STA	e
   2725  f8ee				   .skipL0114
   2726  f8ee				   .
   2727  f8ee							; 
   2728  f8ee
   2729  f8ee				   .L0115		;  rem ------------------------------------------------------------------
   2730  f8ee
   2731  f8ee				   .L0116		;  rem  Fire the Missile
   2732  f8ee
   2733  f8ee				   .L0117		;  rem    This code is what actually fires the missile.
   2734  f8ee
   2735  f8ee				   .L0118		;  rem  
   2736  f8ee
   2737  f8ee				   .L0119		;  rem  It checks for a combination of pressing the fire button and
   2738  f8ee
   2739  f8ee				   .L0120		;  rem    the direction the joystick was most recently moved in to
   2740  f8ee
   2741  f8ee				   .L0121		;  rem    determine which direction to fire the missile.
   2742  f8ee
   2743  f8ee				   .L0122		;  rem
   2744  f8ee
   2745  f8ee				   .L0123		;  rem  the E variable determines the length of the shot
   2746  f8ee
   2747  f8ee				   .L0124		;  rem ------------------------------------------------------------------
   2748  f8ee
   2749  f8ee				   .
   2750  f8ee							; 
   2751  f8ee
   2752  f8ee				   .L0125		;  rem diagonal shots
   2753  f8ee
   2754  f8ee				   .L0126		;  if joy0fire  &&  c{0} then missile0x = player0x + 7 + e : missile0y = player0y - 3 + e
   2755  f8ee
   2756  f8ee		       24 0c		      bit	INPT4
   2757  f8f0		       30 19		      BMI	.skipL0126
   2758  f8f2				   .condpart35
   2759  f8f2		       a5 d6		      LDA	c
   2760  f8f4		       4a		      LSR
   2761  f8f5		       90 14		      BCC	.skip35then
   2762  f8f7				   .condpart36
   2763  f8f7							; complex statement detected
   2764  f8f7		       a5 80		      LDA	player0x
   2765  f8f9		       18		      CLC
   2766  f8fa		       69 07		      ADC	#7
   2767  f8fc		       18		      CLC
   2768  f8fd		       65 d8		      ADC	e
   2769  f8ff		       85 82		      STA	missile0x
   2770  f901							; complex statement detected
   2771  f901		       a5 85		      LDA	player0y
   2772  f903		       38		      SEC
   2773  f904		       e9 03		      SBC	#3
   2774  f906		       18		      CLC
   2775  f907		       65 d8		      ADC	e
   2776  f909		       85 91		      STA	missile0y
   2777  f90b				   .skip35then
   2778  f90b				   .skipL0126
   2779  f90b				   .L0127		;  if joy0fire  &&  c{5} then missile0x = player0x - e : missile0y = player0y - 7 - e
   2780  f90b
   2781  f90b		       24 0c		      bit	INPT4
   2782  f90d		       30 17		      BMI	.skipL0127
   2783  f90f				   .condpart37
   2784  f90f		       a5 d6		      LDA	c
   2785  f911		       29 20		      AND	#32
   2786  f913		       f0 11		      BEQ	.skip37then
   2787  f915				   .condpart38
   2788  f915		       a5 80		      LDA	player0x
   2789  f917		       38		      SEC
   2790  f918		       e5 d8		      SBC	e
   2791  f91a		       85 82		      STA	missile0x
   2792  f91c							; complex statement detected
   2793  f91c		       a5 85		      LDA	player0y
   2794  f91e		       38		      SEC
   2795  f91f		       e9 07		      SBC	#7
   2796  f921		       38		      SEC
   2797  f922		       e5 d8		      SBC	e
   2798  f924		       85 91		      STA	missile0y
   2799  f926				   .skip37then
   2800  f926				   .skipL0127
   2801  f926				   .L0128		;  if joy0fire  &&  c{7} then missile0x = player0x - e : missile0y = player0y + 1 + e
   2802  f926
   2803  f926		       24 0c		      bit	INPT4
   2804  f928		       30 15		      BMI	.skipL0128
   2805  f92a				   .condpart39
   2806  f92a		       24 d6		      BIT	c
   2807  f92c		       10 11		      BPL	.skip39then
   2808  f92e				   .condpart40
   2809  f92e		       a5 80		      LDA	player0x
   2810  f930		       38		      SEC
   2811  f931		       e5 d8		      SBC	e
   2812  f933		       85 82		      STA	missile0x
   2813  f935							; complex statement detected
   2814  f935		       a5 85		      LDA	player0y
   2815  f937		       18		      CLC
   2816  f938		       69 01		      ADC	#1
   2817  f93a		       18		      CLC
   2818  f93b		       65 d8		      ADC	e
   2819  f93d		       85 91		      STA	missile0y
   2820  f93f				   .skip39then
   2821  f93f				   .skipL0128
   2822  f93f				   .L0129		;  if joy0fire  &&  c{6} then missile0x = player0x + 7 + e : missile0y = player0y - 7 - e
   2823  f93f
   2824  f93f		       24 0c		      bit	INPT4
   2825  f941		       30 18		      BMI	.skipL0129
   2826  f943				   .condpart41
   2827  f943		       24 d6		      BIT	c
   2828  f945		       50 14		      BVC	.skip41then
   2829  f947				   .condpart42
   2830  f947							; complex statement detected
   2831  f947		       a5 80		      LDA	player0x
   2832  f949		       18		      CLC
   2833  f94a		       69 07		      ADC	#7
   2834  f94c		       18		      CLC
   2835  f94d		       65 d8		      ADC	e
   2836  f94f		       85 82		      STA	missile0x
   2837  f951							; complex statement detected
   2838  f951		       a5 85		      LDA	player0y
   2839  f953		       38		      SEC
   2840  f954		       e9 07		      SBC	#7
   2841  f956		       38		      SEC
   2842  f957		       e5 d8		      SBC	e
   2843  f959		       85 91		      STA	missile0y
   2844  f95b				   .skip41then
   2845  f95b				   .skipL0129
   2846  f95b				   .
   2847  f95b							; 
   2848  f95b
   2849  f95b				   .L0130		;  rem left and right shots
   2850  f95b
   2851  f95b				   .L0131		;  if joy0fire  &&  c{3} then missile0x = player0x - e : missile0y = player0y - 5
   2852  f95b
   2853  f95b		       24 0c		      bit	INPT4
   2854  f95d		       30 14		      BMI	.skipL0131
   2855  f95f				   .condpart43
   2856  f95f		       a5 d6		      LDA	c
   2857  f961		       29 08		      AND	#8
   2858  f963		       f0 0e		      BEQ	.skip43then
   2859  f965				   .condpart44
   2860  f965		       a5 80		      LDA	player0x
   2861  f967		       38		      SEC
   2862  f968		       e5 d8		      SBC	e
   2863  f96a		       85 82		      STA	missile0x
   2864  f96c		       a5 85		      LDA	player0y
   2865  f96e		       38		      SEC
   2866  f96f		       e9 05		      SBC	#5
   2867  f971		       85 91		      STA	missile0y
   2868  f973				   .skip43then
   2869  f973				   .skipL0131
   2870  f973				   .L0132		;  if joy0fire  &&  c{4} then missile0x = player0x + 8 + e : missile0y = player0y - 5
   2871  f973
   2872  f973		       24 0c		      bit	INPT4
   2873  f975		       30 17		      BMI	.skipL0132
   2874  f977				   .condpart45
   2875  f977		       a5 d6		      LDA	c
   2876  f979		       29 10		      AND	#16
   2877  f97b		       f0 11		      BEQ	.skip45then
   2878  f97d				   .condpart46
   2879  f97d							; complex statement detected
   2880  f97d		       a5 80		      LDA	player0x
   2881  f97f		       18		      CLC
   2882  f980		       69 08		      ADC	#8
   2883  f982		       18		      CLC
   2884  f983		       65 d8		      ADC	e
   2885  f985		       85 82		      STA	missile0x
   2886  f987		       a5 85		      LDA	player0y
   2887  f989		       38		      SEC
   2888  f98a		       e9 05		      SBC	#5
   2889  f98c		       85 91		      STA	missile0y
   2890  f98e				   .skip45then
   2891  f98e				   .skipL0132
   2892  f98e				   .
   2893  f98e							; 
   2894  f98e
   2895  f98e				   .L0133		;  rem up and down shots
   2896  f98e
   2897  f98e				   .L0134		;  if joy0fire  &&  c{1} then missile0x = player0x + 5 : missile0y = player0y - 10 - e
   2898  f98e
   2899  f98e		       24 0c		      bit	INPT4
   2900  f990		       30 17		      BMI	.skipL0134
   2901  f992				   .condpart47
   2902  f992		       a5 d6		      LDA	c
   2903  f994		       29 02		      AND	#2
   2904  f996		       f0 11		      BEQ	.skip47then
   2905  f998				   .condpart48
   2906  f998		       a5 80		      LDA	player0x
   2907  f99a		       18		      CLC
   2908  f99b		       69 05		      ADC	#5
   2909  f99d		       85 82		      STA	missile0x
   2910  f99f							; complex statement detected
   2911  f99f		       a5 85		      LDA	player0y
   2912  f9a1		       38		      SEC
   2913  f9a2		       e9 0a		      SBC	#10
   2914  f9a4		       38		      SEC
   2915  f9a5		       e5 d8		      SBC	e
   2916  f9a7		       85 91		      STA	missile0y
   2917  f9a9				   .skip47then
   2918  f9a9				   .skipL0134
   2919  f9a9				   .L0135		;  if joy0fire  &&  c{2} then missile0x = player0x + 5 : missile0y = player0y + 3 + e
   2920  f9a9
   2921  f9a9		       24 0c		      bit	INPT4
   2922  f9ab		       30 17		      BMI	.skipL0135
   2923  f9ad				   .condpart49
   2924  f9ad		       a5 d6		      LDA	c
   2925  f9af		       29 04		      AND	#4
   2926  f9b1		       f0 11		      BEQ	.skip49then
   2927  f9b3				   .condpart50
   2928  f9b3		       a5 80		      LDA	player0x
   2929  f9b5		       18		      CLC
   2930  f9b6		       69 05		      ADC	#5
   2931  f9b8		       85 82		      STA	missile0x
   2932  f9ba							; complex statement detected
   2933  f9ba		       a5 85		      LDA	player0y
   2934  f9bc		       18		      CLC
   2935  f9bd		       69 03		      ADC	#3
   2936  f9bf		       18		      CLC
   2937  f9c0		       65 d8		      ADC	e
   2938  f9c2		       85 91		      STA	missile0y
   2939  f9c4				   .skip49then
   2940  f9c4				   .skipL0135
   2941  f9c4				   .
   2942  f9c4							; 
   2943  f9c4
   2944  f9c4				   .L0136		;  rem ------------------------------------------------------------------
   2945  f9c4
   2946  f9c4				   .L0137		;  rem This stops the animation and shows a still sprite when you're 
   2947  f9c4
   2948  f9c4				   .L0138		;  rem not moving.
   2949  f9c4
   2950  f9c4				   .L0139		;  rem ------------------------------------------------------------------
   2951  f9c4
   2952  f9c4				   .L0140		;  if !joy0up	&&  !joy0down  &&  !joy0left  &&  !joy0right then y = 30
   2953  f9c4
   2954  f9c4		       a9 10		      lda	#$10
   2955  f9c6		       2c 80 02 	      bit	SWCHA
   2956  f9c9		       f0 15		      BEQ	.skipL0140
   2957  f9cb				   .condpart51
   2958  f9cb		       a9 20		      lda	#$20
   2959  f9cd		       2c 80 02 	      bit	SWCHA
   2960  f9d0		       f0 0e		      BEQ	.skip51then
   2961  f9d2				   .condpart52
   2962  f9d2		       2c 80 02 	      bit	SWCHA
   2963  f9d5		       50 09		      BVC	.skip52then
   2964  f9d7				   .condpart53
   2965  f9d7		       2c 80 02 	      bit	SWCHA
   2966  f9da		       10 04		      BPL	.skip53then
   2967  f9dc				   .condpart54
   2968  f9dc		       a9 1e		      LDA	#30
   2969  f9de		       85 ec		      STA	y
   2970  f9e0				   .skip53then
   2971  f9e0				   .skip52then
   2972  f9e0				   .skip51then
   2973  f9e0				   .skipL0140
   2974  f9e0				   .
   2975  f9e0							; 
   2976  f9e0
   2977  f9e0				   .L0141		;  rem ------------------------------------------------------------------
   2978  f9e0
   2979  f9e0				   .L0142		;  rem monster movement logic
   2980  f9e0
   2981  f9e0				   .L0143		;  z  =  z  +	1  :  rem Counter for movement timing
   2982  f9e0
   2983  f9e0		       e6 ed		      INC	z
   2984  f9e2				   .
   2985  f9e2							; 
   2986  f9e2
   2987  f9e2				   .L0144		;  if z  >  40 then player1x  =  player1x  +  p1x
   2988  f9e2
   2989  f9e2		       a9 28		      LDA	#40
   2990  f9e4		       c5 ed		      CMP	z
   2991  f9e6		       b0 07		      BCS	.skipL0144
   2992  f9e8				   .condpart55
   2993  f9e8		       a5 81		      LDA	player1x
   2994  f9ea		       18		      CLC
   2995  f9eb		       65 db		      ADC	p1x
   2996  f9ed		       85 81		      STA	player1x
   2997  f9ef				   .skipL0144
   2998  f9ef				   .L0145		;  if z  >  80 then player1y  =  player1y  +  p1y  :  z  =  0	:  rem Reset movement counter
   2999  f9ef
   3000  f9ef		       a9 50		      LDA	#80
   3001  f9f1		       c5 ed		      CMP	z
   3002  f9f3		       b0 0b		      BCS	.skipL0145
   3003  f9f5				   .condpart56
   3004  f9f5		       a5 86		      LDA	player1y
   3005  f9f7		       18		      CLC
   3006  f9f8		       65 da		      ADC	p1y
   3007  f9fa		       85 86		      STA	player1y
   3008  f9fc		       a9 00		      LDA	#0
   3009  f9fe		       85 ed		      STA	z
   3010  fa00				   .skipL0145
   3011  fa00				   .
   3012  fa00							; 
   3013  fa00
   3014  fa00				   .L0146		;  rem If Player 1 collides with the playfield, move back and reverse direction
   3015  fa00
   3016  fa00				   .L0147		;  if collision(player1,playfield) then player1x  =  player1x	-  p1x	:  player1y  =	player1y  -  p1y  :  p1x  =   - p1x  :	p1y  =	 - p1y
   3017  fa00
   3018  fa00		       24 03		      bit	CXP1FB
   3019  fa02		       10 1c		      BPL	.skipL0147
   3020  fa04				   .condpart57
   3021  fa04		       a5 81		      LDA	player1x
   3022  fa06		       38		      SEC
   3023  fa07		       e5 db		      SBC	p1x
   3024  fa09		       85 81		      STA	player1x
   3025  fa0b		       a5 86		      LDA	player1y
   3026  fa0d		       38		      SEC
   3027  fa0e		       e5 da		      SBC	p1y
   3028  fa10		       85 86		      STA	player1y
   3029  fa12		       a9 00		      LDA	#0
   3030  fa14		       38		      SEC
   3031  fa15		       e5 db		      SBC	p1x
   3032  fa17		       85 db		      STA	p1x
   3033  fa19		       a9 00		      LDA	#0
   3034  fa1b		       38		      SEC
   3035  fa1c		       e5 da		      SBC	p1y
   3036  fa1e		       85 da		      STA	p1y
   3037  fa20				   .skipL0147
   3038  fa20				   .
   3039  fa20							; 
   3040  fa20
   3041  fa20				   .L0148		;  rem Keep Player 1 inside the screen boundaries
   3042  fa20
   3043  fa20				   .L0149		;  if player1x  >  120 then player1x  =  120  :  p1x  =   - 1
   3044  fa20
   3045  fa20		       a9 78		      LDA	#120
   3046  fa22		       c5 81		      CMP	player1x
   3047  fa24		       b0 08		      BCS	.skipL0149
   3048  fa26				   .condpart58
   3049  fa26		       a9 78		      LDA	#120
   3050  fa28		       85 81		      STA	player1x
   3051  fa2a		       a9 ff		      LDA	#255
   3052  fa2c		       85 db		      STA	p1x
   3053  fa2e				   .skipL0149
   3054  fa2e				   .L0150		;  if player1x  <  10 then player1x  =  10  :	p1x  =	1
   3055  fa2e
   3056  fa2e		       a5 81		      LDA	player1x
   3057  fa30		       c9 0a		      CMP	#10
   3058  fa32		       b0 08		      BCS	.skipL0150
   3059  fa34				   .condpart59
   3060  fa34		       a9 0a		      LDA	#10
   3061  fa36		       85 81		      STA	player1x
   3062  fa38		       a9 01		      LDA	#1
   3063  fa3a		       85 db		      STA	p1x
   3064  fa3c				   .skipL0150
   3065  fa3c				   .L0151		;  if player1y  >  80 then player1y  =  80  :	p1y  =	 - 1
   3066  fa3c
   3067  fa3c		       a9 50		      LDA	#80
   3068  fa3e		       c5 86		      CMP	player1y
   3069  fa40		       b0 08		      BCS	.skipL0151
   3070  fa42				   .condpart60
   3071  fa42		       a9 50		      LDA	#80
   3072  fa44		       85 86		      STA	player1y
   3073  fa46		       a9 ff		      LDA	#255
   3074  fa48		       85 da		      STA	p1y
   3075  fa4a				   .skipL0151
   3076  fa4a				   .L0152		;  if player1y  <  10 then player1y  =  10  :	p1y  =	1
   3077  fa4a
   3078  fa4a		       a5 86		      LDA	player1y
   3079  fa4c		       c9 0a		      CMP	#10
   3080  fa4e		       b0 08		      BCS	.skipL0152
   3081  fa50				   .condpart61
   3082  fa50		       a9 0a		      LDA	#10
   3083  fa52		       85 86		      STA	player1y
   3084  fa54		       a9 01		      LDA	#1
   3085  fa56		       85 da		      STA	p1y
   3086  fa58				   .skipL0152
   3087  fa58				   .
   3088  fa58							; 
   3089  fa58
   3090  fa58				   .L0153		;  rem ------------------------------------------------------------------
   3091  fa58
   3092  fa58				   .L0154		;  rem monster missile logic
   3093  fa58
   3094  fa58				   .L0155		;  if	( rand	&  3 )	 =  0  &&  missile1x  =  0 then missile1x  =  player1x	:  missile1y  =  player1y
   3095  fa58
   3096  fa58							; complex condition detected
   3097  fa58							; complex statement detected
   3098  fa58		       20 b3 f3 	      jsr	randomize
   3099  fa5b		       29 03		      AND	#3
   3100  fa5d							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3101  fa5d		       c9 00		      CMP	#0
   3102  fa5f		       d0 0e		      BNE	.skipL0155
   3103  fa61				   .condpart62
   3104  fa61		       a5 83		      LDA	missile1x
   3105  fa63		       c9 00		      CMP	#0
   3106  fa65		       d0 08		      BNE	.skip62then
   3107  fa67				   .condpart63
   3108  fa67		       a5 81		      LDA	player1x
   3109  fa69		       85 83		      STA	missile1x
   3110  fa6b		       a5 86		      LDA	player1y
   3111  fa6d		       85 88		      STA	missile1y
   3112  fa6f				   .skip62then
   3113  fa6f				   .skipL0155
   3114  fa6f				   .L0156		;  if missile1x  >  0 then missile1x  =  missile1x  +	 ( rand  &  3 )   -  1	:  missile1y  =  missile1y  +	( rand	&  3 )	 -  1
   3115  fa6f
   3116  fa6f		       a9 00		      LDA	#0
   3117  fa71		       c5 83		      CMP	missile1x
   3118  fa73		       b0 26		      BCS	.skipL0156
   3119  fa75				   .condpart64
   3120  fa75							; complex statement detected
   3121  fa75		       a5 83		      LDA	missile1x
   3122  fa77		       48		      PHA
   3123  fa78		       20 b3 f3 	      jsr	randomize
   3124  fa7b		       29 03		      AND	#3
   3125  fa7d		       ba		      TSX
   3126  fa7e		       e8		      INX
   3127  fa7f		       9a		      TXS
   3128  fa80		       18		      CLC
   3129  fa81		       75 00		      ADC	$00,x
   3130  fa83		       38		      SEC
   3131  fa84		       e9 01		      SBC	#1
   3132  fa86		       85 83		      STA	missile1x
   3133  fa88							; complex statement detected
   3134  fa88		       a5 88		      LDA	missile1y
   3135  fa8a		       48		      PHA
   3136  fa8b		       20 b3 f3 	      jsr	randomize
   3137  fa8e		       29 03		      AND	#3
   3138  fa90		       ba		      TSX
   3139  fa91		       e8		      INX
   3140  fa92		       9a		      TXS
   3141  fa93		       18		      CLC
   3142  fa94		       75 00		      ADC	$00,x
   3143  fa96		       38		      SEC
   3144  fa97		       e9 01		      SBC	#1
   3145  fa99		       85 88		      STA	missile1y
   3146  fa9b				   .skipL0156
   3147  fa9b				   .L0157		;  if missile1x  >  120 then missile1x  =  120  :  missile1x  =  missile1x  -	1
   3148  fa9b
   3149  fa9b		       a9 78		      LDA	#120
   3150  fa9d		       c5 83		      CMP	missile1x
   3151  fa9f		       b0 06		      BCS	.skipL0157
   3152  faa1				   .condpart65
   3153  faa1		       a9 78		      LDA	#120
   3154  faa3		       85 83		      STA	missile1x
   3155  faa5		       c6 83		      DEC	missile1x
   3156  faa7				   .skipL0157
   3157  faa7				   .L0158		;  if missile1x  <  10 then missile1x	=  10  :  missile1x  =	missile1x  +  1
   3158  faa7
   3159  faa7		       a5 83		      LDA	missile1x
   3160  faa9		       c9 0a		      CMP	#10
   3161  faab		       b0 06		      BCS	.skipL0158
   3162  faad				   .condpart66
   3163  faad		       a9 0a		      LDA	#10
   3164  faaf		       85 83		      STA	missile1x
   3165  fab1		       e6 83		      INC	missile1x
   3166  fab3				   .skipL0158
   3167  fab3				   .L0159		;  if missile1y  >  80 then missile1y	=  180	:  missile1y  =  missile1y  -  1
   3168  fab3
   3169  fab3		       a9 50		      LDA	#80
   3170  fab5		       c5 88		      CMP	missile1y
   3171  fab7		       b0 06		      BCS	.skipL0159
   3172  fab9				   .condpart67
   3173  fab9		       a9 b4		      LDA	#180
   3174  fabb		       85 88		      STA	missile1y
   3175  fabd		       c6 88		      DEC	missile1y
   3176  fabf				   .skipL0159
   3177  fabf				   .L0160		;  if missile1y  <  10 then missile1y	=  0  :  missile1y  =  missile1y  +  1
   3178  fabf
   3179  fabf		       a5 88		      LDA	missile1y
   3180  fac1		       c9 0a		      CMP	#10
   3181  fac3		       b0 06		      BCS	.skipL0160
   3182  fac5				   .condpart68
   3183  fac5		       a9 00		      LDA	#0
   3184  fac7		       85 88		      STA	missile1y
   3185  fac9		       e6 88		      INC	missile1y
   3186  facb				   .skipL0160
   3187  facb				   .L0161		;  if collision(missile1,playfield) then missile1x  =	missile1x  -   ( rand  &  3 )	+  1  :  missile1y  =  missile1y  -   ( rand  &  3 )   +  1
   3188  facb
   3189  facb		       24 05		      bit	CXM1FB
   3190  facd		       10 2a		      BPL	.skipL0161
   3191  facf				   .condpart69
   3192  facf							; complex statement detected
   3193  facf		       a5 83		      LDA	missile1x
   3194  fad1		       48		      PHA
   3195  fad2		       20 b3 f3 	      jsr	randomize
   3196  fad5		       29 03		      AND	#3
   3197  fad7		       a8		      TAY
   3198  fad8		       68		      PLA
   3199  fad9		       ba		      TSX
   3200  fada		       94 00		      STY	$00,x
   3201  fadc		       38		      SEC
   3202  fadd		       f5 00		      SBC	$00,x
   3203  fadf		       18		      CLC
   3204  fae0		       69 01		      ADC	#1
   3205  fae2		       85 83		      STA	missile1x
   3206  fae4							; complex statement detected
   3207  fae4		       a5 88		      LDA	missile1y
   3208  fae6		       48		      PHA
   3209  fae7		       20 b3 f3 	      jsr	randomize
   3210  faea		       29 03		      AND	#3
   3211  faec		       a8		      TAY
   3212  faed		       68		      PLA
   3213  faee		       ba		      TSX
   3214  faef		       94 00		      STY	$00,x
   3215  faf1		       38		      SEC
   3216  faf2		       f5 00		      SBC	$00,x
   3217  faf4		       18		      CLC
   3218  faf5		       69 01		      ADC	#1
   3219  faf7		       85 88		      STA	missile1y
   3220  faf9				   .skipL0161
   3221  faf9				   .L0162		;  if missile1x  =  player1x  &&  missile1y  =  player1y then missile1x  =  0	:  missile1y  =  0
   3222  faf9
   3223  faf9		       a5 83		      LDA	missile1x
   3224  fafb		       c5 81		      CMP	player1x
   3225  fafd		       d0 0c		      BNE	.skipL0162
   3226  faff				   .condpart70
   3227  faff		       a5 88		      LDA	missile1y
   3228  fb01		       c5 86		      CMP	player1y
   3229  fb03		       d0 06		      BNE	.skip70then
   3230  fb05				   .condpart71
   3231  fb05		       a9 00		      LDA	#0
   3232  fb07		       85 83		      STA	missile1x
   3233  fb09		       85 88		      STA	missile1y
   3234  fb0b				   .skip70then
   3235  fb0b				   .skipL0162
   3236  fb0b				   .
   3237  fb0b							; 
   3238  fb0b
   3239  fb0b				   .L0163		;  drawscreen
   3240  fb0b
   3241  fb0b		       20 bd f3 	      jsr	drawscreen
   3242  fb0e				   .
   3243  fb0e							; 
   3244  fb0e
   3245  fb0e				   .L0164		;  rem ---------------------------------------------------------------------------------
   3246  fb0e
   3247  fb0e				   .L0165		;  if collision(player0,playfield) then gosub knock_player_back  :  rem if player collides with playfield knockback
   3248  fb0e
   3249  fb0e		       24 02		      bit	CXP0FB
   3250  fb10		       10 03		      BPL	.skipL0165
   3251  fb12				   .condpart72
   3252  fb12		       20 18 fb 	      jsr	.knock_player_back
   3253  fb15				   .skipL0165
   3254  fb15				   .
   3255  fb15							; 
   3256  fb15
   3257  fb15				   .L0166		;  goto main
   3258  fb15
   3259  fb15		       4c 27 f5 	      jmp	.main
   3260  fb18
   3261  fb18				   .
   3262  fb18							; 
   3263  fb18
   3264  fb18				   .L0167		;  rem knockback function
   3265  fb18
   3266  fb18				   .knock_player_back
   3267  fb18							; knock_player_back
   3268  fb18
   3269  fb18				   .L0168		;  player0x  =  player0x  -  p0x
   3270  fb18
   3271  fb18		       a5 80		      LDA	player0x
   3272  fb1a		       38		      SEC
   3273  fb1b		       e5 d9		      SBC	p0x
   3274  fb1d		       85 80		      STA	player0x
   3275  fb1f				   .L0169		;  player0y  =  player0y  -  p0y
   3276  fb1f
   3277  fb1f		       a5 85		      LDA	player0y
   3278  fb21		       38		      SEC
   3279  fb22		       e5 d7		      SBC	p0y
   3280  fb24		       85 85		      STA	player0y
   3281  fb26				   .L0170		;  return
   3282  fb26
   3283  fb26		       60		      RTS
   3284  fb27				   .
   3285  fb27							; 
   3286  fb27
   3287  fb27				   .win
   3288  fb27							; win
   3289  fb27
   3290  fb27				   .L0171		;  COLUPF  =  $1C  +	( rand	&  3 )	 :  rem Set random yellow shades for the playfield
   3291  fb27
   3292  fb27							; complex statement detected
   3293  fb27		       a9 1c		      LDA	#$1C
   3294  fb29		       48		      PHA
   3295  fb2a		       20 b3 f3 	      jsr	randomize
   3296  fb2d		       29 03		      AND	#3
   3297  fb2f		       ba		      TSX
   3298  fb30		       e8		      INX
   3299  fb31		       9a		      TXS
   3300  fb32		       18		      CLC
   3301  fb33		       75 00		      ADC	$00,x
   3302  fb35		       85 08		      STA	COLUPF
   3303  fb37				   .
   3304  fb37							; 
   3305  fb37
   3306  fb37				   .L0172		;  playfield:
   3307  fb37
   3308  fb37				  -	      ifconst	pfres
   3309  fb37				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3310  fb37					      else
   3311  fb37		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3312  fb39					      endif
   3313  fb39		       4c 68 fb 	      jmp	pflabel2
   3314  fb3c				   PF_data2
   3315  fb3c		       ff ff		      .byte.b	%11111111, %11111111
   3316  fb3e					      if	(pfwidth>2)
   3317  fb3e		       ff ff		      .byte.b	%11111111, %11111111
   3318  fb40					      endif
   3319  fb40		       80 00		      .byte.b	%10000000, %00000000
   3320  fb42					      if	(pfwidth>2)
   3321  fb42		       00 80		      .byte.b	%00000000, %10000000
   3322  fb44					      endif
   3323  fb44		       b0 db		      .byte.b	%10110000, %11011011
   3324  fb46					      if	(pfwidth>2)
   3325  fb46		       e0 b6		      .byte.b	%11100000, %10110110
   3326  fb48					      endif
   3327  fb48		       b0 db		      .byte.b	%10110000, %11011011
   3328  fb4a					      if	(pfwidth>2)
   3329  fb4a		       30 b6		      .byte.b	%00110000, %10110110
   3330  fb4c					      endif
   3331  fb4c		       b0 db		      .byte.b	%10110000, %11011011
   3332  fb4e					      if	(pfwidth>2)
   3333  fb4e		       18 b6		      .byte.b	%00011000, %10110110
   3334  fb50					      endif
   3335  fb50		       b0 db		      .byte.b	%10110000, %11011011
   3336  fb52					      if	(pfwidth>2)
   3337  fb52		       0c b6		      .byte.b	%00001100, %10110110
   3338  fb54					      endif
   3339  fb54		       b0 db		      .byte.b	%10110000, %11011011
   3340  fb56					      if	(pfwidth>2)
   3341  fb56		       06 b6		      .byte.b	%00000110, %10110110
   3342  fb58					      endif
   3343  fb58		       b6 db		      .byte.b	%10110110, %11011011
   3344  fb5a					      if	(pfwidth>2)
   3345  fb5a		       03 86		      .byte.b	%00000011, %10000110
   3346  fb5c					      endif
   3347  fb5c		       b6 db		      .byte.b	%10110110, %11011011
   3348  fb5e					      if	(pfwidth>2)
   3349  fb5e		       01 b7		      .byte.b	%00000001, %10110111
   3350  fb60					      endif
   3351  fb60		       b9 db		      .byte.b	%10111001, %11011011
   3352  fb62					      if	(pfwidth>2)
   3353  fb62		       00 b7		      .byte.b	%00000000, %10110111
   3354  fb64					      endif
   3355  fb64		       ff ff		      .byte.b	%11111111, %11111111
   3356  fb66					      if	(pfwidth>2)
   3357  fb66		       ff ff		      .byte.b	%11111111, %11111111
   3358  fb68					      endif
   3359  fb68				   pflabel2
   3360  fb68		       bd 3c fb 	      lda	PF_data2,x
   3361  fb6b		       95 a4		      sta	playfield,x
   3362  fb6d		       ca		      dex
   3363  fb6e		       10 f8		      bpl	pflabel2
   3364  fb70				   .L0173		;  drawscreen
   3365  fb70
   3366  fb70		       20 bd f3 	      jsr	drawscreen
   3367  fb73				   .L0174		;  goto win
   3368  fb73
   3369  fb73		       4c 27 fb 	      jmp	.win
   3370  fb76
   3371  fb76				   .
   3372  fb76							; 
   3373  fb76
   3374  fb76				   .lose
   3375  fb76							; lose
   3376  fb76
   3377  fb76				   .L0175		;  COLUPF  =  $4C  +	( rand	&  3 )	 :  rem Set random red shades for the playfield
   3378  fb76
   3379  fb76							; complex statement detected
   3380  fb76		       a9 4c		      LDA	#$4C
   3381  fb78		       48		      PHA
   3382  fb79		       20 b3 f3 	      jsr	randomize
   3383  fb7c		       29 03		      AND	#3
   3384  fb7e		       ba		      TSX
   3385  fb7f		       e8		      INX
   3386  fb80		       9a		      TXS
   3387  fb81		       18		      CLC
   3388  fb82		       75 00		      ADC	$00,x
   3389  fb84		       85 08		      STA	COLUPF
   3390  fb86				   .
   3391  fb86							; 
   3392  fb86
   3393  fb86				   .L0176		;  playfield:
   3394  fb86
   3395  fb86				  -	      ifconst	pfres
   3396  fb86				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3397  fb86					      else
   3398  fb86		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3399  fb88					      endif
   3400  fb88		       4c b7 fb 	      jmp	pflabel3
   3401  fb8b				   PF_data3
   3402  fb8b		       ff ff		      .byte.b	%11111111, %11111111
   3403  fb8d					      if	(pfwidth>2)
   3404  fb8d		       ff ff		      .byte.b	%11111111, %11111111
   3405  fb8f					      endif
   3406  fb8f		       80 00		      .byte.b	%10000000, %00000000
   3407  fb91					      if	(pfwidth>2)
   3408  fb91		       00 80		      .byte.b	%00000000, %10000000
   3409  fb93					      endif
   3410  fb93		       bc 7d		      .byte.b	%10111100, %01111101
   3411  fb95					      if	(pfwidth>2)
   3412  fb95		       90 80		      .byte.b	%10010000, %10000000
   3413  fb97					      endif
   3414  fb97		       a0 11		      .byte.b	%10100000, %00010001
   3415  fb99					      if	(pfwidth>2)
   3416  fb99		       f0 80		      .byte.b	%11110000, %10000000
   3417  fb9b					      endif
   3418  fb9b		       bc 11		      .byte.b	%10111100, %00010001
   3419  fb9d					      if	(pfwidth>2)
   3420  fb9d		       10 80		      .byte.b	%00010000, %10000000
   3421  fb9f					      endif
   3422  fb9f		       80 c0		      .byte.b	%10000000, %11000000
   3423  fba1					      if	(pfwidth>2)
   3424  fba1		       e7 bf		      .byte.b	%11100111, %10111111
   3425  fba3					      endif
   3426  fba3		       a0 5f		      .byte.b	%10100000, %01011111
   3427  fba5					      if	(pfwidth>2)
   3428  fba5		       00 83		      .byte.b	%00000000, %10000011
   3429  fba7					      endif
   3430  fba7		       a0 d1		      .byte.b	%10100000, %11010001
   3431  fba9					      if	(pfwidth>2)
   3432  fba9		       f0 83		      .byte.b	%11110000, %10000011
   3433  fbab					      endif
   3434  fbab		       be 1f		      .byte.b	%10111110, %00011111
   3435  fbad					      if	(pfwidth>2)
   3436  fbad		       10 83		      .byte.b	%00010000, %10000011
   3437  fbaf					      endif
   3438  fbaf		       80 e0		      .byte.b	%10000000, %11100000
   3439  fbb1					      if	(pfwidth>2)
   3440  fbb1		       f0 83		      .byte.b	%11110000, %10000011
   3441  fbb3					      endif
   3442  fbb3		       ff ff		      .byte.b	%11111111, %11111111
   3443  fbb5					      if	(pfwidth>2)
   3444  fbb5		       ff ff		      .byte.b	%11111111, %11111111
   3445  fbb7					      endif
   3446  fbb7				   pflabel3
   3447  fbb7		       bd 8b fb 	      lda	PF_data3,x
   3448  fbba		       95 a4		      sta	playfield,x
   3449  fbbc		       ca		      dex
   3450  fbbd		       10 f8		      bpl	pflabel3
   3451  fbbf				   .L0177		;  drawscreen
   3452  fbbf
   3453  fbbf		       20 bd f3 	      jsr	drawscreen
   3454  fbc2				   .L0178		;  goto lose
   3455  fbc2
   3456  fbc2		       4c 76 fb 	      jmp	.lose
   3457  fbc5
   3458  fbc5				   .
   3459  fbc5							; 
   3460  fbc5
   3461  fbc5				   .
   3462  fbc5							; 
   3463  fbc5
   3464  fbc5				  -	      if	(<*) > (<(*+15))
   3465  fbc5				  -	      repeat	($100-<*)
   3466  fbc5				  -	      .byte	0
   3467  fbc5				  -	      repend
   3468  fbc5					      endif
   3469  fbc5				   player9then_0
   3470  fbc5		       76		      .byte.b	%01110110
   3471  fbc6		       64		      .byte.b	%01100100
   3472  fbc7		       64		      .byte.b	%01100100
   3473  fbc8		       3c		      .byte.b	%00111100
   3474  fbc9		       7c		      .byte.b	%01111100
   3475  fbca		       ff		      .byte.b	%11111111
   3476  fbcb		       bd		      .byte.b	%10111101
   3477  fbcc		       ff		      .byte.b	%11111111
   3478  fbcd		       fc		      .byte.b	%11111100
   3479  fbce		       38		      .byte.b	%00111000
   3480  fbcf		       e4		      .byte.b	%11100100
   3481  fbd0		       c4		      .byte.b	%11000100
   3482  fbd1		       c4		      .byte.b	%11000100
   3483  fbd2		       fc		      .byte.b	%11111100
   3484  fbd3		       78		      .byte.b	%01111000
   3485  fbd4		       30		      .byte.b	%00110000
   3486  fbd5				  -	      if	(<*) > (<(*+15))
   3487  fbd5				  -	      repeat	($100-<*)
   3488  fbd5				  -	      .byte	0
   3489  fbd5				  -	      repend
   3490  fbd5					      endif
   3491  fbd5				   player10then_0
   3492  fbd5		       6e		      .byte.b	%01101110
   3493  fbd6		       26		      .byte.b	%00100110
   3494  fbd7		       26		      .byte.b	%00100110
   3495  fbd8		       3c		      .byte.b	%00111100
   3496  fbd9		       3e		      .byte.b	%00111110
   3497  fbda		       ff		      .byte.b	%11111111
   3498  fbdb		       bd		      .byte.b	%10111101
   3499  fbdc		       ff		      .byte.b	%11111111
   3500  fbdd		       3f		      .byte.b	%00111111
   3501  fbde		       1c		      .byte.b	%00011100
   3502  fbdf		       27		      .byte.b	%00100111
   3503  fbe0		       23		      .byte.b	%00100011
   3504  fbe1		       23		      .byte.b	%00100011
   3505  fbe2		       3f		      .byte.b	%00111111
   3506  fbe3		       1e		      .byte.b	%00011110
   3507  fbe4		       0c		      .byte.b	%00001100
   3508  fbe5				  -	      if	(<*) > (<(*+10))
   3509  fbe5				  -	      repeat	($100-<*)
   3510  fbe5				  -	      .byte	0
   3511  fbe5				  -	      repend
   3512  fbe5					      endif
   3513  fbe5				   player11then_1
   3514  fbe5		       1c		      .byte.b	%00011100
   3515  fbe6		       18		      .byte.b	%00011000
   3516  fbe7		       18		      .byte.b	%00011000
   3517  fbe8		       20		      .byte.b	%00100000
   3518  fbe9		       18		      .byte.b	%00011000
   3519  fbea		       5f		      .byte.b	%01011111
   3520  fbeb		       64		      .byte.b	%01100100
   3521  fbec		       10		      .byte.b	%00010000
   3522  fbed		       18		      .byte.b	%00011000
   3523  fbee		       3c		      .byte.b	%00111100
   3524  fbef		       18		      .byte.b	%00011000
   3525  fbf0				  -	      if	(<*) > (<(*+10))
   3526  fbf0				  -	      repeat	($100-<*)
   3527  fbf0				  -	      .byte	0
   3528  fbf0				  -	      repend
   3529  fbf0					      endif
   3530  fbf0				   player12then_1
   3531  fbf0		       43		      .byte.b	%01000011
   3532  fbf1		       62		      .byte.b	%01100010
   3533  fbf2		       36		      .byte.b	%00110110
   3534  fbf3		       1c		      .byte.b	%00011100
   3535  fbf4		       28		      .byte.b	%00101000
   3536  fbf5		       3c		      .byte.b	%00111100
   3537  fbf6		       24		      .byte.b	%00100100
   3538  fbf7		       10		      .byte.b	%00010000
   3539  fbf8		       18		      .byte.b	%00011000
   3540  fbf9		       3c		      .byte.b	%00111100
   3541  fbfa		       18		      .byte.b	%00011000
   3542  fbfb					      if	(<*) > (<(*+10))
   3543  fbfb					      repeat	($100-<*)
   3544  fbfb		       00		      .byte.b	0
   3543  fbfb					      repend
   3544  fbfc		       00		      .byte.b	0
   3543  fbfc					      repend
   3544  fbfd		       00		      .byte.b	0
   3543  fbfd					      repend
   3544  fbfe		       00		      .byte.b	0
   3543  fbfe					      repend
   3544  fbff		       00		      .byte.b	0
   3545  fc00					      repend
   3546  fc00					      endif
   3547  fc00				   player13then_1
   3548  fc00		       1c		      .byte.b	%00011100
   3549  fc01		       18		      .byte.b	%00011000
   3550  fc02		       18		      .byte.b	%00011000
   3551  fc03		       20		      .byte.b	%00100000
   3552  fc04		       5a		      .byte.b	%01011010
   3553  fc05		       7c		      .byte.b	%01111100
   3554  fc06		       24		      .byte.b	%00100100
   3555  fc07		       10		      .byte.b	%00010000
   3556  fc08		       18		      .byte.b	%00011000
   3557  fc09		       3c		      .byte.b	%00111100
   3558  fc0a		       18		      .byte.b	%00011000
   3559  fc0b					      if	ECHOFIRST
      913 bytes of ROM space left
   3560  fc0b					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   3561  fc0b					      endif
   3562  fc0b		       00 01	   ECHOFIRST  =	1
   3563  fc0b
   3564  fc0b
   3565  fc0b
   3566  fc0b							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3567  fc0b
   3568  fc0b							; feel free to modify the score graphics - just keep each digit 8 high
   3569  fc0b							; and keep the conditional compilation stuff intact
   3570  fc0b				  -	      ifconst	ROM2k
   3571  fc0b				  -	      ORG	$F7AC-8
   3572  fc0b					      else
   3573  fc0b				  -	      ifconst	bankswitch
   3574  fc0b				  -	      if	bankswitch == 8
   3575  fc0b				  -	      ORG	$2F94-bscode_length
   3576  fc0b				  -	      RORG	$FF94-bscode_length
   3577  fc0b				  -	      endif
   3578  fc0b				  -	      if	bankswitch == 16
   3579  fc0b				  -	      ORG	$4F94-bscode_length
   3580  fc0b				  -	      RORG	$FF94-bscode_length
   3581  fc0b				  -	      endif
   3582  fc0b				  -	      if	bankswitch == 32
   3583  fc0b				  -	      ORG	$8F94-bscode_length
   3584  fc0b				  -	      RORG	$FF94-bscode_length
   3585  fc0b				  -	      endif
   3586  fc0b				  -	      if	bankswitch == 64
   3587  fc0b				  -	      ORG	$10F80-bscode_length
   3588  fc0b				  -	      RORG	$1FF80-bscode_length
   3589  fc0b				  -	      endif
   3590  fc0b					      else
   3591  ff9c					      ORG	$FF9C
   3592  ff9c					      endif
   3593  ff9c					      endif
   3594  ff9c
   3595  ff9c							; font equates
   3596  ff9c		       00 01	   .21stcentury =	1
   3597  ff9c		       00 02	   alarmclock =	2
   3598  ff9c		       00 03	   handwritten =	3
   3599  ff9c		       00 04	   interrupted =	4
   3600  ff9c		       00 05	   retroputer =	5
   3601  ff9c		       00 06	   whimsey    =	6
   3602  ff9c		       00 07	   tiny       =	7
   3603  ff9c		       00 08	   hex	      =	8
   3604  ff9c
   3605  ff9c				  -	      ifconst	font
   3606  ff9c				  -	      if	font == hex
   3607  ff9c				  -	      ORG	. - 48
   3608  ff9c				  -	      endif
   3609  ff9c					      endif
   3610  ff9c
   3611  ff9c				   scoretable
   3612  ff9c
   3613  ff9c				  -	      ifconst	font
   3614  ff9c				  -	      if	font == .21stcentury
   3615  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   3616  ff9c				  -	      endif
   3617  ff9c				  -	      if	font == alarmclock
   3618  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   3619  ff9c				  -	      endif
   3620  ff9c				  -	      if	font == handwritten
   3621  ff9c				  -	      include	"score_graphics.asm.handwritten"
   3622  ff9c				  -	      endif
   3623  ff9c				  -	      if	font == interrupted
   3624  ff9c				  -	      include	"score_graphics.asm.interrupted"
   3625  ff9c				  -	      endif
   3626  ff9c				  -	      if	font == retroputer
   3627  ff9c				  -	      include	"score_graphics.asm.retroputer"
   3628  ff9c				  -	      endif
   3629  ff9c				  -	      if	font == whimsey
   3630  ff9c				  -	      include	"score_graphics.asm.whimsey"
   3631  ff9c				  -	      endif
   3632  ff9c				  -	      if	font == tiny
   3633  ff9c				  -	      include	"score_graphics.asm.tiny"
   3634  ff9c				  -	      endif
   3635  ff9c				  -	      if	font == hex
   3636  ff9c				  -	      include	"score_graphics.asm.hex"
   3637  ff9c				  -	      endif
   3638  ff9c					      else		; default font
   3639  ff9c
   3640  ff9c		       3c		      .byte.b	%00111100
   3641  ff9d		       66		      .byte.b	%01100110
   3642  ff9e		       66		      .byte.b	%01100110
   3643  ff9f		       66		      .byte.b	%01100110
   3644  ffa0		       66		      .byte.b	%01100110
   3645  ffa1		       66		      .byte.b	%01100110
   3646  ffa2		       66		      .byte.b	%01100110
   3647  ffa3		       3c		      .byte.b	%00111100
   3648  ffa4
   3649  ffa4		       7e		      .byte.b	%01111110
   3650  ffa5		       18		      .byte.b	%00011000
   3651  ffa6		       18		      .byte.b	%00011000
   3652  ffa7		       18		      .byte.b	%00011000
   3653  ffa8		       18		      .byte.b	%00011000
   3654  ffa9		       38		      .byte.b	%00111000
   3655  ffaa		       18		      .byte.b	%00011000
   3656  ffab		       08		      .byte.b	%00001000
   3657  ffac
   3658  ffac		       7e		      .byte.b	%01111110
   3659  ffad		       60		      .byte.b	%01100000
   3660  ffae		       60		      .byte.b	%01100000
   3661  ffaf		       3c		      .byte.b	%00111100
   3662  ffb0		       06		      .byte.b	%00000110
   3663  ffb1		       06		      .byte.b	%00000110
   3664  ffb2		       46		      .byte.b	%01000110
   3665  ffb3		       3c		      .byte.b	%00111100
   3666  ffb4
   3667  ffb4		       3c		      .byte.b	%00111100
   3668  ffb5		       46		      .byte.b	%01000110
   3669  ffb6		       06		      .byte.b	%00000110
   3670  ffb7		       06		      .byte.b	%00000110
   3671  ffb8		       1c		      .byte.b	%00011100
   3672  ffb9		       06		      .byte.b	%00000110
   3673  ffba		       46		      .byte.b	%01000110
   3674  ffbb		       3c		      .byte.b	%00111100
   3675  ffbc
   3676  ffbc		       0c		      .byte.b	%00001100
   3677  ffbd		       0c		      .byte.b	%00001100
   3678  ffbe		       7e		      .byte.b	%01111110
   3679  ffbf		       4c		      .byte.b	%01001100
   3680  ffc0		       4c		      .byte.b	%01001100
   3681  ffc1		       2c		      .byte.b	%00101100
   3682  ffc2		       1c		      .byte.b	%00011100
   3683  ffc3		       0c		      .byte.b	%00001100
   3684  ffc4
   3685  ffc4		       3c		      .byte.b	%00111100
   3686  ffc5		       46		      .byte.b	%01000110
   3687  ffc6		       06		      .byte.b	%00000110
   3688  ffc7		       06		      .byte.b	%00000110
   3689  ffc8		       3c		      .byte.b	%00111100
   3690  ffc9		       60		      .byte.b	%01100000
   3691  ffca		       60		      .byte.b	%01100000
   3692  ffcb		       7e		      .byte.b	%01111110
   3693  ffcc
   3694  ffcc		       3c		      .byte.b	%00111100
   3695  ffcd		       66		      .byte.b	%01100110
   3696  ffce		       66		      .byte.b	%01100110
   3697  ffcf		       66		      .byte.b	%01100110
   3698  ffd0		       7c		      .byte.b	%01111100
   3699  ffd1		       60		      .byte.b	%01100000
   3700  ffd2		       62		      .byte.b	%01100010
   3701  ffd3		       3c		      .byte.b	%00111100
   3702  ffd4
   3703  ffd4		       30		      .byte.b	%00110000
   3704  ffd5		       30		      .byte.b	%00110000
   3705  ffd6		       30		      .byte.b	%00110000
   3706  ffd7		       18		      .byte.b	%00011000
   3707  ffd8		       0c		      .byte.b	%00001100
   3708  ffd9		       06		      .byte.b	%00000110
   3709  ffda		       42		      .byte.b	%01000010
   3710  ffdb		       3e		      .byte.b	%00111110
   3711  ffdc
   3712  ffdc		       3c		      .byte.b	%00111100
   3713  ffdd		       66		      .byte.b	%01100110
   3714  ffde		       66		      .byte.b	%01100110
   3715  ffdf		       66		      .byte.b	%01100110
   3716  ffe0		       3c		      .byte.b	%00111100
   3717  ffe1		       66		      .byte.b	%01100110
   3718  ffe2		       66		      .byte.b	%01100110
   3719  ffe3		       3c		      .byte.b	%00111100
   3720  ffe4
   3721  ffe4		       3c		      .byte.b	%00111100
   3722  ffe5		       46		      .byte.b	%01000110
   3723  ffe6		       06		      .byte.b	%00000110
   3724  ffe7		       3e		      .byte.b	%00111110
   3725  ffe8		       66		      .byte.b	%01100110
   3726  ffe9		       66		      .byte.b	%01100110
   3727  ffea		       66		      .byte.b	%01100110
   3728  ffeb		       3c		      .byte.b	%00111100
   3729  ffec
   3730  ffec					      ifnconst	DPC_kernel_options
   3731  ffec
   3732  ffec		       00		      .byte.b	%00000000
   3733  ffed		       00		      .byte.b	%00000000
   3734  ffee		       00		      .byte.b	%00000000
   3735  ffef		       00		      .byte.b	%00000000
   3736  fff0		       00		      .byte.b	%00000000
   3737  fff1		       00		      .byte.b	%00000000
   3738  fff2		       00		      .byte.b	%00000000
   3739  fff3		       00		      .byte.b	%00000000
   3740  fff4
   3741  fff4					      endif
   3742  fff4
   3743  fff4					      endif
   3744  fff4
   3745  fff4				  -	      ifconst	ROM2k
   3746  fff4				  -	      ORG	$F7FC
   3747  fff4					      else
   3748  fff4				  -	      ifconst	bankswitch
   3749  fff4				  -	      if	bankswitch == 8
   3750  fff4				  -	      ORG	$2FF4-bscode_length
   3751  fff4				  -	      RORG	$FFF4-bscode_length
   3752  fff4				  -	      endif
   3753  fff4				  -	      if	bankswitch == 16
   3754  fff4				  -	      ORG	$4FF4-bscode_length
   3755  fff4				  -	      RORG	$FFF4-bscode_length
   3756  fff4				  -	      endif
   3757  fff4				  -	      if	bankswitch == 32
   3758  fff4				  -	      ORG	$8FF4-bscode_length
   3759  fff4				  -	      RORG	$FFF4-bscode_length
   3760  fff4				  -	      endif
   3761  fff4				  -	      if	bankswitch == 64
   3762  fff4				  -	      ORG	$10FE0-bscode_length
   3763  fff4				  -	      RORG	$1FFE0-bscode_length
   3764  fff4				  -	      endif
   3765  fff4					      else
   3766  fffc					      ORG	$FFFC
   3767  fffc					      endif
   3768  fffc					      endif
   3769  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3770  fffc
   3771  fffc				  -	      ifconst	bankswitch
   3772  fffc				  -	      if	bankswitch == 8
   3773  fffc				  -	      ORG	$2FFC
   3774  fffc				  -	      RORG	$FFFC
   3775  fffc				  -	      endif
   3776  fffc				  -	      if	bankswitch == 16
   3777  fffc				  -	      ORG	$4FFC
   3778  fffc				  -	      RORG	$FFFC
   3779  fffc				  -	      endif
   3780  fffc				  -	      if	bankswitch == 32
   3781  fffc				  -	      ORG	$8FFC
   3782  fffc				  -	      RORG	$FFFC
   3783  fffc				  -	      endif
   3784  fffc				  -	      if	bankswitch == 64
   3785  fffc				  -	      ORG	$10FF0
   3786  fffc				  -	      RORG	$1FFF0
   3787  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   3788  fffc				  -	      ORG	$10FF8
   3789  fffc				  -	      RORG	$1FFF8
   3790  fffc				  -	      ifconst	superchip
   3791  fffc				  -	      .byte	"E","F","S","C"
   3792  fffc				  -	      else
   3793  fffc				  -	      .byte	"E","F","E","F"
   3794  fffc				  -	      endif
   3795  fffc				  -	      ORG	$10FFC
   3796  fffc				  -	      RORG	$1FFFC
   3797  fffc				  -	      endif
   3798  fffc					      else
   3799  fffc				  -	      ifconst	ROM2k
   3800  fffc				  -	      ORG	$F7FC
   3801  fffc					      else
   3802  fffc					      ORG	$FFFC
   3803  fffc					      endif
   3804  fffc					      endif
   3805  fffc		       00 f0		      .word.w	(start & $ffff)
   3806  fffe		       00 f0		      .word.w	(start & $ffff)
