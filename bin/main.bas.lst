------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 00	    missile1dist =	0
      4  10000 ????
      5  10000 ????		00 d4	    explosion_timer =	a
      6  10000 ????		00 01	    pfscore    =	1
      7  10000 ????		00 e3	    monsterHealth =	p
      8  10000 ????		00 dd	    playerHealth =	j
      9  10000 ????		00 e8	    winflag    =	u
     10  10000 ????		00 00	    moved      =	0
     11  10000 ????		00 e1	    playerSprite =	n
     12  10000 ????		00 e0	    monsterSprite =	m
     13  10000 ????		00 db	    p1x        =	h
     14  10000 ????		00 da	    p1y        =	g
     15  10000 ????		00 d9	    p0x        =	f
     16  10000 ????		00 d7	    p0y        =	d
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 00	    missile1dist =	0
      4  10000 ????
      5  10000 ????		00 d4	    explosion_timer =	a
      6  10000 ????		00 01	    pfscore    =	1
      7  10000 ????		00 e3	    monsterHealth =	p
      8  10000 ????		00 dd	    playerHealth =	j
      9  10000 ????		00 e8	    winflag    =	u
     10  10000 ????		00 00	    moved      =	0
     11  10000 ????		00 e1	    playerSprite =	n
     12  10000 ????		00 e0	    monsterSprite =	m
     13  10000 ????		00 db	    p1x        =	h
     14  10000 ????		00 da	    p1y        =	g
     15  10000 ????		00 d9	    p0x        =	f
     16  10000 ????		00 d7	    p0y        =	d
------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 63 f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8					      ifnconst	no_blank_lines
    279  f0d8					      ifnconst	playercolors
    280  f0d8		       a5 90		      lda	missile0height	;3
    281  f0da		       c7 91		      dcp	missile0y	;5
    282  f0dc		       e5 f6		      sbc	stack1
    283  f0de		       85 1d		      sta	ENAM0	;3
    284  f0e0				  -	      else
    285  f0e0				  -	      lda	(player0color),y
    286  f0e0				  -	      sta	player0colorstore
    287  f0e0				  -	      sleep	6
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef				  -	      ifconst	PFcolors
    403  f0ef				  -	      tay
    404  f0ef				  -	      lda	(pfcolortable),y
    405  f0ef				  -	      ifnconst	backgroundchange
    406  f0ef				  -	      sta	COLUPF
    407  f0ef				  -	      else
    408  f0ef				  -	      sta	COLUBK
    409  f0ef				  -	      endif
    410  f0ef				  -	      ifconst	pfrowheight
    411  f0ef				  -	      lda	#pfrowheight
    412  f0ef				  -	      else
    413  f0ef				  -	      ifnconst	pfres
    414  f0ef				  -	      lda	#8
    415  f0ef				  -	      else
    416  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0ef				  -	      endif
    418  f0ef				  -	      endif
    419  f0ef				  -	      sta	temp1
    420  f0ef					      endif
    421  f0ef					      ifnconst	PFcolorandheight
    422  f0ef					      ifnconst	PFcolors
    423  f0ef					      ifnconst	PFheights
    424  f0ef					      ifnconst	no_blank_lines
    425  f0ef							; read paddle 0
    426  f0ef							; lo-res paddle read
    427  f0ef							; bit INPT0
    428  f0ef							; bmi paddleskipread
    429  f0ef							; inc paddle0
    430  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    432  f0f4				  -	      ifconst	pfrowheight
    433  f0f4				  -	      lda	#pfrowheight
    434  f0f4					      else
    435  f0f4					      ifnconst	pfres
    436  f0f4		       a9 08		      lda	#8
    437  f0f6				  -	      else
    438  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f6					      endif
    440  f0f6					      endif
    441  f0f6		       85 9c		      sta	temp1
    442  f0f8					      endif
    443  f0f8					      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    460  f106				  -	      else
    461  f106				  -	      ldy	#124
    462  f106				  -	      lda	(pfcolortable),y
    463  f106				  -	      sta	COLUPF
    464  f106					      endif
    465  f106
    466  f106				  -	      ifconst	PFheights
    467  f106				  -	      ldx	#1
    468  f106				  -			;sleep 4
    469  f106				  -	      sleep	3	; this was over 1 cycle
    470  f106					      else
    471  f106		       a6 ef		      ldx	playfieldpos
    472  f108							;sleep 3
      0  f108					      sleep	2	; this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    474  f109					      endif
    475  f109
    476  f109		       4c 27 f1 	      jmp	enterlastkernel
    477  f10c
    478  f10c				  -	      else
    479  f10c				  -lastkernelline
    480  f10c				  -
    481  f10c				  -	      ifconst	PFheights
    482  f10c				  -	      ldx	#1
    483  f10c				  -			;sleep 5
    484  f10c				  -	      sleep	4	; this was over 1 cycle
    485  f10c				  -	      else
    486  f10c				  -	      ldx	playfieldpos
    487  f10c				  -			;sleep 4
    488  f10c				  -	      sleep	3	; this was over 1 cycle
    489  f10c				  -	      endif
    490  f10c				  -
    491  f10c				  -	      cpx	#0
    492  f10c				  -	      bne	.enterfromNBL
    493  f10c				  -	      jmp	no_blank_lines_bailout
    494  f10c					      endif
    495  f10c
    496  f10c				  -	      if	((<*)>$d5)
    497  f10c				  -	      align	256
    498  f10c					      endif
    499  f10c							; this is a kludge to prevent page wrapping - fix!!!
    500  f10c
    501  f10c				   .skipDrawlastP1
    502  f10c		       a9 00		      lda	#0
    503  f10e		       a8		      tay		; added so we don't cross a page
    504  f10f		       4c 39 f1 	      jmp	.continuelastP1
    505  f112
    506  f112				   .endkerloop		; enter at cycle 59??
    507  f112
    508  f112		       ea		      nop
    509  f113
    510  f113				   .enterfromNBL
    511  f113				  -	      ifconst	pfres
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f113				  -	      sty	PF1L	;3
    514  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f113				  -	      sty	PF2L	;3
    516  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f113				  -	      sty	PF1R	; possibly too early?
    518  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f113				  -	      sty	PF2R	;3
    520  f113					      else
    521  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f116		       84 0e		      sty	PF1L	;3
    523  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11b		       84 0f		      sty	PF2L	;3
    525  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f120		       84 0e		      sty	PF1R	; possibly too early?
    527  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f125		       84 0f		      sty	PF2R	;3
    529  f127					      endif
    530  f127
    531  f127				   enterlastkernel
    532  f127		       a5 92		      lda	ballheight
    533  f129
    534  f129							; tya
    535  f129		       c7 89		      dcp	bally
    536  f12b							; sleep 4
    537  f12b
    538  f12b							; sbc stack3
    539  f12b		       2a		      rol
    540  f12c		       2a		      rol
    541  f12d		       85 1f		      sta	ENABL
    542  f12f
    543  f12f		       a5 8f		      lda	player1height	;3
    544  f131		       c7 86		      dcp	player1y	;5
    545  f133		       90 d7		      bcc	.skipDrawlastP1
    546  f135		       a4 86		      ldy	player1y	;3
    547  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f139							; so it doesn't cross a page boundary!
    549  f139
    550  f139				   .continuelastP1
    551  f139		       85 1c		      sta	GRP1	;3
    552  f13b
    553  f13b					      ifnconst	player1colors
    554  f13b		       a5 87		      lda	missile1height	;3
    555  f13d		       c7 88		      dcp	missile1y	;5
    556  f13f				  -	      else
    557  f13f				  -	      lda	(player1color),y
    558  f13f				  -	      sta	COLUP1
    559  f13f					      endif
    560  f13f
    561  f13f		       ca		      dex
    562  f140							;dec temp4 ; might try putting this above PF writes
    563  f140		       f0 36		      beq	endkernel
    564  f142
    565  f142
    566  f142				  -	      ifconst	pfres
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f142				  -	      sty	PF1L	;3
    569  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f142				  -	      sty	PF2L	;3
    571  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f142				  -	      sty	PF1R	; possibly too early?
    573  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f142				  -	      sty	PF2R	;3
    575  f142					      else
    576  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f145		       84 0e		      sty	PF1L	;3
    578  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14a		       84 0f		      sty	PF2L	;3
    580  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f14f		       84 0e		      sty	PF1R	; possibly too early?
    582  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f154		       84 0f		      sty	PF2R	;3
    584  f156					      endif
    585  f156
    586  f156					      ifnconst	player1colors
    587  f156		       2a		      rol		;2
    588  f157		       2a		      rol		;2
    589  f158		       85 1e		      sta	ENAM1	;3
    590  f15a				  -	      else
    591  f15a				  -	      ifnconst	playercolors
    592  f15a				  -	      sleep	7
    593  f15a				  -	      else
    594  f15a				  -	      lda.w	player0colorstore
    595  f15a				  -	      sta	COLUP0
    596  f15a				  -	      endif
    597  f15a					      endif
    598  f15a
    599  f15a		       ad 8e 00 	      lda.w	player0height
    600  f15d		       c7 85		      dcp	player0y
    601  f15f		       90 11		      bcc	.skipDrawlastP0
    602  f161		       a4 85		      ldy	player0y
    603  f163		       b1 8a		      lda	(player0pointer),y
    604  f165				   .continuelastP0
    605  f165		       85 1b		      sta	GRP0
    606  f167
    607  f167
    608  f167
    609  f167					      ifnconst	no_blank_lines
    610  f167		       a5 90		      lda	missile0height	;3
    611  f169		       c7 91		      dcp	missile0y	;5
    612  f16b		       e5 f6		      sbc	stack1
    613  f16d		       85 1d		      sta	ENAM0	;3
    614  f16f		       4c 12 f1 	      jmp	.endkerloop
    615  f172				  -	      else
    616  f172				  -	      ifconst	readpaddle
    617  f172				  -	      ldy	currentpaddle
    618  f172				  -	      lda	INPT0,y
    619  f172				  -	      bpl	noreadpaddle2
    620  f172				  -	      inc	paddle
    621  f172				  -	      jmp	.endkerloop
    622  f172				  -noreadpaddle2
    623  f172				  -	      sleep	4
    624  f172				  -	      jmp	.endkerloop
    625  f172				  -	      else		; no_blank_lines and no paddle reading
    626  f172				  -	      pla
    627  f172				  -	      pha		; 14 cycles in 4 bytes
    628  f172				  -	      pla
    629  f172				  -	      pha
    630  f172				  -			; sleep 14
    631  f172				  -	      jmp	.endkerloop
    632  f172				  -	      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 65 f1 	      jmp	.continuelastP0
    647  f178
    648  f178				  -	      ifconst	no_blank_lines
    649  f178				  -no_blank_lines_bailout
    650  f178				  -	      ldx	#0
    651  f178					      endif
    652  f178
    653  f178				   endkernel
    654  f178							; 6 digit score routine
    655  f178		       86 0e		      stx	PF1
    656  f17a		       86 0f		      stx	PF2
    657  f17c		       86 0d		      stx	PF0
    658  f17e		       18		      clc
    659  f17f
    660  f17f				  -	      ifconst	pfrowheight
    661  f17f				  -	      lda	#pfrowheight+2
    662  f17f					      else
    663  f17f					      ifnconst	pfres
    664  f17f		       a9 0a		      lda	#10
    665  f181				  -	      else
    666  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f181					      endif
    668  f181					      endif
    669  f181
    670  f181		       e5 ef		      sbc	playfieldpos
    671  f183		       85 ef		      sta	playfieldpos
    672  f185		       8a		      txa
    673  f186
    674  f186				  -	      ifconst	shakescreen
    675  f186				  -	      bit	shakescreen
    676  f186				  -	      bmi	noshakescreen2
    677  f186				  -	      ldx	#$3D
    678  f186				  -noshakescreen2
    679  f186					      endif
    680  f186
    681  f186		       95 02		      sta	WSYNC,x
    682  f188
    683  f188							; STA WSYNC ;first one, need one more
    684  f188		       85 0b		      sta	REFP0
    685  f18a		       85 0c		      sta	REFP1
    686  f18c		       85 1b		      STA	GRP0
    687  f18e		       85 1c		      STA	GRP1
    688  f190							; STA PF1
    689  f190							; STA PF2
    690  f190		       85 2b		      sta	HMCLR
    691  f192		       85 1d		      sta	ENAM0
    692  f194		       85 1e		      sta	ENAM1
    693  f196		       85 1f		      sta	ENABL
    694  f198
    695  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19a		       85 85		      sta	player0y
    697  f19c		       a5 9e		      lda	temp3
    698  f19e		       85 86		      sta	player1y
    699  f1a0					      ifnconst	player1colors
    700  f1a0		       a5 a1		      lda	temp6
    701  f1a2		       85 88		      sta	missile1y
    702  f1a4					      endif
    703  f1a4					      ifnconst	playercolors
    704  f1a4					      ifnconst	readpaddle
    705  f1a4		       a5 a0		      lda	temp5
    706  f1a6		       85 91		      sta	missile0y
    707  f1a8					      endif
    708  f1a8					      endif
    709  f1a8		       a5 f7		      lda	stack2
    710  f1aa		       85 89		      sta	bally
    711  f1ac
    712  f1ac							; strangely, this isn't required any more. might have
    713  f1ac							; resulted from the no_blank_lines score bounce fix
    714  f1ac							;ifconst no_blank_lines
    715  f1ac							;sta WSYNC
    716  f1ac							;endif
    717  f1ac
    718  f1ac		       ad 84 02 	      lda	INTIM
    719  f1af		       18		      clc
    720  f1b0					      ifnconst	vblank_time
    721  f1b0		       69 8e		      adc	#43+12+87
    722  f1b2				  -	      else
    723  f1b2				  -	      adc	#vblank_time+12+87
    724  f1b2				  -
    725  f1b2					      endif
    726  f1b2							; sta WSYNC
    727  f1b2		       8d 96 02 	      sta	TIM64T
    728  f1b5
    729  f1b5				  -	      ifconst	minikernel
    730  f1b5				  -	      jsr	minikernel
    731  f1b5					      endif
    732  f1b5
    733  f1b5							; now reassign temp vars for score pointers
    734  f1b5
    735  f1b5							; score pointers contain:
    736  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b5							; swap lo2->temp1
    738  f1b5							; swap lo4->temp3
    739  f1b5							; swap lo6->temp5
    740  f1b5					      ifnconst	noscore
    741  f1b5		       a5 97		      lda	scorepointers+1
    742  f1b7							; ldy temp1
    743  f1b7		       85 9c		      sta	temp1
    744  f1b9							; sty scorepointers+1
    745  f1b9
    746  f1b9		       a5 99		      lda	scorepointers+3
    747  f1bb							; ldy temp3
    748  f1bb		       85 9e		      sta	temp3
    749  f1bd							; sty scorepointers+3
    750  f1bd
    751  f1bd
    752  f1bd		       85 2b		      sta	HMCLR
    753  f1bf		       ba		      tsx
    754  f1c0		       86 f6		      stx	stack1
    755  f1c2		       a2 e0		      ldx	#$E0
    756  f1c4		       86 20		      stx	HMP0
    757  f1c6
    758  f1c6		       a5 a3		      LDA	scorecolor
    759  f1c8		       85 06		      STA	COLUP0
    760  f1ca		       85 07		      STA	COLUP1
    761  f1cc				  -	      ifconst	scorefade
    762  f1cc				  -	      STA	stack2
    763  f1cc					      endif
    764  f1cc					      ifconst	pfscore
    765  f1cc		       a5 f4		      lda	pfscorecolor
    766  f1ce		       85 08		      sta	COLUPF
    767  f1d0					      endif
    768  f1d0		       85 02		      sta	WSYNC
    769  f1d2		       a2 00		      ldx	#0
    770  f1d4		       86 1b		      STx	GRP0
    771  f1d6		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1d8
    773  f1d8		       a5 9b		      lda	scorepointers+5
    774  f1da							; ldy temp5
    775  f1da		       95 a0		      sta	temp5,x
    776  f1dc							; sty scorepointers+5
    777  f1dc		       a9 ff		      lda	#>scoretable
    778  f1de		       85 97		      sta	scorepointers+1
    779  f1e0		       85 99		      sta	scorepointers+3
    780  f1e2		       85 9b		      sta	scorepointers+5
    781  f1e4		       85 9d		      sta	temp2
    782  f1e6		       85 9f		      sta	temp4
    783  f1e8		       85 a1		      sta	temp6
    784  f1ea		       a0 07		      LDY	#7
    785  f1ec		       84 25		      STY	VDELP0
    786  f1ee		       85 10		      STA	RESP0
    787  f1f0		       85 11		      STA	RESP1
    788  f1f2
    789  f1f2
    790  f1f2		       a9 03		      LDA	#$03
    791  f1f4		       85 04		      STA	NUSIZ0
    792  f1f6		       85 05		      STA	NUSIZ1
    793  f1f8		       85 26		      STA	VDELP1
    794  f1fa		       a9 f0		      LDA	#$F0
    795  f1fc		       85 21		      STA	HMP1
    796  f1fe		       b1 96		      lda	(scorepointers),y
    797  f200		       85 1b		      sta	GRP0
    798  f202		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f204		       4c 10 f2 	      jmp	beginscore
    800  f207
    801  f207
    802  f207				  -	      if	((<*)>$d4)
    803  f207				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f207					      endif
    805  f207
    806  f207				   loop2
    807  f207		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f209		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f20b					      ifconst	pfscore
    810  f20b		       ad f2 00 	      lda.w	pfscore1
    811  f20e		       85 0e		      sta	PF1
    812  f210				  -	      else
    813  f210				  -	      ifconst	scorefade
    814  f210				  -	      sleep	2
    815  f210				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f210				  -	      else
    817  f210				  -	      sleep	7
    818  f210				  -	      endif
    819  f210					      endif
    820  f210							; cycle 0
    821  f210				   beginscore
    822  f210		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f212		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f214		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f216		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f218		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f21a		       9a		      txs
    828  f21b		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f21d				  -	      ifconst	scorefade
    830  f21d				  -	      lda	stack2
    831  f21d					      else
      0  f21d					      sleep	3
      1  f21d				   .CYCLES    SET	3
      2  f21d
      3  f21d				  -	      IF	.CYCLES < 2
      4  f21d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21d				  -	      ERR
      6  f21d					      ENDIF
      7  f21d
      8  f21d					      IF	.CYCLES & 1
      9  f21d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21d		       04 00		      nop	0
     11  f21f				  -	      ELSE
     12  f21f				  -	      bit	VSYNC
     13  f21f					      ENDIF
     14  f21f				   .CYCLES    SET	.CYCLES - 3
     15  f21f					      ENDIF
     16  f21f
     17  f21f				  -	      REPEAT	.CYCLES / 2
     18  f21f				  -	      nop
     19  f21f					      REPEND
    833  f21f					      endif
    834  f21f
    835  f21f					      ifconst	pfscore
    836  f21f		       a5 f3		      lda	pfscore2
    837  f221		       85 0e		      sta	PF1
    838  f223				  -	      else
    839  f223				  -	      ifconst	scorefade
    840  f223				  -	      sta	COLUP0
    841  f223				  -	      sta	COLUP1
    842  f223				  -	      else
    843  f223				  -	      sleep	6
    844  f223				  -	      endif
    845  f223					      endif
    846  f223
    847  f223		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f225		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f227		       ba		      tsx
    850  f228		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f22a		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f22c		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f22e		       88		      dey
    854  f22f		       10 d6		      bpl	loop2	;+2 60 180
    855  f231
    856  f231		       a6 f6		      ldx	stack1
    857  f233		       9a		      txs
    858  f234							; lda scorepointers+1
    859  f234		       a4 9c		      ldy	temp1
    860  f236							; sta temp1
    861  f236		       84 97		      sty	scorepointers+1
    862  f238
    863  f238		       a9 00		      LDA	#0
    864  f23a		       85 0e		      sta	PF1
    865  f23c		       85 1b		      STA	GRP0
    866  f23e		       85 1c		      STA	GRP1
    867  f240		       85 25		      STA	VDELP0
    868  f242		       85 26		      STA	VDELP1	;do we need these
    869  f244		       85 04		      STA	NUSIZ0
    870  f246		       85 05		      STA	NUSIZ1
    871  f248
    872  f248							; lda scorepointers+3
    873  f248		       a4 9e		      ldy	temp3
    874  f24a							; sta temp3
    875  f24a		       84 99		      sty	scorepointers+3
    876  f24c
    877  f24c							; lda scorepointers+5
    878  f24c		       a4 a0		      ldy	temp5
    879  f24e							; sta temp5
    880  f24e		       84 9b		      sty	scorepointers+5
    881  f250					      endif		;noscore
    882  f250				  -	      ifconst	readpaddle
    883  f250				  -	      lda	#%11000010
    884  f250					      else
    885  f250				  -	      ifconst	qtcontroller
    886  f250				  -	      lda	qtcontroller
    887  f250				  -	      lsr		; bit 0 in carry
    888  f250				  -	      lda	#4
    889  f250				  -	      ror		; carry into top of A
    890  f250					      else
    891  f250		       a9 02		      lda	#2
    892  f252					      endif		; qtcontroller
    893  f252					      endif		; readpaddle
    894  f252		       85 02		      sta	WSYNC
    895  f254		       85 01		      sta	VBLANK
      0  f256					      RETURN
      1  f256					      ifnconst	bankswitch
      2  f256		       60		      rts
      3  f257				  -	      else
      4  f257				  -	      jmp	BS_return
      5  f257					      endif
    897  f257				  -	      ifconst	shakescreen
    898  f257				  -doshakescreen
    899  f257				  -	      bit	shakescreen
    900  f257				  -	      bmi	noshakescreen
    901  f257				  -	      sta	WSYNC
    902  f257				  -noshakescreen
    903  f257				  -	      ldx	missile0height
    904  f257				  -	      inx
    905  f257				  -	      rts
    906  f257					      endif
    907  f257
    908  f257							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f257
    910  f257							; playfield drawing routines
    911  f257							; you get a 32x12 bitmapped display in a single color :)
    912  f257							; 0-31 and 0-11
    913  f257
    914  f257				   pfclear		; clears playfield - or fill with pattern
    915  f257				  -	      ifconst	pfres
    916  f257				  -	      ldx	#pfres*pfwidth-1
    917  f257					      else
    918  f257		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f259					      endif
    920  f259				   pfclear_loop
    921  f259					      ifnconst	superchip
    922  f259		       95 a4		      sta	playfield,x
    923  f25b				  -	      else
    924  f25b				  -	      sta	playfield-128,x
    925  f25b					      endif
    926  f25b		       ca		      dex
    927  f25c		       10 fb		      bpl	pfclear_loop
      0  f25e					      RETURN
      1  f25e					      ifnconst	bankswitch
      2  f25e		       60		      rts
      3  f25f				  -	      else
      4  f25f				  -	      jmp	BS_return
      5  f25f					      endif
    929  f25f
    930  f25f				   setuppointers
    931  f25f		       86 9d		      stx	temp2	; store on.off.flip value
    932  f261		       aa		      tax		; put x-value in x 
    933  f262		       4a		      lsr
    934  f263		       4a		      lsr
    935  f264		       4a		      lsr		; divide x pos by 8 
    936  f265		       85 9c		      sta	temp1
    937  f267		       98		      tya
    938  f268		       0a		      asl
    939  f269					      if	pfwidth=4
    940  f269		       0a		      asl		; multiply y pos by 4
    941  f26a					      endif		; else multiply by 2
    942  f26a		       18		      clc
    943  f26b		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f26d		       a8		      tay		; put the value in y
    945  f26e		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f270		       60		      rts
    947  f271
    948  f271				   pfread
    949  f271							;x=xvalue, y=yvalue
    950  f271		       20 5f f2 	      jsr	setuppointers
    951  f274		       bd d9 f2 	      lda	setbyte,x
    952  f277		       39 a4 00 	      and	playfield,y
    953  f27a		       5d d9 f2 	      eor	setbyte,x
    954  f27d							; beq readzero
    955  f27d							; lda #1
    956  f27d							; readzero
      0  f27d					      RETURN
      1  f27d					      ifnconst	bankswitch
      2  f27d		       60		      rts
      3  f27e				  -	      else
      4  f27e				  -	      jmp	BS_return
      5  f27e					      endif
    958  f27e
    959  f27e				   pfpixel
    960  f27e							;x=xvalue, y=yvalue, a=0,1,2
    961  f27e		       20 5f f2 	      jsr	setuppointers
    962  f281
    963  f281				  -	      ifconst	bankswitch
    964  f281				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f281				  -	      beq	pixelon_r	; if "on" go to on
    966  f281				  -	      lsr
    967  f281				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f281				  -	      lda	playfield,y	; if here, it's "flip"
    969  f281				  -	      eor	setbyte,x
    970  f281				  -	      ifconst	superchip
    971  f281				  -	      sta	playfield-128,y
    972  f281				  -	      else
    973  f281				  -	      sta	playfield,y
    974  f281				  -	      endif
    975  f281				  -	      RETURN
    976  f281				  -pixelon_r
    977  f281				  -	      lda	playfield,y
    978  f281				  -	      ora	setbyte,x
    979  f281				  -	      ifconst	superchip
    980  f281				  -	      sta	playfield-128,y
    981  f281				  -	      else
    982  f281				  -	      sta	playfield,y
    983  f281				  -	      endif
    984  f281				  -	      RETURN
    985  f281				  -pixeloff_r
    986  f281				  -	      lda	setbyte,x
    987  f281				  -	      eor	#$ff
    988  f281				  -	      and	playfield,y
    989  f281				  -	      ifconst	superchip
    990  f281				  -	      sta	playfield-128,y
    991  f281				  -	      else
    992  f281				  -	      sta	playfield,y
    993  f281				  -	      endif
    994  f281				  -	      RETURN
    995  f281				  -
    996  f281					      else
    997  f281		       4c b2 f2 	      jmp	plotpoint
    998  f284					      endif
    999  f284
   1000  f284				   pfhline
   1001  f284							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f284		       20 5f f2 	      jsr	setuppointers
   1003  f287		       4c 91 f2 	      jmp	noinc
   1004  f28a				   keepgoing
   1005  f28a		       e8		      inx
   1006  f28b		       8a		      txa
   1007  f28c		       29 07		      and	#7
   1008  f28e		       d0 01		      bne	noinc
   1009  f290		       c8		      iny
   1010  f291				   noinc
   1011  f291		       20 b2 f2 	      jsr	plotpoint
   1012  f294		       e4 9e		      cpx	temp3
   1013  f296		       30 f2		      bmi	keepgoing
      0  f298					      RETURN
      1  f298					      ifnconst	bankswitch
      2  f298		       60		      rts
      3  f299				  -	      else
      4  f299				  -	      jmp	BS_return
      5  f299					      endif
   1015  f299
   1016  f299				   pfvline
   1017  f299							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f299		       20 5f f2 	      jsr	setuppointers
   1019  f29c		       84 9c		      sty	temp1	; store memory location offset
   1020  f29e		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f2a0		       a5 9e		      lda	temp3
   1022  f2a2		       0a		      asl
   1023  f2a3					      if	pfwidth=4
   1024  f2a3		       0a		      asl		; multiply by 4
   1025  f2a4					      endif		; else multiply by 2
   1026  f2a4		       85 9e		      sta	temp3	; store it
   1027  f2a6							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2a6							; right now, temp1=y=starting memory location, temp3=final
   1029  f2a6							; x should equal original x value
   1030  f2a6				   keepgoingy
   1031  f2a6		       20 b2 f2 	      jsr	plotpoint
   1032  f2a9		       c8		      iny
   1033  f2aa		       c8		      iny
   1034  f2ab					      if	pfwidth=4
   1035  f2ab		       c8		      iny
   1036  f2ac		       c8		      iny
   1037  f2ad					      endif
   1038  f2ad		       c4 9e		      cpy	temp3
   1039  f2af		       30 f5		      bmi	keepgoingy
      0  f2b1					      RETURN
      1  f2b1					      ifnconst	bankswitch
      2  f2b1		       60		      rts
      3  f2b2				  -	      else
      4  f2b2				  -	      jmp	BS_return
      5  f2b2					      endif
   1041  f2b2
   1042  f2b2				   plotpoint
   1043  f2b2		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2b4		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2b6		       4a		      lsr
   1046  f2b7		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2b9		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2bc		       5d d9 f2 	      eor	setbyte,x
   1049  f2bf				  -	      ifconst	superchip
   1050  f2bf				  -	      sta	playfield-128,y
   1051  f2bf					      else
   1052  f2bf		       99 a4 00 	      sta	playfield,y
   1053  f2c2					      endif
   1054  f2c2		       60		      rts
   1055  f2c3				   pixelon
   1056  f2c3		       b9 a4 00 	      lda	playfield,y
   1057  f2c6		       1d d9 f2 	      ora	setbyte,x
   1058  f2c9				  -	      ifconst	superchip
   1059  f2c9				  -	      sta	playfield-128,y
   1060  f2c9					      else
   1061  f2c9		       99 a4 00 	      sta	playfield,y
   1062  f2cc					      endif
   1063  f2cc		       60		      rts
   1064  f2cd				   pixeloff
   1065  f2cd		       bd d9 f2 	      lda	setbyte,x
   1066  f2d0		       49 ff		      eor	#$ff
   1067  f2d2		       39 a4 00 	      and	playfield,y
   1068  f2d5				  -	      ifconst	superchip
   1069  f2d5				  -	      sta	playfield-128,y
   1070  f2d5					      else
   1071  f2d5		       99 a4 00 	      sta	playfield,y
   1072  f2d8					      endif
   1073  f2d8		       60		      rts
   1074  f2d9
   1075  f2d9				   setbyte
   1076  f2d9					      ifnconst	pfcenter
   1077  f2d9		       80		      .byte.b	$80
   1078  f2da		       40		      .byte.b	$40
   1079  f2db		       20		      .byte.b	$20
   1080  f2dc		       10		      .byte.b	$10
   1081  f2dd		       08		      .byte.b	$08
   1082  f2de		       04		      .byte.b	$04
   1083  f2df		       02		      .byte.b	$02
   1084  f2e0		       01		      .byte.b	$01
   1085  f2e1					      endif
   1086  f2e1		       01		      .byte.b	$01
   1087  f2e2		       02		      .byte.b	$02
   1088  f2e3		       04		      .byte.b	$04
   1089  f2e4		       08		      .byte.b	$08
   1090  f2e5		       10		      .byte.b	$10
   1091  f2e6		       20		      .byte.b	$20
   1092  f2e7		       40		      .byte.b	$40
   1093  f2e8		       80		      .byte.b	$80
   1094  f2e9		       80		      .byte.b	$80
   1095  f2ea		       40		      .byte.b	$40
   1096  f2eb		       20		      .byte.b	$20
   1097  f2ec		       10		      .byte.b	$10
   1098  f2ed		       08		      .byte.b	$08
   1099  f2ee		       04		      .byte.b	$04
   1100  f2ef		       02		      .byte.b	$02
   1101  f2f0		       01		      .byte.b	$01
   1102  f2f1		       01		      .byte.b	$01
   1103  f2f2		       02		      .byte.b	$02
   1104  f2f3		       04		      .byte.b	$04
   1105  f2f4		       08		      .byte.b	$08
   1106  f2f5		       10		      .byte.b	$10
   1107  f2f6		       20		      .byte.b	$20
   1108  f2f7		       40		      .byte.b	$40
   1109  f2f8		       80		      .byte.b	$80
   1110  f2f9							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f2f9
   1112  f2f9				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f2f9		       d0 13		      bne	notleft
   1114  f2fb							;left
   1115  f2fb				  -	      ifconst	pfres
   1116  f2fb				  -	      ldx	#pfres*4
   1117  f2fb					      else
   1118  f2fb		       a2 30		      ldx	#48
   1119  f2fd					      endif
   1120  f2fd				   leftloop
   1121  f2fd		       b5 a3		      lda	playfield-1,x
   1122  f2ff		       4a		      lsr
   1123  f300
   1124  f300				  -	      ifconst	superchip
   1125  f300				  -	      lda	playfield-2,x
   1126  f300				  -	      rol
   1127  f300				  -	      sta	playfield-130,x
   1128  f300				  -	      lda	playfield-3,x
   1129  f300				  -	      ror
   1130  f300				  -	      sta	playfield-131,x
   1131  f300				  -	      lda	playfield-4,x
   1132  f300				  -	      rol
   1133  f300				  -	      sta	playfield-132,x
   1134  f300				  -	      lda	playfield-1,x
   1135  f300				  -	      ror
   1136  f300				  -	      sta	playfield-129,x
   1137  f300					      else
   1138  f300		       36 a2		      rol	playfield-2,x
   1139  f302		       76 a1		      ror	playfield-3,x
   1140  f304		       36 a0		      rol	playfield-4,x
   1141  f306		       76 a3		      ror	playfield-1,x
   1142  f308					      endif
   1143  f308
   1144  f308		       8a		      txa
   1145  f309		       cb 04		      sbx	#4
   1146  f30b		       d0 f0		      bne	leftloop
      0  f30d					      RETURN
      1  f30d					      ifnconst	bankswitch
      2  f30d		       60		      rts
      3  f30e				  -	      else
      4  f30e				  -	      jmp	BS_return
      5  f30e					      endif
   1148  f30e
   1149  f30e				   notleft
   1150  f30e		       4a		      lsr
   1151  f30f		       90 13		      bcc	notright
   1152  f311							;right
   1153  f311
   1154  f311				  -	      ifconst	pfres
   1155  f311				  -	      ldx	#pfres*4
   1156  f311					      else
   1157  f311		       a2 30		      ldx	#48
   1158  f313					      endif
   1159  f313				   rightloop
   1160  f313		       b5 a0		      lda	playfield-4,x
   1161  f315		       4a		      lsr
   1162  f316				  -	      ifconst	superchip
   1163  f316				  -	      lda	playfield-3,x
   1164  f316				  -	      rol
   1165  f316				  -	      sta	playfield-131,x
   1166  f316				  -	      lda	playfield-2,x
   1167  f316				  -	      ror
   1168  f316				  -	      sta	playfield-130,x
   1169  f316				  -	      lda	playfield-1,x
   1170  f316				  -	      rol
   1171  f316				  -	      sta	playfield-129,x
   1172  f316				  -	      lda	playfield-4,x
   1173  f316				  -	      ror
   1174  f316				  -	      sta	playfield-132,x
   1175  f316					      else
   1176  f316		       36 a1		      rol	playfield-3,x
   1177  f318		       76 a2		      ror	playfield-2,x
   1178  f31a		       36 a3		      rol	playfield-1,x
   1179  f31c		       76 a0		      ror	playfield-4,x
   1180  f31e					      endif
   1181  f31e		       8a		      txa
   1182  f31f		       cb 04		      sbx	#4
   1183  f321		       d0 f0		      bne	rightloop
      0  f323					      RETURN
      1  f323					      ifnconst	bankswitch
      2  f323		       60		      rts
      3  f324				  -	      else
      4  f324				  -	      jmp	BS_return
      5  f324					      endif
   1185  f324
   1186  f324				   notright
   1187  f324		       4a		      lsr
   1188  f325		       90 49		      bcc	notup
   1189  f327							;up
   1190  f327		       4a		      lsr
   1191  f328		       90 02		      bcc	onedecup
   1192  f32a		       c6 ef		      dec	playfieldpos
   1193  f32c				   onedecup
   1194  f32c		       c6 ef		      dec	playfieldpos
   1195  f32e		       f0 02		      beq	shiftdown
   1196  f330		       10 3d		      bpl	noshiftdown2
   1197  f332				   shiftdown
   1198  f332				  -	      ifconst	pfrowheight
   1199  f332				  -	      lda	#pfrowheight
   1200  f332					      else
   1201  f332					      ifnconst	pfres
   1202  f332		       a9 08		      lda	#8
   1203  f334				  -	      else
   1204  f334				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f334					      endif
   1206  f334					      endif
   1207  f334
   1208  f334		       85 ef		      sta	playfieldpos
   1209  f336		       a5 a7		      lda	playfield+3
   1210  f338		       85 9f		      sta	temp4
   1211  f33a		       a5 a6		      lda	playfield+2
   1212  f33c		       85 9e		      sta	temp3
   1213  f33e		       a5 a5		      lda	playfield+1
   1214  f340		       85 9d		      sta	temp2
   1215  f342		       a5 a4		      lda	playfield
   1216  f344		       85 9c		      sta	temp1
   1217  f346		       a2 00		      ldx	#0
   1218  f348				   up2
   1219  f348		       b5 a8		      lda	playfield+4,x
   1220  f34a				  -	      ifconst	superchip
   1221  f34a				  -	      sta	playfield-128,x
   1222  f34a				  -	      lda	playfield+5,x
   1223  f34a				  -	      sta	playfield-127,x
   1224  f34a				  -	      lda	playfield+6,x
   1225  f34a				  -	      sta	playfield-126,x
   1226  f34a				  -	      lda	playfield+7,x
   1227  f34a				  -	      sta	playfield-125,x
   1228  f34a					      else
   1229  f34a		       95 a4		      sta	playfield,x
   1230  f34c		       b5 a9		      lda	playfield+5,x
   1231  f34e		       95 a5		      sta	playfield+1,x
   1232  f350		       b5 aa		      lda	playfield+6,x
   1233  f352		       95 a6		      sta	playfield+2,x
   1234  f354		       b5 ab		      lda	playfield+7,x
   1235  f356		       95 a7		      sta	playfield+3,x
   1236  f358					      endif
   1237  f358		       8a		      txa
   1238  f359		       cb fc		      sbx	#252
   1239  f35b				  -	      ifconst	pfres
   1240  f35b				  -	      cpx	#(pfres-1)*4
   1241  f35b					      else
   1242  f35b		       e0 2c		      cpx	#44
   1243  f35d					      endif
   1244  f35d		       d0 e9		      bne	up2
   1245  f35f
   1246  f35f		       a5 9f		      lda	temp4
   1247  f361
   1248  f361				  -	      ifconst	superchip
   1249  f361				  -	      ifconst	pfres
   1250  f361				  -	      sta	playfield+pfres*4-129
   1251  f361				  -	      lda	temp3
   1252  f361				  -	      sta	playfield+pfres*4-130
   1253  f361				  -	      lda	temp2
   1254  f361				  -	      sta	playfield+pfres*4-131
   1255  f361				  -	      lda	temp1
   1256  f361				  -	      sta	playfield+pfres*4-132
   1257  f361				  -	      else
   1258  f361				  -	      sta	playfield+47-128
   1259  f361				  -	      lda	temp3
   1260  f361				  -	      sta	playfield+46-128
   1261  f361				  -	      lda	temp2
   1262  f361				  -	      sta	playfield+45-128
   1263  f361				  -	      lda	temp1
   1264  f361				  -	      sta	playfield+44-128
   1265  f361				  -	      endif
   1266  f361					      else
   1267  f361				  -	      ifconst	pfres
   1268  f361				  -	      sta	playfield+pfres*4-1
   1269  f361				  -	      lda	temp3
   1270  f361				  -	      sta	playfield+pfres*4-2
   1271  f361				  -	      lda	temp2
   1272  f361				  -	      sta	playfield+pfres*4-3
   1273  f361				  -	      lda	temp1
   1274  f361				  -	      sta	playfield+pfres*4-4
   1275  f361					      else
   1276  f361		       85 d3		      sta	playfield+47
   1277  f363		       a5 9e		      lda	temp3
   1278  f365		       85 d2		      sta	playfield+46
   1279  f367		       a5 9d		      lda	temp2
   1280  f369		       85 d1		      sta	playfield+45
   1281  f36b		       a5 9c		      lda	temp1
   1282  f36d		       85 d0		      sta	playfield+44
   1283  f36f					      endif
   1284  f36f					      endif
   1285  f36f				   noshiftdown2
      0  f36f					      RETURN
      1  f36f					      ifnconst	bankswitch
      2  f36f		       60		      rts
      3  f370				  -	      else
      4  f370				  -	      jmp	BS_return
      5  f370					      endif
   1287  f370
   1288  f370
   1289  f370				   notup
   1290  f370							;down
   1291  f370		       4a		      lsr
   1292  f371		       b0 02		      bcs	oneincup
   1293  f373		       e6 ef		      inc	playfieldpos
   1294  f375				   oneincup
   1295  f375		       e6 ef		      inc	playfieldpos
   1296  f377		       a5 ef		      lda	playfieldpos
   1297  f379
   1298  f379				  -	      ifconst	pfrowheight
   1299  f379				  -	      cmp	#pfrowheight+1
   1300  f379					      else
   1301  f379					      ifnconst	pfres
   1302  f379		       c9 09		      cmp	#9
   1303  f37b				  -	      else
   1304  f37b				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f37b					      endif
   1306  f37b					      endif
   1307  f37b
   1308  f37b		       90 3b		      bcc	noshiftdown
   1309  f37d		       a9 01		      lda	#1
   1310  f37f		       85 ef		      sta	playfieldpos
   1311  f381
   1312  f381				  -	      ifconst	pfres
   1313  f381				  -	      lda	playfield+pfres*4-1
   1314  f381				  -	      sta	temp4
   1315  f381				  -	      lda	playfield+pfres*4-2
   1316  f381				  -	      sta	temp3
   1317  f381				  -	      lda	playfield+pfres*4-3
   1318  f381				  -	      sta	temp2
   1319  f381				  -	      lda	playfield+pfres*4-4
   1320  f381					      else
   1321  f381		       a5 d3		      lda	playfield+47
   1322  f383		       85 9f		      sta	temp4
   1323  f385		       a5 d2		      lda	playfield+46
   1324  f387		       85 9e		      sta	temp3
   1325  f389		       a5 d1		      lda	playfield+45
   1326  f38b		       85 9d		      sta	temp2
   1327  f38d		       a5 d0		      lda	playfield+44
   1328  f38f					      endif
   1329  f38f
   1330  f38f		       85 9c		      sta	temp1
   1331  f391
   1332  f391				  -	      ifconst	pfres
   1333  f391				  -	      ldx	#(pfres-1)*4
   1334  f391					      else
   1335  f391		       a2 2c		      ldx	#44
   1336  f393					      endif
   1337  f393				   down2
   1338  f393		       b5 a3		      lda	playfield-1,x
   1339  f395				  -	      ifconst	superchip
   1340  f395				  -	      sta	playfield-125,x
   1341  f395				  -	      lda	playfield-2,x
   1342  f395				  -	      sta	playfield-126,x
   1343  f395				  -	      lda	playfield-3,x
   1344  f395				  -	      sta	playfield-127,x
   1345  f395				  -	      lda	playfield-4,x
   1346  f395				  -	      sta	playfield-128,x
   1347  f395					      else
   1348  f395		       95 a7		      sta	playfield+3,x
   1349  f397		       b5 a2		      lda	playfield-2,x
   1350  f399		       95 a6		      sta	playfield+2,x
   1351  f39b		       b5 a1		      lda	playfield-3,x
   1352  f39d		       95 a5		      sta	playfield+1,x
   1353  f39f		       b5 a0		      lda	playfield-4,x
   1354  f3a1		       95 a4		      sta	playfield,x
   1355  f3a3					      endif
   1356  f3a3		       8a		      txa
   1357  f3a4		       cb 04		      sbx	#4
   1358  f3a6		       d0 eb		      bne	down2
   1359  f3a8
   1360  f3a8		       a5 9f		      lda	temp4
   1361  f3aa				  -	      ifconst	superchip
   1362  f3aa				  -	      sta	playfield-125
   1363  f3aa				  -	      lda	temp3
   1364  f3aa				  -	      sta	playfield-126
   1365  f3aa				  -	      lda	temp2
   1366  f3aa				  -	      sta	playfield-127
   1367  f3aa				  -	      lda	temp1
   1368  f3aa				  -	      sta	playfield-128
   1369  f3aa					      else
   1370  f3aa		       85 a7		      sta	playfield+3
   1371  f3ac		       a5 9e		      lda	temp3
   1372  f3ae		       85 a6		      sta	playfield+2
   1373  f3b0		       a5 9d		      lda	temp2
   1374  f3b2		       85 a5		      sta	playfield+1
   1375  f3b4		       a5 9c		      lda	temp1
   1376  f3b6		       85 a4		      sta	playfield
   1377  f3b8					      endif
   1378  f3b8				   noshiftdown
      0  f3b8					      RETURN
      1  f3b8					      ifnconst	bankswitch
      2  f3b8		       60		      rts
      3  f3b9				  -	      else
      4  f3b9				  -	      jmp	BS_return
      5  f3b9					      endif
   1380  f3b9							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3b9
   1382  f3b9							;standard routines needed for pretty much all games
   1383  f3b9							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3b9							; repositioning code and score pointer setup moved to overscan
   1385  f3b9							; read switches, joysticks now compiler generated (more efficient)
   1386  f3b9
   1387  f3b9				   randomize
   1388  f3b9		       a5 a2		      lda	rand
   1389  f3bb		       4a		      lsr
   1390  f3bc				  -	      ifconst	rand16
   1391  f3bc				  -	      rol	rand16
   1392  f3bc					      endif
   1393  f3bc		       90 02		      bcc	noeor
   1394  f3be		       49 b4		      eor	#$B4
   1395  f3c0				   noeor
   1396  f3c0		       85 a2		      sta	rand
   1397  f3c2				  -	      ifconst	rand16
   1398  f3c2				  -	      eor	rand16
   1399  f3c2					      endif
      0  f3c2					      RETURN
      1  f3c2					      ifnconst	bankswitch
      2  f3c2		       60		      rts
      3  f3c3				  -	      else
      4  f3c3				  -	      jmp	BS_return
      5  f3c3					      endif
   1401  f3c3							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3c3
   1403  f3c3				   drawscreen
   1404  f3c3				  -	      ifconst	debugscore
   1405  f3c3				  -	      ldx	#14
   1406  f3c3				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3c3				  -
   1408  f3c3				  -	      ifconst	mincycles
   1409  f3c3				  -	      lda	mincycles
   1410  f3c3				  -	      cmp	INTIM
   1411  f3c3				  -	      lda	mincycles
   1412  f3c3				  -	      bcc	nochange
   1413  f3c3				  -	      lda	INTIM
   1414  f3c3				  -	      sta	mincycles
   1415  f3c3				  -nochange
   1416  f3c3				  -	      endif
   1417  f3c3				  -
   1418  f3c3				  -			; cmp #$2B
   1419  f3c3				  -			; bcs no_cycles_left
   1420  f3c3				  -	      bmi	cycles_left
   1421  f3c3				  -	      ldx	#64
   1422  f3c3				  -	      eor	#$ff	;make negative
   1423  f3c3				  -cycles_left
   1424  f3c3				  -	      stx	scorecolor
   1425  f3c3				  -	      and	#$7f	; clear sign bit
   1426  f3c3				  -	      tax
   1427  f3c3				  -	      lda	scorebcd,x
   1428  f3c3				  -	      sta	score+2
   1429  f3c3				  -	      lda	scorebcd1,x
   1430  f3c3				  -	      sta	score+1
   1431  f3c3				  -	      jmp	done_debugscore
   1432  f3c3				  -scorebcd
   1433  f3c3				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3c3				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3c3				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3c3				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3c3				  -scorebcd1
   1438  f3c3				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3c3				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3c3				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3c3				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3c3				  -done_debugscore
   1443  f3c3					      endif
   1444  f3c3
   1445  f3c3				  -	      ifconst	debugcycles
   1446  f3c3				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3c3				  -			; cmp #$2B
   1448  f3c3				  -			; BCC overscan
   1449  f3c3				  -	      bmi	overscan
   1450  f3c3				  -	      sta	COLUBK
   1451  f3c3				  -	      bcs	doneoverscan
   1452  f3c3					      endif
   1453  f3c3
   1454  f3c3				   overscan
   1455  f3c3				  -	      ifconst	interlaced
   1456  f3c3				  -	      PHP
   1457  f3c3				  -	      PLA
   1458  f3c3				  -	      EOR	#4	; flip interrupt bit
   1459  f3c3				  -	      PHA
   1460  f3c3				  -	      PLP
   1461  f3c3				  -	      AND	#4	; isolate the interrupt bit
   1462  f3c3				  -	      TAX		; save it for later
   1463  f3c3					      endif
   1464  f3c3
   1465  f3c3				   overscanloop
   1466  f3c3		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3c6		       30 fb		      bmi	overscanloop
   1468  f3c8				   doneoverscan
   1469  f3c8
   1470  f3c8							;do VSYNC
   1471  f3c8
   1472  f3c8				  -	      ifconst	interlaced
   1473  f3c8				  -	      CPX	#4
   1474  f3c8				  -	      BNE	oddframevsync
   1475  f3c8					      endif
   1476  f3c8
   1477  f3c8		       a9 02		      lda	#2
   1478  f3ca		       85 02		      sta	WSYNC
   1479  f3cc		       85 00		      sta	VSYNC
   1480  f3ce		       85 02		      STA	WSYNC
   1481  f3d0		       85 02		      STA	WSYNC
   1482  f3d2		       4a		      lsr
   1483  f3d3		       85 02		      STA	WSYNC
   1484  f3d5		       85 00		      STA	VSYNC
   1485  f3d7		       85 01		      sta	VBLANK
   1486  f3d9					      ifnconst	overscan_time
   1487  f3d9		       a9 a5		      lda	#37+128
   1488  f3db				  -	      else
   1489  f3db				  -	      lda	#overscan_time+128
   1490  f3db					      endif
   1491  f3db		       8d 96 02 	      sta	TIM64T
   1492  f3de
   1493  f3de				  -	      ifconst	interlaced
   1494  f3de				  -	      jmp	postsync
   1495  f3de				  -
   1496  f3de				  -oddframevsync
   1497  f3de				  -	      sta	WSYNC
   1498  f3de				  -
   1499  f3de				  -	      LDA	($80,X)	; 11 waste
   1500  f3de				  -	      LDA	($80,X)	; 11 waste
   1501  f3de				  -	      LDA	($80,X)	; 11 waste
   1502  f3de				  -
   1503  f3de				  -	      lda	#2
   1504  f3de				  -	      sta	VSYNC
   1505  f3de				  -	      sta	WSYNC
   1506  f3de				  -	      sta	WSYNC
   1507  f3de				  -	      sta	WSYNC
   1508  f3de				  -
   1509  f3de				  -	      LDA	($80,X)	; 11 waste
   1510  f3de				  -	      LDA	($80,X)	; 11 waste
   1511  f3de				  -	      LDA	($80,X)	; 11 waste
   1512  f3de				  -
   1513  f3de				  -	      lda	#0
   1514  f3de				  -	      sta	VSYNC
   1515  f3de				  -	      sta	VBLANK
   1516  f3de				  -	      ifnconst	overscan_time
   1517  f3de				  -	      lda	#37+128
   1518  f3de				  -	      else
   1519  f3de				  -	      lda	#overscan_time+128
   1520  f3de				  -	      endif
   1521  f3de				  -	      sta	TIM64T
   1522  f3de				  -
   1523  f3de				  -postsync
   1524  f3de					      endif
   1525  f3de
   1526  f3de				  -	      ifconst	legacy
   1527  f3de				  -	      if	legacy < 100
   1528  f3de				  -	      ldx	#4
   1529  f3de				  -adjustloop
   1530  f3de				  -	      lda	player0x,x
   1531  f3de				  -	      sec
   1532  f3de				  -	      sbc	#14	;?
   1533  f3de				  -	      sta	player0x,x
   1534  f3de				  -	      dex
   1535  f3de				  -	      bpl	adjustloop
   1536  f3de				  -	      endif
   1537  f3de					      endif
   1538  f3de				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3de				  -	      repeat	($fa-(<*))
   1540  f3de				  -	      nop
   1541  f3de				  -	      repend
   1542  f3de					      endif
   1543  f3de		       85 02		      sta	WSYNC
   1544  f3e0		       a2 04		      ldx	#4
      0  f3e2					      SLEEP	3
      1  f3e2				   .CYCLES    SET	3
      2  f3e2
      3  f3e2				  -	      IF	.CYCLES < 2
      4  f3e2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e2				  -	      ERR
      6  f3e2					      ENDIF
      7  f3e2
      8  f3e2					      IF	.CYCLES & 1
      9  f3e2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e2		       04 00		      nop	0
     11  f3e4				  -	      ELSE
     12  f3e4				  -	      bit	VSYNC
     13  f3e4					      ENDIF
     14  f3e4				   .CYCLES    SET	.CYCLES - 3
     15  f3e4					      ENDIF
     16  f3e4
     17  f3e4				  -	      REPEAT	.CYCLES / 2
     18  f3e4				  -	      nop
     19  f3e4					      REPEND
   1546  f3e4				   HorPosLoop		; 5
   1547  f3e4		       b5 80		      lda	player0x,X	;+4 9
   1548  f3e6		       38		      sec		;+2 11
   1549  f3e7				   DivideLoop
   1550  f3e7		       e9 0f		      sbc	#15
   1551  f3e9		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3eb		       95 9c		      sta	temp1,X	;+4 19
   1553  f3ed		       95 10		      sta	RESP0,X	;+4 23
   1554  f3ef		       85 02		      sta	WSYNC
   1555  f3f1		       ca		      dex
   1556  f3f2		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3f4							; 4
   1558  f3f4
   1559  f3f4		       a2 04		      ldx	#4
   1560  f3f6		       b4 9c		      ldy	temp1,X
   1561  f3f8		       b9 54 f3 	      lda	repostable-256,Y
   1562  f3fb		       95 20		      sta	HMP0,X	;+14 18
   1563  f3fd
   1564  f3fd		       ca		      dex
   1565  f3fe		       b4 9c		      ldy	temp1,X
   1566  f400		       b9 54 f3 	      lda	repostable-256,Y
   1567  f403		       95 20		      sta	HMP0,X	;+14 32
   1568  f405
   1569  f405		       ca		      dex
   1570  f406		       b4 9c		      ldy	temp1,X
   1571  f408		       b9 54 f3 	      lda	repostable-256,Y
   1572  f40b		       95 20		      sta	HMP0,X	;+14 46
   1573  f40d
   1574  f40d		       ca		      dex
   1575  f40e		       b4 9c		      ldy	temp1,X
   1576  f410		       b9 54 f3 	      lda	repostable-256,Y
   1577  f413		       95 20		      sta	HMP0,X	;+14 60
   1578  f415
   1579  f415		       ca		      dex
   1580  f416		       b4 9c		      ldy	temp1,X
   1581  f418		       b9 54 f3 	      lda	repostable-256,Y
   1582  f41b		       95 20		      sta	HMP0,X	;+14 74
   1583  f41d
   1584  f41d		       85 02		      sta	WSYNC
   1585  f41f
   1586  f41f		       85 2a		      sta	HMOVE	;+3 3
   1587  f421
   1588  f421
   1589  f421				  -	      ifconst	legacy
   1590  f421				  -	      if	legacy < 100
   1591  f421				  -	      ldx	#4
   1592  f421				  -adjustloop2
   1593  f421				  -	      lda	player0x,x
   1594  f421				  -	      clc
   1595  f421				  -	      adc	#14	;?
   1596  f421				  -	      sta	player0x,x
   1597  f421				  -	      dex
   1598  f421				  -	      bpl	adjustloop2
   1599  f421				  -	      endif
   1600  f421					      endif
   1601  f421
   1602  f421
   1603  f421
   1604  f421
   1605  f421							;set score pointers
   1606  f421		       a7 95		      lax	score+2
   1607  f423		       20 54 f4 	      jsr	scorepointerset
   1608  f426		       84 9b		      sty	scorepointers+5
   1609  f428		       86 98		      stx	scorepointers+2
   1610  f42a		       a7 94		      lax	score+1
   1611  f42c		       20 54 f4 	      jsr	scorepointerset
   1612  f42f		       84 9a		      sty	scorepointers+4
   1613  f431		       86 97		      stx	scorepointers+1
   1614  f433		       a7 93		      lax	score
   1615  f435		       20 54 f4 	      jsr	scorepointerset
   1616  f438		       84 99		      sty	scorepointers+3
   1617  f43a		       86 96		      stx	scorepointers
   1618  f43c
   1619  f43c				   vblk
   1620  f43c							; run possible vblank bB code
   1621  f43c				  -	      ifconst	vblank_bB_code
   1622  f43c				  -	      jsr	vblank_bB_code
   1623  f43c					      endif
   1624  f43c				   vblk2
   1625  f43c		       ad 84 02 	      LDA	INTIM
   1626  f43f		       30 fb		      bmi	vblk2
   1627  f441		       4c 34 f0 	      jmp	kernel
   1628  f444
   1629  f444
   1630  f444		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f44d		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f454				   repostable
   1633  f454
   1634  f454				   scorepointerset
   1635  f454		       29 0f		      and	#$0F
   1636  f456		       0a		      asl
   1637  f457		       0a		      asl
   1638  f458		       0a		      asl
   1639  f459		       69 9c		      adc	#<scoretable
   1640  f45b		       a8		      tay
   1641  f45c		       8a		      txa
   1642  f45d							; and #$F0
   1643  f45d							; lsr
   1644  f45d		       4b f0		      asr	#$F0
   1645  f45f		       69 9c		      adc	#<scoretable
   1646  f461		       aa		      tax
   1647  f462		       60		      rts
   1648  f463				   game
   1649  f463				   .L00 		;  rem ---------------------------------------------------------------------------------
   1650  f463
   1651  f463				   .L01 		;  rem Shadow Over Space an Atari Game by James Weeks 2025 
   1652  f463
   1653  f463				   .
   1654  f463							; 
   1655  f463
   1656  f463				   .L02 		;  rem ---------------------------------------------------------------------------------  
   1657  f463
   1658  f463				   .L03 		;  set romsize 4k  :  rem set rom size for cartridge and IDE
   1659  f463
   1660  f463				   .
   1661  f463							; 
   1662  f463
   1663  f463				   .L04 		;  rem variables
   1664  f463
   1665  f463				   .L05 		;  rem ----------------------------------------------------------------------------
   1666  f463
   1667  f463				   .L06 		;  c{1} = 0  : rem Turned on if the last location of the joystick was UP
   1668  f463
   1669  f463		       a5 d6		      LDA	c
   1670  f465		       29 fd		      AND	#253
   1671  f467		       85 d6		      STA	c
   1672  f469				   .L07 		;  c{2} = 0  : rem Turned on if the last location of the joystick was DOWN
   1673  f469
   1674  f469		       a5 d6		      LDA	c
   1675  f46b		       29 fb		      AND	#251
   1676  f46d		       85 d6		      STA	c
   1677  f46f				   .L08 		;  c{3} = 0  : rem Turned on if the last location of the joystick was LEFT
   1678  f46f
   1679  f46f		       a5 d6		      LDA	c
   1680  f471		       29 f7		      AND	#247
   1681  f473		       85 d6		      STA	c
   1682  f475				   .L09 		;  c{4} = 1  : rem Turned on if the last location of the joystick was RIGHT
   1683  f475
   1684  f475		       a5 d6		      LDA	c
   1685  f477		       09 10		      ORA	#16
   1686  f479		       85 d6		      STA	c
   1687  f47b				   .L010		;  c{5} = 0  : rem Turned on if the last location of the joystick was UP+LEFT
   1688  f47b
   1689  f47b		       a5 d6		      LDA	c
   1690  f47d		       29 df		      AND	#223
   1691  f47f		       85 d6		      STA	c
   1692  f481				   .L011		;  c{6} = 0  : rem Turned on if the last location of the joystick was UP+RIGHT
   1693  f481
   1694  f481		       a5 d6		      LDA	c
   1695  f483		       29 bf		      AND	#191
   1696  f485		       85 d6		      STA	c
   1697  f487				   .L012		;  c{7} = 0  : rem Turned on if the last location of the joystick was DOWN+LEFT
   1698  f487
   1699  f487		       a5 d6		      LDA	c
   1700  f489		       29 7f		      AND	#127
   1701  f48b		       85 d6		      STA	c
   1702  f48d				   .L013		;  c{0} = 0  : rem Turned on if the last location of the joystick was DOWN+RIGHT
   1703  f48d
   1704  f48d		       a5 d6		      LDA	c
   1705  f48f		       29 fe		      AND	#254
   1706  f491		       85 d6		      STA	c
   1707  f493				   .L014		;  rem ----------------------------------------------------------------------------
   1708  f493
   1709  f493				   .L015		;  e = 20  : rem Counter for limiting travel of fired missile
   1710  f493
   1711  f493		       a9 14		      LDA	#20
   1712  f495		       85 d8		      STA	e
   1713  f497				   .L016		;  w = 0  : rem Used to determine player reflection (REFP1)
   1714  f497
   1715  f497		       a9 00		      LDA	#0
   1716  f499		       85 ea		      STA	w
   1717  f49b				   .L017		;  rem ----------------------------------------------------------------------------
   1718  f49b
   1719  f49b				   .L018		;  f  =  50  :  rem variable for player horizontal position
   1720  f49b
   1721  f49b		       a9 32		      LDA	#50
   1722  f49d		       85 d9		      STA	f
   1723  f49f				   .L019		;  d  =  50  :  rem variable for player vertical position
   1724  f49f
   1725  f49f		       a9 32		      LDA	#50
   1726  f4a1		       85 d7		      STA	d
   1727  f4a3				   .L020		;  g  =  30  :  rem monster position vertical
   1728  f4a3
   1729  f4a3		       a9 1e		      LDA	#30
   1730  f4a5		       85 da		      STA	g
   1731  f4a7				   .L021		;  h  =  90  :  rem monster position horizontal
   1732  f4a7
   1733  f4a7		       a9 5a		      LDA	#90
   1734  f4a9		       85 db		      STA	h
   1735  f4ab				   .L022		;  m  =  0  :	rem counter for monster animation frames
   1736  f4ab
   1737  f4ab		       a9 00		      LDA	#0
   1738  f4ad		       85 e0		      STA	m
   1739  f4af				   .L023		;  n  =  0  :	rem counter for player animation frames
   1740  f4af
   1741  f4af		       a9 00		      LDA	#0
   1742  f4b1		       85 e1		      STA	n
   1743  f4b3				   .L024		;  z  =  0  :	rem Flag to simulate monster ai
   1744  f4b3
   1745  f4b3		       a9 00		      LDA	#0
   1746  f4b5		       85 ed		      STA	z
   1747  f4b7				   .L025		;  k  =  0  :	rem flag for monster missile
   1748  f4b7
   1749  f4b7		       a9 00		      LDA	#0
   1750  f4b9		       85 de		      STA	k
   1751  f4bb				   .L026		;  p  =  10  :  rem flag for monster health
   1752  f4bb
   1753  f4bb		       a9 0a		      LDA	#10
   1754  f4bd		       85 e3		      STA	p
   1755  f4bf				   .L027		;  j  =  4  :	rem flag for player health
   1756  f4bf
   1757  f4bf		       a9 04		      LDA	#4
   1758  f4c1		       85 dd		      STA	j
   1759  f4c3				   .L028		;  s  =  0  :	rem player sprite direction
   1760  f4c3
   1761  f4c3		       a9 00		      LDA	#0
   1762  f4c5		       85 e6		      STA	s
   1763  f4c7				   .L029		;  u  =  0  :	rem win or leveling flag
   1764  f4c7
   1765  f4c7		       a9 00		      LDA	#0
   1766  f4c9		       85 e8		      STA	u
   1767  f4cb				   .
   1768  f4cb							; 
   1769  f4cb
   1770  f4cb				   .L030		;  rem ---------------------------------------------------------------------------------
   1771  f4cb
   1772  f4cb				   .L031		;  dim p0y  =	d  :  rem player vertical position
   1773  f4cb
   1774  f4cb				   .L032		;  dim p0x  =	f  :  rem player horizontal position
   1775  f4cb
   1776  f4cb				   .L033		;  dim p1y  =	g  :  rem set p1y to g, monster vertical position
   1777  f4cb
   1778  f4cb				   .L034		;  dim p1x  =	h  :  rem set p1x to h, moster horizantal position
   1779  f4cb
   1780  f4cb				   .L035		;  dim monsterSprite  =  m  :	rem set variable m, counter fo monster animation frames
   1781  f4cb
   1782  f4cb				   .L036		;  dim playerSprite  =  n  :  rem set variable n, counter fo player animation frames
   1783  f4cb
   1784  f4cb				   .L037		;  dim moved  =  0  :	rem Flag to check if the player moved
   1785  f4cb
   1786  f4cb				   .L038		;  dim winflag  =  u  :  rem win or leveling flag
   1787  f4cb
   1788  f4cb				   .L039		;  dim playerHealth  =  j  :  rem player health
   1789  f4cb
   1790  f4cb				   .L040		;  dim monsterHealth  =  p  :	rem player health
   1791  f4cb
   1792  f4cb				   .L041		;  const pfscore  =  1  :  rem enables health bars
   1793  f4cb
   1794  f4cb				   .L042		;  dim explosion_timer  =  a  :  rem sound, explosion timer
   1795  f4cb
   1796  f4cb				   .L043		;  dim missile1dist  =  0
   1797  f4cb
   1798  f4cb				   .
   1799  f4cb							; 
   1800  f4cb
   1801  f4cb				   .
   1802  f4cb							; 
   1803  f4cb
   1804  f4cb				   .
   1805  f4cb							; 
   1806  f4cb
   1807  f4cb				   .L044		;  scorecolor	=  00  :  rem set the score counter color
   1808  f4cb
   1809  f4cb		       a9 00		      LDA	#00
   1810  f4cd		       85 a3		      STA	scorecolor
   1811  f4cf				   .
   1812  f4cf							; 
   1813  f4cf
   1814  f4cf				   .L045		;  rem ---------------------------------------------------------------------------------
   1815  f4cf
   1816  f4cf				   .L046		;  player0x  =  p0x  :  rem set player position x
   1817  f4cf
   1818  f4cf		       a5 d9		      LDA	p0x
   1819  f4d1		       85 80		      STA	player0x
   1820  f4d3				   .L047		;  player0y  =  p0y  :  rem set player position y
   1821  f4d3
   1822  f4d3		       a5 d7		      LDA	p0y
   1823  f4d5		       85 85		      STA	player0y
   1824  f4d7				   .L048		;  player1y  =  p1y  :  rem set monster position y
   1825  f4d7
   1826  f4d7		       a5 da		      LDA	p1y
   1827  f4d9		       85 86		      STA	player1y
   1828  f4db				   .L049		;  player1x  =  p1x  :  rem set monster position x
   1829  f4db
   1830  f4db		       a5 db		      LDA	p1x
   1831  f4dd		       85 81		      STA	player1x
   1832  f4df				   .
   1833  f4df							; 
   1834  f4df
   1835  f4df				   .L050		;  pfscore1  =  %10101010  :  rem Full health (4 pills)
   1836  f4df
   1837  f4df		       a9 aa		      LDA	#%10101010
   1838  f4e1		       85 f2		      STA	pfscore1
   1839  f4e3				   .L051		;  pfscore2  =  %10101010  :  rem monster health bar
   1840  f4e3
   1841  f4e3		       a9 aa		      LDA	#%10101010
   1842  f4e5		       85 f3		      STA	pfscore2
   1843  f4e7				   .
   1844  f4e7							; 
   1845  f4e7
   1846  f4e7				   .titlescreen
   1847  f4e7							; titlescreen
   1848  f4e7
   1849  f4e7				   .L052		;  rem ---------------------------------------------------------------------------------
   1850  f4e7
   1851  f4e7				   .L053		;  COLUPF =  $A0  +   ( rand  &  3 )	:  rem set the playfield color of title screen 
   1852  f4e7
   1853  f4e7							; complex statement detected
   1854  f4e7		       a9 a0		      LDA	#$A0
   1855  f4e9		       48		      PHA
   1856  f4ea		       20 b9 f3 	      jsr	randomize
   1857  f4ed		       29 03		      AND	#3
   1858  f4ef		       ba		      TSX
   1859  f4f0		       e8		      INX
   1860  f4f1		       9a		      TXS
   1861  f4f2		       18		      CLC
   1862  f4f3		       75 00		      ADC	$00,x
   1863  f4f5		       85 08		      STA	COLUPF
   1864  f4f7				   .
   1865  f4f7							; 
   1866  f4f7
   1867  f4f7				   .L054		;  rem the playfield command draws the X's on the screen.  Must use capital X, must be 32x11.
   1868  f4f7
   1869  f4f7				   .L055		;  playfield:
   1870  f4f7
   1871  f4f7				  -	      ifconst	pfres
   1872  f4f7				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1873  f4f7					      else
   1874  f4f7		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1875  f4f9					      endif
   1876  f4f9		       4c 28 f5 	      jmp	pflabel0
   1877  f4fc				   PF_data0
   1878  f4fc		       fd 6e		      .byte.b	%11111101, %01101110
   1879  f4fe					      if	(pfwidth>2)
   1880  f4fe		       74 fe		      .byte.b	%01110100, %11111110
   1881  f500					      endif
   1882  f500		       85 aa		      .byte.b	%10000101, %10101010
   1883  f502					      if	(pfwidth>2)
   1884  f502		       54 82		      .byte.b	%01010100, %10000010
   1885  f504					      endif
   1886  f504		       f7 ae		      .byte.b	%11110111, %10101110
   1887  f506					      if	(pfwidth>2)
   1888  f506		       54 82		      .byte.b	%01010100, %10000010
   1889  f508					      endif
   1890  f508		       15 aa		      .byte.b	%00010101, %10101010
   1891  f50a					      if	(pfwidth>2)
   1892  f50a		       55 82		      .byte.b	%01010101, %10000010
   1893  f50c					      endif
   1894  f50c		       f5 6a		      .byte.b	%11110101, %01101010
   1895  f50e					      if	(pfwidth>2)
   1896  f50e		       76 83		      .byte.b	%01110110, %10000011
   1897  f510					      endif
   1898  f510		       f7 ee		      .byte.b	%11110111, %11101110
   1899  f512					      if	(pfwidth>2)
   1900  f512		       bf 83		      .byte.b	%10111111, %10000011
   1901  f514					      endif
   1902  f514		       85 2a		      .byte.b	%10000101, %00101010
   1903  f516					      if	(pfwidth>2)
   1904  f516		       20 80		      .byte.b	%00100000, %10000000
   1905  f518					      endif
   1906  f518		       f7 2e		      .byte.b	%11110111, %00101110
   1907  f51a					      if	(pfwidth>2)
   1908  f51a		       3e 80		      .byte.b	%00111110, %10000000
   1909  f51c					      endif
   1910  f51c		       14 2a		      .byte.b	%00010100, %00101010
   1911  f51e					      if	(pfwidth>2)
   1912  f51e		       20 80		      .byte.b	%00100000, %10000000
   1913  f520					      endif
   1914  f520		       f4 ea		      .byte.b	%11110100, %11101010
   1915  f522					      if	(pfwidth>2)
   1916  f522		       bf 83		      .byte.b	%10111111, %10000011
   1917  f524					      endif
   1918  f524		       ff ff		      .byte.b	%11111111, %11111111
   1919  f526					      if	(pfwidth>2)
   1920  f526		       ff ff		      .byte.b	%11111111, %11111111
   1921  f528					      endif
   1922  f528				   pflabel0
   1923  f528		       bd fc f4 	      lda	PF_data0,x
   1924  f52b		       95 a4		      sta	playfield,x
   1925  f52d		       ca		      dex
   1926  f52e		       10 f8		      bpl	pflabel0
   1927  f530				   .
   1928  f530							; 
   1929  f530
   1930  f530				   .L056		;  drawscreen
   1931  f530
   1932  f530		       20 c3 f3 	      jsr	drawscreen
   1933  f533				   .
   1934  f533							; 
   1935  f533
   1936  f533				   .L057		;  if joy0fire then goto main	:  rem if you press fire on the joystick, you'll leave the title screen and start the main program below
   1937  f533
   1938  f533		       24 0c		      bit	INPT4
   1939  f535		       30 03		      BMI	.skipL057
   1940  f537				   .condpart0
   1941  f537		       4c 3d f5 	      jmp	.main
   1942  f53a				   .skipL057
   1943  f53a				   .
   1944  f53a							; 
   1945  f53a
   1946  f53a				   .L058		;  goto titlescreen  :  rem if the joystick button is not pressed, just loop back to the titlescreen again
   1947  f53a
   1948  f53a		       4c e7 f4 	      jmp	.titlescreen
   1949  f53d				   .
   1950  f53d							; 
   1951  f53d
   1952  f53d				   .L059		;  rem ---------------------------------------------------------------------------------
   1953  f53d
   1954  f53d				   .main
   1955  f53d							; main
   1956  f53d
   1957  f53d				   .
   1958  f53d							; 
   1959  f53d
   1960  f53d				   .L060		;  playerSprite  =  playerSprite  +  1  :  rem Increase animation frame counter
   1961  f53d
   1962  f53d		       e6 e1		      INC	playerSprite
   1963  f53f				   .L061		;  if playerSprite  >	30 then playerSprite  =  0  :  rem Reset animation cycle
   1964  f53f
   1965  f53f		       a9 1e		      LDA	#30
   1966  f541		       c5 e1		      CMP	playerSprite
   1967  f543		       b0 04		      BCS	.skipL061
   1968  f545				   .condpart1
   1969  f545		       a9 00		      LDA	#0
   1970  f547		       85 e1		      STA	playerSprite
   1971  f549				   .skipL061
   1972  f549				   .
   1973  f549							; 
   1974  f549
   1975  f549				   .L062		;  if joy0right then s  =  1  :  rem Set direction to right
   1976  f549
   1977  f549		       2c 80 02 	      bit	SWCHA
   1978  f54c		       30 04		      BMI	.skipL062
   1979  f54e				   .condpart2
   1980  f54e		       a9 01		      LDA	#1
   1981  f550		       85 e6		      STA	s
   1982  f552				   .skipL062
   1983  f552				   .L063		;  if joy0left then s	=  0  :  rem Set direction to left
   1984  f552
   1985  f552		       2c 80 02 	      bit	SWCHA
   1986  f555		       70 04		      BVS	.skipL063
   1987  f557				   .condpart3
   1988  f557		       a9 00		      LDA	#0
   1989  f559		       85 e6		      STA	s
   1990  f55b				   .skipL063
   1991  f55b				   .
   1992  f55b							; 
   1993  f55b
   1994  f55b				   .L064		;  rem idle player sprite	     
   1995  f55b
   1996  f55b				   .L065		;  if !joy0left  &&  !joy0right  &&  !joy0up  &&  !joy0down  &&  !joy0fire then player0:
   1997  f55b
   1998  f55b		       2c 80 02 	      bit	SWCHA
   1999  f55e		       50 23		      BVC	.skipL065
   2000  f560				   .condpart4
   2001  f560		       2c 80 02 	      bit	SWCHA
   2002  f563		       10 1e		      BPL	.skip4then
   2003  f565				   .condpart5
   2004  f565		       a9 10		      lda	#$10
   2005  f567		       2c 80 02 	      bit	SWCHA
   2006  f56a		       f0 17		      BEQ	.skip5then
   2007  f56c				   .condpart6
   2008  f56c		       a9 20		      lda	#$20
   2009  f56e		       2c 80 02 	      bit	SWCHA
   2010  f571		       f0 10		      BEQ	.skip6then
   2011  f573				   .condpart7
   2012  f573		       24 0c		      bit	INPT4
   2013  f575		       10 0c		      BPL	.skip7then
   2014  f577				   .condpart8
   2015  f577		       a2 44		      LDX	#<player8then_0
   2016  f579		       86 8a		      STX	player0pointerlo
   2017  f57b		       a9 fe		      LDA	#>player8then_0
   2018  f57d		       85 8b		      STA	player0pointerhi
   2019  f57f		       a9 0a		      LDA	#10
   2020  f581		       85 8e		      STA	player0height
   2021  f583				   .skip7then
   2022  f583				   .skip6then
   2023  f583				   .skip5then
   2024  f583				   .skip4then
   2025  f583				   .skipL065
   2026  f583				   .
   2027  f583							; 
   2028  f583
   2029  f583				   .L066		;  rem  player sprite animation left
   2030  f583
   2031  f583				   .L067		;  if playerSprite  =	10  &&	joy0left then player0: 
   2032  f583
   2033  f583		       a5 e1		      LDA	playerSprite
   2034  f585		       c9 0a		      CMP	#10
   2035  f587		       d0 11		      BNE	.skipL067
   2036  f589				   .condpart9
   2037  f589		       2c 80 02 	      bit	SWCHA
   2038  f58c		       70 0c		      BVS	.skip9then
   2039  f58e				   .condpart10
   2040  f58e		       a2 4f		      LDX	#<player10then_0
   2041  f590		       86 8a		      STX	player0pointerlo
   2042  f592		       a9 fe		      LDA	#>player10then_0
   2043  f594		       85 8b		      STA	player0pointerhi
   2044  f596		       a9 0a		      LDA	#10
   2045  f598		       85 8e		      STA	player0height
   2046  f59a				   .skip9then
   2047  f59a				   .skipL067
   2048  f59a				   .
   2049  f59a							; 
   2050  f59a
   2051  f59a				   .L068		;  if playerSprite  =	20  &&	joy0left then player0: 
   2052  f59a
   2053  f59a		       a5 e1		      LDA	playerSprite
   2054  f59c		       c9 14		      CMP	#20
   2055  f59e		       d0 11		      BNE	.skipL068
   2056  f5a0				   .condpart11
   2057  f5a0		       2c 80 02 	      bit	SWCHA
   2058  f5a3		       70 0c		      BVS	.skip11then
   2059  f5a5				   .condpart12
   2060  f5a5		       a2 5a		      LDX	#<player12then_0
   2061  f5a7		       86 8a		      STX	player0pointerlo
   2062  f5a9		       a9 fe		      LDA	#>player12then_0
   2063  f5ab		       85 8b		      STA	player0pointerhi
   2064  f5ad		       a9 0a		      LDA	#10
   2065  f5af		       85 8e		      STA	player0height
   2066  f5b1				   .skip11then
   2067  f5b1				   .skipL068
   2068  f5b1				   .
   2069  f5b1							; 
   2070  f5b1
   2071  f5b1				   .
   2072  f5b1							; 
   2073  f5b1
   2074  f5b1				   .L069		;  if playerSprite  =	30  &&	joy0left then player0: 
   2075  f5b1
   2076  f5b1		       a5 e1		      LDA	playerSprite
   2077  f5b3		       c9 1e		      CMP	#30
   2078  f5b5		       d0 11		      BNE	.skipL069
   2079  f5b7				   .condpart13
   2080  f5b7		       2c 80 02 	      bit	SWCHA
   2081  f5ba		       70 0c		      BVS	.skip13then
   2082  f5bc				   .condpart14
   2083  f5bc		       a2 65		      LDX	#<player14then_0
   2084  f5be		       86 8a		      STX	player0pointerlo
   2085  f5c0		       a9 fe		      LDA	#>player14then_0
   2086  f5c2		       85 8b		      STA	player0pointerhi
   2087  f5c4		       a9 0a		      LDA	#10
   2088  f5c6		       85 8e		      STA	player0height
   2089  f5c8				   .skip13then
   2090  f5c8				   .skipL069
   2091  f5c8				   .
   2092  f5c8							; 
   2093  f5c8
   2094  f5c8				   .L070		;  rem player sprtite animation left
   2095  f5c8
   2096  f5c8				   .L071		;  if playerSprite  =	10  &&	joy0right then player0: 
   2097  f5c8
   2098  f5c8		       a5 e1		      LDA	playerSprite
   2099  f5ca		       c9 0a		      CMP	#10
   2100  f5cc		       d0 11		      BNE	.skipL071
   2101  f5ce				   .condpart15
   2102  f5ce		       2c 80 02 	      bit	SWCHA
   2103  f5d1		       30 0c		      BMI	.skip15then
   2104  f5d3				   .condpart16
   2105  f5d3		       a2 70		      LDX	#<player16then_0
   2106  f5d5		       86 8a		      STX	player0pointerlo
   2107  f5d7		       a9 fe		      LDA	#>player16then_0
   2108  f5d9		       85 8b		      STA	player0pointerhi
   2109  f5db		       a9 0a		      LDA	#10
   2110  f5dd		       85 8e		      STA	player0height
   2111  f5df				   .skip15then
   2112  f5df				   .skipL071
   2113  f5df				   .
   2114  f5df							; 
   2115  f5df
   2116  f5df				   .L072		;  if playerSprite  =	20  &&	joy0right then player0: 
   2117  f5df
   2118  f5df		       a5 e1		      LDA	playerSprite
   2119  f5e1		       c9 14		      CMP	#20
   2120  f5e3		       d0 11		      BNE	.skipL072
   2121  f5e5				   .condpart17
   2122  f5e5		       2c 80 02 	      bit	SWCHA
   2123  f5e8		       30 0c		      BMI	.skip17then
   2124  f5ea				   .condpart18
   2125  f5ea		       a2 7b		      LDX	#<player18then_0
   2126  f5ec		       86 8a		      STX	player0pointerlo
   2127  f5ee		       a9 fe		      LDA	#>player18then_0
   2128  f5f0		       85 8b		      STA	player0pointerhi
   2129  f5f2		       a9 0a		      LDA	#10
   2130  f5f4		       85 8e		      STA	player0height
   2131  f5f6				   .skip17then
   2132  f5f6				   .skipL072
   2133  f5f6				   .
   2134  f5f6							; 
   2135  f5f6
   2136  f5f6				   .L073		;  if playerSprite  =	30  &&	joy0right then player0: 
   2137  f5f6
   2138  f5f6		       a5 e1		      LDA	playerSprite
   2139  f5f8		       c9 1e		      CMP	#30
   2140  f5fa		       d0 11		      BNE	.skipL073
   2141  f5fc				   .condpart19
   2142  f5fc		       2c 80 02 	      bit	SWCHA
   2143  f5ff		       30 0c		      BMI	.skip19then
   2144  f601				   .condpart20
   2145  f601		       a2 86		      LDX	#<player20then_0
   2146  f603		       86 8a		      STX	player0pointerlo
   2147  f605		       a9 fe		      LDA	#>player20then_0
   2148  f607		       85 8b		      STA	player0pointerhi
   2149  f609		       a9 0a		      LDA	#10
   2150  f60b		       85 8e		      STA	player0height
   2151  f60d				   .skip19then
   2152  f60d				   .skipL073
   2153  f60d				   .
   2154  f60d							; 
   2155  f60d
   2156  f60d				   .
   2157  f60d							; 
   2158  f60d
   2159  f60d				   .L074		;  monsterSprite  =  monsterSprite  +	1  :  rem animation frames for monster
   2160  f60d
   2161  f60d		       e6 e0		      INC	monsterSprite
   2162  f60f				   .L075		;  if monsterSprite  >  30 then monsterSprite	=  0  :  rem Reset animation cycle
   2163  f60f
   2164  f60f		       a9 1e		      LDA	#30
   2165  f611		       c5 e0		      CMP	monsterSprite
   2166  f613		       b0 04		      BCS	.skipL075
   2167  f615				   .condpart21
   2168  f615		       a9 00		      LDA	#0
   2169  f617		       85 e0		      STA	monsterSprite
   2170  f619				   .skipL075
   2171  f619				   .
   2172  f619							; 
   2173  f619
   2174  f619				   .L076		;  rem monster stage 1
   2175  f619
   2176  f619				   .L077		;  if monsterSprite  =  10  &&  winflag  =  0 then player1: 
   2177  f619
   2178  f619		       a5 e0		      LDA	monsterSprite
   2179  f61b		       c9 0a		      CMP	#10
   2180  f61d		       d0 12		      BNE	.skipL077
   2181  f61f				   .condpart22
   2182  f61f		       a5 e8		      LDA	winflag
   2183  f621		       c9 00		      CMP	#0
   2184  f623		       d0 0c		      BNE	.skip22then
   2185  f625				   .condpart23
   2186  f625		       a2 91		      LDX	#<player23then_1
   2187  f627		       86 8c		      STX	player1pointerlo
   2188  f629		       a9 fe		      LDA	#>player23then_1
   2189  f62b		       85 8d		      STA	player1pointerhi
   2190  f62d		       a9 17		      LDA	#23
   2191  f62f		       85 8f		      STA	player1height
   2192  f631				   .skip22then
   2193  f631				   .skipL077
   2194  f631				   .
   2195  f631							; 
   2196  f631
   2197  f631				   .L078		;  if monsterSprite  =  20  &&  winflag  =  0 then player1:
   2198  f631
   2199  f631		       a5 e0		      LDA	monsterSprite
   2200  f633		       c9 14		      CMP	#20
   2201  f635		       d0 12		      BNE	.skipL078
   2202  f637				   .condpart24
   2203  f637		       a5 e8		      LDA	winflag
   2204  f639		       c9 00		      CMP	#0
   2205  f63b		       d0 0c		      BNE	.skip24then
   2206  f63d				   .condpart25
   2207  f63d		       a2 a9		      LDX	#<player25then_1
   2208  f63f		       86 8c		      STX	player1pointerlo
   2209  f641		       a9 fe		      LDA	#>player25then_1
   2210  f643		       85 8d		      STA	player1pointerhi
   2211  f645		       a9 17		      LDA	#23
   2212  f647		       85 8f		      STA	player1height
   2213  f649				   .skip24then
   2214  f649				   .skipL078
   2215  f649				   .
   2216  f649							; 
   2217  f649
   2218  f649				   .L079		;  if monsterSprite  =  30  &&  winflag  =  0 then player1:
   2219  f649
   2220  f649		       a5 e0		      LDA	monsterSprite
   2221  f64b		       c9 1e		      CMP	#30
   2222  f64d		       d0 12		      BNE	.skipL079
   2223  f64f				   .condpart26
   2224  f64f		       a5 e8		      LDA	winflag
   2225  f651		       c9 00		      CMP	#0
   2226  f653		       d0 0c		      BNE	.skip26then
   2227  f655				   .condpart27
   2228  f655		       a2 c1		      LDX	#<player27then_1
   2229  f657		       86 8c		      STX	player1pointerlo
   2230  f659		       a9 fe		      LDA	#>player27then_1
   2231  f65b		       85 8d		      STA	player1pointerhi
   2232  f65d		       a9 17		      LDA	#23
   2233  f65f		       85 8f		      STA	player1height
   2234  f661				   .skip26then
   2235  f661				   .skipL079
   2236  f661				   .L080		;  rem monster stage 2
   2237  f661
   2238  f661				   .L081		;  if monsterSprite  =  10  &&  winflag  =  1 then player1: 
   2239  f661
   2240  f661		       a5 e0		      LDA	monsterSprite
   2241  f663		       c9 0a		      CMP	#10
   2242  f665		       d0 12		      BNE	.skipL081
   2243  f667				   .condpart28
   2244  f667		       a5 e8		      LDA	winflag
   2245  f669		       c9 01		      CMP	#1
   2246  f66b		       d0 0c		      BNE	.skip28then
   2247  f66d				   .condpart29
   2248  f66d		       a2 d9		      LDX	#<player29then_1
   2249  f66f		       86 8c		      STX	player1pointerlo
   2250  f671		       a9 fe		      LDA	#>player29then_1
   2251  f673		       85 8d		      STA	player1pointerhi
   2252  f675		       a9 17		      LDA	#23
   2253  f677		       85 8f		      STA	player1height
   2254  f679				   .skip28then
   2255  f679				   .skipL081
   2256  f679				   .
   2257  f679							; 
   2258  f679
   2259  f679				   .L082		;  if monsterSprite  =  20  &&  winflag  =  1 then player1:
   2260  f679
   2261  f679		       a5 e0		      LDA	monsterSprite
   2262  f67b		       c9 14		      CMP	#20
   2263  f67d		       d0 12		      BNE	.skipL082
   2264  f67f				   .condpart30
   2265  f67f		       a5 e8		      LDA	winflag
   2266  f681		       c9 01		      CMP	#1
   2267  f683		       d0 0c		      BNE	.skip30then
   2268  f685				   .condpart31
   2269  f685		       a2 00		      LDX	#<player31then_1
   2270  f687		       86 8c		      STX	player1pointerlo
   2271  f689		       a9 ff		      LDA	#>player31then_1
   2272  f68b		       85 8d		      STA	player1pointerhi
   2273  f68d		       a9 17		      LDA	#23
   2274  f68f		       85 8f		      STA	player1height
   2275  f691				   .skip30then
   2276  f691				   .skipL082
   2277  f691				   .
   2278  f691							; 
   2279  f691
   2280  f691				   .L083		;  if monsterSprite  =  30  &&  winflag  =  1 then player1:
   2281  f691
   2282  f691		       a5 e0		      LDA	monsterSprite
   2283  f693		       c9 1e		      CMP	#30
   2284  f695		       d0 12		      BNE	.skipL083
   2285  f697				   .condpart32
   2286  f697		       a5 e8		      LDA	winflag
   2287  f699		       c9 01		      CMP	#1
   2288  f69b		       d0 0c		      BNE	.skip32then
   2289  f69d				   .condpart33
   2290  f69d		       a2 18		      LDX	#<player33then_1
   2291  f69f		       86 8c		      STX	player1pointerlo
   2292  f6a1		       a9 ff		      LDA	#>player33then_1
   2293  f6a3		       85 8d		      STA	player1pointerhi
   2294  f6a5		       a9 17		      LDA	#23
   2295  f6a7		       85 8f		      STA	player1height
   2296  f6a9				   .skip32then
   2297  f6a9				   .skipL083
   2298  f6a9				   .
   2299  f6a9							; 
   2300  f6a9
   2301  f6a9				   .L084		;  rem monster stage 3
   2302  f6a9
   2303  f6a9				   .L085		;  if monsterSprite  =  10  &&  winflag  =  2 then player1: 
   2304  f6a9
   2305  f6a9		       a5 e0		      LDA	monsterSprite
   2306  f6ab		       c9 0a		      CMP	#10
   2307  f6ad		       d0 12		      BNE	.skipL085
   2308  f6af				   .condpart34
   2309  f6af		       a5 e8		      LDA	winflag
   2310  f6b1		       c9 02		      CMP	#2
   2311  f6b3		       d0 0c		      BNE	.skip34then
   2312  f6b5				   .condpart35
   2313  f6b5		       a2 30		      LDX	#<player35then_1
   2314  f6b7		       86 8c		      STX	player1pointerlo
   2315  f6b9		       a9 ff		      LDA	#>player35then_1
   2316  f6bb		       85 8d		      STA	player1pointerhi
   2317  f6bd		       a9 17		      LDA	#23
   2318  f6bf		       85 8f		      STA	player1height
   2319  f6c1				   .skip34then
   2320  f6c1				   .skipL085
   2321  f6c1				   .
   2322  f6c1							; 
   2323  f6c1
   2324  f6c1				   .L086		;  if monsterSprite  =  20  &&  winflag  =  2 then player1:
   2325  f6c1
   2326  f6c1		       a5 e0		      LDA	monsterSprite
   2327  f6c3		       c9 14		      CMP	#20
   2328  f6c5		       d0 12		      BNE	.skipL086
   2329  f6c7				   .condpart36
   2330  f6c7		       a5 e8		      LDA	winflag
   2331  f6c9		       c9 02		      CMP	#2
   2332  f6cb		       d0 0c		      BNE	.skip36then
   2333  f6cd				   .condpart37
   2334  f6cd		       a2 48		      LDX	#<player37then_1
   2335  f6cf		       86 8c		      STX	player1pointerlo
   2336  f6d1		       a9 ff		      LDA	#>player37then_1
   2337  f6d3		       85 8d		      STA	player1pointerhi
   2338  f6d5		       a9 17		      LDA	#23
   2339  f6d7		       85 8f		      STA	player1height
   2340  f6d9				   .skip36then
   2341  f6d9				   .skipL086
   2342  f6d9				   .
   2343  f6d9							; 
   2344  f6d9
   2345  f6d9				   .L087		;  if monsterSprite  =  30  &&  winflag  =  2 then player1:
   2346  f6d9
   2347  f6d9		       a5 e0		      LDA	monsterSprite
   2348  f6db		       c9 1e		      CMP	#30
   2349  f6dd		       d0 12		      BNE	.skipL087
   2350  f6df				   .condpart38
   2351  f6df		       a5 e8		      LDA	winflag
   2352  f6e1		       c9 02		      CMP	#2
   2353  f6e3		       d0 0c		      BNE	.skip38then
   2354  f6e5				   .condpart39
   2355  f6e5		       a2 60		      LDX	#<player39then_1
   2356  f6e7		       86 8c		      STX	player1pointerlo
   2357  f6e9		       a9 ff		      LDA	#>player39then_1
   2358  f6eb		       85 8d		      STA	player1pointerhi
   2359  f6ed		       a9 17		      LDA	#23
   2360  f6ef		       85 8f		      STA	player1height
   2361  f6f1				   .skip38then
   2362  f6f1				   .skipL087
   2363  f6f1				   .
   2364  f6f1							; 
   2365  f6f1
   2366  f6f1				   .
   2367  f6f1							; 
   2368  f6f1
   2369  f6f1				   .L088		;  rem ---------------------------------------------------------------------------------
   2370  f6f1
   2371  f6f1				   .L089		;  if winflag	=  0 then playfield:
   2372  f6f1
   2373  f6f1		       a5 e8		      LDA	winflag
   2374  f6f3		       c9 00		      CMP	#0
   2375  f6f5		       d0 39		      BNE	.skipL089
   2376  f6f7				   .condpart40
   2377  f6f7				  -	      ifconst	pfres
   2378  f6f7				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2379  f6f7					      else
   2380  f6f7		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2381  f6f9					      endif
   2382  f6f9		       4c 28 f7 	      jmp	pflabel1
   2383  f6fc				   PF_data1
   2384  f6fc		       7f ff		      .byte.b	%01111111, %11111111
   2385  f6fe					      if	(pfwidth>2)
   2386  f6fe		       ff 7f		      .byte.b	%11111111, %01111111
   2387  f700					      endif
   2388  f700		       80 00		      .byte.b	%10000000, %00000000
   2389  f702					      if	(pfwidth>2)
   2390  f702		       00 80		      .byte.b	%00000000, %10000000
   2391  f704					      endif
   2392  f704		       80 00		      .byte.b	%10000000, %00000000
   2393  f706					      if	(pfwidth>2)
   2394  f706		       00 80		      .byte.b	%00000000, %10000000
   2395  f708					      endif
   2396  f708		       80 00		      .byte.b	%10000000, %00000000
   2397  f70a					      if	(pfwidth>2)
   2398  f70a		       00 80		      .byte.b	%00000000, %10000000
   2399  f70c					      endif
   2400  f70c		       80 00		      .byte.b	%10000000, %00000000
   2401  f70e					      if	(pfwidth>2)
   2402  f70e		       00 80		      .byte.b	%00000000, %10000000
   2403  f710					      endif
   2404  f710		       80 00		      .byte.b	%10000000, %00000000
   2405  f712					      if	(pfwidth>2)
   2406  f712		       00 80		      .byte.b	%00000000, %10000000
   2407  f714					      endif
   2408  f714		       80 00		      .byte.b	%10000000, %00000000
   2409  f716					      if	(pfwidth>2)
   2410  f716		       00 80		      .byte.b	%00000000, %10000000
   2411  f718					      endif
   2412  f718		       80 36		      .byte.b	%10000000, %00110110
   2413  f71a					      if	(pfwidth>2)
   2414  f71a		       00 80		      .byte.b	%00000000, %10000000
   2415  f71c					      endif
   2416  f71c		       90 36		      .byte.b	%10010000, %00110110
   2417  f71e					      if	(pfwidth>2)
   2418  f71e		       20 84		      .byte.b	%00100000, %10000100
   2419  f720					      endif
   2420  f720		       da 36		      .byte.b	%11011010, %00110110
   2421  f722					      if	(pfwidth>2)
   2422  f722		       a9 a6		      .byte.b	%10101001, %10100110
   2423  f724					      endif
   2424  f724		       7f ff		      .byte.b	%01111111, %11111111
   2425  f726					      if	(pfwidth>2)
   2426  f726		       ff 7f		      .byte.b	%11111111, %01111111
   2427  f728					      endif
   2428  f728				   pflabel1
   2429  f728		       bd fc f6 	      lda	PF_data1,x
   2430  f72b		       95 a4		      sta	playfield,x
   2431  f72d		       ca		      dex
   2432  f72e		       10 f8		      bpl	pflabel1
   2433  f730				   .skipL089
   2434  f730				   .
   2435  f730							; 
   2436  f730
   2437  f730				   .
   2438  f730							; 
   2439  f730
   2440  f730				   .
   2441  f730							; 
   2442  f730
   2443  f730				   .L090		;  if winflag	=  1 then playfield:
   2444  f730
   2445  f730		       a5 e8		      LDA	winflag
   2446  f732		       c9 01		      CMP	#1
   2447  f734		       d0 39		      BNE	.skipL090
   2448  f736				   .condpart41
   2449  f736				  -	      ifconst	pfres
   2450  f736				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2451  f736					      else
   2452  f736		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2453  f738					      endif
   2454  f738		       4c 67 f7 	      jmp	pflabel2
   2455  f73b				   PF_data2
   2456  f73b		       7f ff		      .byte.b	%01111111, %11111111
   2457  f73d					      if	(pfwidth>2)
   2458  f73d		       ff 7f		      .byte.b	%11111111, %01111111
   2459  f73f					      endif
   2460  f73f		       80 00		      .byte.b	%10000000, %00000000
   2461  f741					      if	(pfwidth>2)
   2462  f741		       00 80		      .byte.b	%00000000, %10000000
   2463  f743					      endif
   2464  f743		       80 00		      .byte.b	%10000000, %00000000
   2465  f745					      if	(pfwidth>2)
   2466  f745		       00 80		      .byte.b	%00000000, %10000000
   2467  f747					      endif
   2468  f747		       80 00		      .byte.b	%10000000, %00000000
   2469  f749					      if	(pfwidth>2)
   2470  f749		       00 80		      .byte.b	%00000000, %10000000
   2471  f74b					      endif
   2472  f74b		       80 00		      .byte.b	%10000000, %00000000
   2473  f74d					      if	(pfwidth>2)
   2474  f74d		       00 80		      .byte.b	%00000000, %10000000
   2475  f74f					      endif
   2476  f74f		       80 00		      .byte.b	%10000000, %00000000
   2477  f751					      if	(pfwidth>2)
   2478  f751		       00 80		      .byte.b	%00000000, %10000000
   2479  f753					      endif
   2480  f753		       80 00		      .byte.b	%10000000, %00000000
   2481  f755					      if	(pfwidth>2)
   2482  f755		       00 80		      .byte.b	%00000000, %10000000
   2483  f757					      endif
   2484  f757		       80 00		      .byte.b	%10000000, %00000000
   2485  f759					      if	(pfwidth>2)
   2486  f759		       00 80		      .byte.b	%00000000, %10000000
   2487  f75b					      endif
   2488  f75b		       81 02		      .byte.b	%10000001, %00000010
   2489  f75d					      if	(pfwidth>2)
   2490  f75d		       08 80		      .byte.b	%00001000, %10000000
   2491  f75f					      endif
   2492  f75f		       a9 52		      .byte.b	%10101001, %01010010
   2493  f761					      if	(pfwidth>2)
   2494  f761		       1c c0		      .byte.b	%00011100, %11000000
   2495  f763					      endif
   2496  f763		       7f ff		      .byte.b	%01111111, %11111111
   2497  f765					      if	(pfwidth>2)
   2498  f765		       ff 7f		      .byte.b	%11111111, %01111111
   2499  f767					      endif
   2500  f767				   pflabel2
   2501  f767		       bd 3b f7 	      lda	PF_data2,x
   2502  f76a		       95 a4		      sta	playfield,x
   2503  f76c		       ca		      dex
   2504  f76d		       10 f8		      bpl	pflabel2
   2505  f76f				   .skipL090
   2506  f76f				   .
   2507  f76f							; 
   2508  f76f
   2509  f76f				   .L091		;  if winflag	=  2 then playfield:
   2510  f76f
   2511  f76f		       a5 e8		      LDA	winflag
   2512  f771		       c9 02		      CMP	#2
   2513  f773		       d0 39		      BNE	.skipL091
   2514  f775				   .condpart42
   2515  f775				  -	      ifconst	pfres
   2516  f775				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2517  f775					      else
   2518  f775		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2519  f777					      endif
   2520  f777		       4c a6 f7 	      jmp	pflabel3
   2521  f77a				   PF_data3
   2522  f77a		       7f ff		      .byte.b	%01111111, %11111111
   2523  f77c					      if	(pfwidth>2)
   2524  f77c		       ff 7f		      .byte.b	%11111111, %01111111
   2525  f77e					      endif
   2526  f77e		       99 7f		      .byte.b	%10011001, %01111111
   2527  f780					      if	(pfwidth>2)
   2528  f780		       00 ff		      .byte.b	%00000000, %11111111
   2529  f782					      endif
   2530  f782		       98 00		      .byte.b	%10011000, %00000000
   2531  f784					      if	(pfwidth>2)
   2532  f784		       00 c4		      .byte.b	%00000000, %11000100
   2533  f786					      endif
   2534  f786		       80 00		      .byte.b	%10000000, %00000000
   2535  f788					      if	(pfwidth>2)
   2536  f788		       00 80		      .byte.b	%00000000, %10000000
   2537  f78a					      endif
   2538  f78a		       80 00		      .byte.b	%10000000, %00000000
   2539  f78c					      if	(pfwidth>2)
   2540  f78c		       00 80		      .byte.b	%00000000, %10000000
   2541  f78e					      endif
   2542  f78e		       80 00		      .byte.b	%10000000, %00000000
   2543  f790					      if	(pfwidth>2)
   2544  f790		       00 80		      .byte.b	%00000000, %10000000
   2545  f792					      endif
   2546  f792		       80 00		      .byte.b	%10000000, %00000000
   2547  f794					      if	(pfwidth>2)
   2548  f794		       00 80		      .byte.b	%00000000, %10000000
   2549  f796					      endif
   2550  f796		       88 00		      .byte.b	%10001000, %00000000
   2551  f798					      if	(pfwidth>2)
   2552  f798		       07 81		      .byte.b	%00000111, %10000001
   2553  f79a					      endif
   2554  f79a		       80 00		      .byte.b	%10000000, %00000000
   2555  f79c					      if	(pfwidth>2)
   2556  f79c		       07 81		      .byte.b	%00000111, %10000001
   2557  f79e					      endif
   2558  f79e		       f8 7c		      .byte.b	%11111000, %01111100
   2559  f7a0					      if	(pfwidth>2)
   2560  f7a0		       07 e5		      .byte.b	%00000111, %11100101
   2561  f7a2					      endif
   2562  f7a2		       7f ff		      .byte.b	%01111111, %11111111
   2563  f7a4					      if	(pfwidth>2)
   2564  f7a4		       ff 7f		      .byte.b	%11111111, %01111111
   2565  f7a6					      endif
   2566  f7a6				   pflabel3
   2567  f7a6		       bd 7a f7 	      lda	PF_data3,x
   2568  f7a9		       95 a4		      sta	playfield,x
   2569  f7ab		       ca		      dex
   2570  f7ac		       10 f8		      bpl	pflabel3
   2571  f7ae				   .skipL091
   2572  f7ae				   .
   2573  f7ae							; 
   2574  f7ae
   2575  f7ae				   .
   2576  f7ae							; 
   2577  f7ae
   2578  f7ae				   .L092		;  rem ---------------------------------------------------------------------------------
   2579  f7ae
   2580  f7ae				   .L093		;  COLUP0 =  $70  +   ( rand  &  7 )	:  rem PLAYER COLUP0=<xx> sets the color of the player 0 sprite. Valid range is 0-254 , randomizes colors 
   2581  f7ae
   2582  f7ae							; complex statement detected
   2583  f7ae		       a9 70		      LDA	#$70
   2584  f7b0		       48		      PHA
   2585  f7b1		       20 b9 f3 	      jsr	randomize
   2586  f7b4		       29 07		      AND	#7
   2587  f7b6		       ba		      TSX
   2588  f7b7		       e8		      INX
   2589  f7b8		       9a		      TXS
   2590  f7b9		       18		      CLC
   2591  f7ba		       75 00		      ADC	$00,x
   2592  f7bc		       85 06		      STA	COLUP0
   2593  f7be				   .L094		;  COLUP1  =  $C0  +	( rand	&  7 )	 :  rem MONSTER COLUP0=<xx> sets the color of the player 0 sprite. Valid range is 0-254 , randomizes colors 
   2594  f7be
   2595  f7be							; complex statement detected
   2596  f7be		       a9 c0		      LDA	#$C0
   2597  f7c0		       48		      PHA
   2598  f7c1		       20 b9 f3 	      jsr	randomize
   2599  f7c4		       29 07		      AND	#7
   2600  f7c6		       ba		      TSX
   2601  f7c7		       e8		      INX
   2602  f7c8		       9a		      TXS
   2603  f7c9		       18		      CLC
   2604  f7ca		       75 00		      ADC	$00,x
   2605  f7cc		       85 07		      STA	COLUP1
   2606  f7ce				   .L095		;  COLUPF  =  $A0  +	( rand	&  7 )	 :  rem PLAYFIELD You need to set a color for the playfield
   2607  f7ce
   2608  f7ce							; complex statement detected
   2609  f7ce		       a9 a0		      LDA	#$A0
   2610  f7d0		       48		      PHA
   2611  f7d1		       20 b9 f3 	      jsr	randomize
   2612  f7d4		       29 07		      AND	#7
   2613  f7d6		       ba		      TSX
   2614  f7d7		       e8		      INX
   2615  f7d8		       9a		      TXS
   2616  f7d9		       18		      CLC
   2617  f7da		       75 00		      ADC	$00,x
   2618  f7dc		       85 08		      STA	COLUPF
   2619  f7de				   .L096		;  COLUBK  =  00  :  rem BACKGROUND BALCK Change the background color with COLUBK
   2620  f7de
   2621  f7de		       a9 00		      LDA	#00
   2622  f7e0		       85 09		      STA	COLUBK
   2623  f7e2				   .L097		;  pfscorecolor  =  65  +   ( rand  &	7 )   :  rem Set the health bar color to green	 
   2624  f7e2
   2625  f7e2							; complex statement detected
   2626  f7e2		       a9 41		      LDA	#65
   2627  f7e4		       48		      PHA
   2628  f7e5		       20 b9 f3 	      jsr	randomize
   2629  f7e8		       29 07		      AND	#7
   2630  f7ea		       ba		      TSX
   2631  f7eb		       e8		      INX
   2632  f7ec		       9a		      TXS
   2633  f7ed		       18		      CLC
   2634  f7ee		       75 00		      ADC	$00,x
   2635  f7f0		       85 f4		      STA	pfscorecolor
   2636  f7f2				   .L098		;  rem ---------------------------------------------------------------------------------
   2637  f7f2
   2638  f7f2				   .
   2639  f7f2							; 
   2640  f7f2
   2641  f7f2				   .L099		;  if collision(missile1,player0) then player1x  =   ( rand  &  63 )	+  40  :  player0y  =	( rand	&  31 )   +  30  :  COLUBK  =  $46  +	( rand	&  2 )	 :  playerHealth  =  playerHealth  -  1  :  AUDV0  =  15  :  AUDC0  =  10  :  AUDF0  =	6  :  explosion_timer  =  30
   2642  f7f2
   2643  f7f2		       24 01		      bit	CXM1P
   2644  f7f4		       10 36		      BPL	.skipL099
   2645  f7f6				   .condpart43
   2646  f7f6							; complex statement detected
   2647  f7f6		       20 b9 f3 	      jsr	randomize
   2648  f7f9		       29 3f		      AND	#63
   2649  f7fb		       18		      CLC
   2650  f7fc		       69 28		      ADC	#40
   2651  f7fe		       85 81		      STA	player1x
   2652  f800							; complex statement detected
   2653  f800		       20 b9 f3 	      jsr	randomize
   2654  f803		       29 1f		      AND	#31
   2655  f805		       18		      CLC
   2656  f806		       69 1e		      ADC	#30
   2657  f808		       85 85		      STA	player0y
   2658  f80a							; complex statement detected
   2659  f80a		       a9 46		      LDA	#$46
   2660  f80c		       48		      PHA
   2661  f80d		       20 b9 f3 	      jsr	randomize
   2662  f810		       29 02		      AND	#2
   2663  f812		       ba		      TSX
   2664  f813		       e8		      INX
   2665  f814		       9a		      TXS
   2666  f815		       18		      CLC
   2667  f816		       75 00		      ADC	$00,x
   2668  f818		       85 09		      STA	COLUBK
   2669  f81a		       c6 dd		      DEC	playerHealth
   2670  f81c		       a9 0f		      LDA	#15
   2671  f81e		       85 19		      STA	AUDV0
   2672  f820		       a9 0a		      LDA	#10
   2673  f822		       85 15		      STA	AUDC0
   2674  f824		       a9 06		      LDA	#6
   2675  f826		       85 17		      STA	AUDF0
   2676  f828		       a9 1e		      LDA	#30
   2677  f82a		       85 d4		      STA	explosion_timer
   2678  f82c				   .skipL099
   2679  f82c				   .L0100		;  if collision(missile0,player1) then player1x  =   ( rand  &  63 )	+  40  :  player1y  =	( rand	&  31 )   +  30  :  missile1y  =   ( rand  &  31 )   +	30  :  monsterHealth  =  monsterHealth	-  1  :  COLUBK  =  $46  +   ( rand  &	2 )   :  AUDV0	=  15  :  AUDC0  =  10	:  AUDF0  =  6	:  explosion_timer  =  30
   2680  f82c
   2681  f82c		       24 00		      bit	CXM0P
   2682  f82e		       10 40		      BPL	.skipL0100
   2683  f830				   .condpart44
   2684  f830							; complex statement detected
   2685  f830		       20 b9 f3 	      jsr	randomize
   2686  f833		       29 3f		      AND	#63
   2687  f835		       18		      CLC
   2688  f836		       69 28		      ADC	#40
   2689  f838		       85 81		      STA	player1x
   2690  f83a							; complex statement detected
   2691  f83a		       20 b9 f3 	      jsr	randomize
   2692  f83d		       29 1f		      AND	#31
   2693  f83f		       18		      CLC
   2694  f840		       69 1e		      ADC	#30
   2695  f842		       85 86		      STA	player1y
   2696  f844							; complex statement detected
   2697  f844		       20 b9 f3 	      jsr	randomize
   2698  f847		       29 1f		      AND	#31
   2699  f849		       18		      CLC
   2700  f84a		       69 1e		      ADC	#30
   2701  f84c		       85 88		      STA	missile1y
   2702  f84e		       c6 e3		      DEC	monsterHealth
   2703  f850							; complex statement detected
   2704  f850		       a9 46		      LDA	#$46
   2705  f852		       48		      PHA
   2706  f853		       20 b9 f3 	      jsr	randomize
   2707  f856		       29 02		      AND	#2
   2708  f858		       ba		      TSX
   2709  f859		       e8		      INX
   2710  f85a		       9a		      TXS
   2711  f85b		       18		      CLC
   2712  f85c		       75 00		      ADC	$00,x
   2713  f85e		       85 09		      STA	COLUBK
   2714  f860		       a9 0f		      LDA	#15
   2715  f862		       85 19		      STA	AUDV0
   2716  f864		       a9 0a		      LDA	#10
   2717  f866		       85 15		      STA	AUDC0
   2718  f868		       a9 06		      LDA	#6
   2719  f86a		       85 17		      STA	AUDF0
   2720  f86c		       a9 1e		      LDA	#30
   2721  f86e		       85 d4		      STA	explosion_timer
   2722  f870				   .skipL0100
   2723  f870				   .
   2724  f870							; 
   2725  f870
   2726  f870				   .L0101		;  rem ---------------------------------------------------------------------------------
   2727  f870
   2728  f870				   .L0102		;  if collision(player0,playfield) then gosub knock_player_back  :  rem if player collides with playfield knockback
   2729  f870
   2730  f870		       24 02		      bit	CXP0FB
   2731  f872		       10 03		      BPL	.skipL0102
   2732  f874				   .condpart45
   2733  f874		       20 65 fd 	      jsr	.knock_player_back
   2734  f877				   .skipL0102
   2735  f877				   .
   2736  f877							; 
   2737  f877
   2738  f877				   .L0103		;  rem ---------------------------------------------------------------------------------
   2739  f877
   2740  f877				   .L0104		;  if joy0fire then AUDV0  =  12  :  AUDC0  =	10  :  AUDF0  =  19  :	rem Play a sound
   2741  f877
   2742  f877		       24 0c		      bit	INPT4
   2743  f879		       30 0c		      BMI	.skipL0104
   2744  f87b				   .condpart46
   2745  f87b		       a9 0c		      LDA	#12
   2746  f87d		       85 19		      STA	AUDV0
   2747  f87f		       a9 0a		      LDA	#10
   2748  f881		       85 15		      STA	AUDC0
   2749  f883		       a9 13		      LDA	#19
   2750  f885		       85 17		      STA	AUDF0
   2751  f887				   .skipL0104
   2752  f887				   .L0105		;  if !joy0fire then AUDV0  =	0  :  rem Stop the sound when fire is released
   2753  f887
   2754  f887		       24 0c		      bit	INPT4
   2755  f889		       10 04		      BPL	.skipL0105
   2756  f88b				   .condpart47
   2757  f88b		       a9 00		      LDA	#0
   2758  f88d		       85 19		      STA	AUDV0
   2759  f88f				   .skipL0105
   2760  f88f				   .L0106		;  if collision(player0,player1) then player1x  =   ( rand  &	63 )   +  40  :  player1y  =   ( rand  &  31 )	 +  30	:  missile1y  =   ( rand  &  31 )   +  30  :  COLUBK  =  $46  +   ( rand  &  2 )   :  monsterHealth  =	monsterHealth  -  1  :	playerHealth  =  playerHealth  -  1  :	AUDV0  =  15  :  AUDC0	=  10  :  AUDF0  =  6  :  explosion_timer  =  30
   2761  f88f
   2762  f88f		       24 07		      bit	CXPPMM
   2763  f891		       10 42		      BPL	.skipL0106
   2764  f893				   .condpart48
   2765  f893							; complex statement detected
   2766  f893		       20 b9 f3 	      jsr	randomize
   2767  f896		       29 3f		      AND	#63
   2768  f898		       18		      CLC
   2769  f899		       69 28		      ADC	#40
   2770  f89b		       85 81		      STA	player1x
   2771  f89d							; complex statement detected
   2772  f89d		       20 b9 f3 	      jsr	randomize
   2773  f8a0		       29 1f		      AND	#31
   2774  f8a2		       18		      CLC
   2775  f8a3		       69 1e		      ADC	#30
   2776  f8a5		       85 86		      STA	player1y
   2777  f8a7							; complex statement detected
   2778  f8a7		       20 b9 f3 	      jsr	randomize
   2779  f8aa		       29 1f		      AND	#31
   2780  f8ac		       18		      CLC
   2781  f8ad		       69 1e		      ADC	#30
   2782  f8af		       85 88		      STA	missile1y
   2783  f8b1							; complex statement detected
   2784  f8b1		       a9 46		      LDA	#$46
   2785  f8b3		       48		      PHA
   2786  f8b4		       20 b9 f3 	      jsr	randomize
   2787  f8b7		       29 02		      AND	#2
   2788  f8b9		       ba		      TSX
   2789  f8ba		       e8		      INX
   2790  f8bb		       9a		      TXS
   2791  f8bc		       18		      CLC
   2792  f8bd		       75 00		      ADC	$00,x
   2793  f8bf		       85 09		      STA	COLUBK
   2794  f8c1		       c6 e3		      DEC	monsterHealth
   2795  f8c3		       c6 dd		      DEC	playerHealth
   2796  f8c5		       a9 0f		      LDA	#15
   2797  f8c7		       85 19		      STA	AUDV0
   2798  f8c9		       a9 0a		      LDA	#10
   2799  f8cb		       85 15		      STA	AUDC0
   2800  f8cd		       a9 06		      LDA	#6
   2801  f8cf		       85 17		      STA	AUDF0
   2802  f8d1		       a9 1e		      LDA	#30
   2803  f8d3		       85 d4		      STA	explosion_timer
   2804  f8d5				   .skipL0106
   2805  f8d5				   .
   2806  f8d5							; 
   2807  f8d5
   2808  f8d5				   .L0107		;  rem ---------------------------------------------------------------------------------
   2809  f8d5
   2810  f8d5				   .L0108		;  if explosion_timer	>  0 then explosion_timer  =  explosion_timer  -  1  :	if explosion_timer  =  20 then AUDF0  =  8  :  if explosion_timer  =  10 then AUDF0  =	12
   2811  f8d5
   2812  f8d5		       a9 00		      LDA	#0
   2813  f8d7		       c5 d4		      CMP	explosion_timer
   2814  f8d9		       b0 16		      BCS	.skipL0108
   2815  f8db				   .condpart49
   2816  f8db		       c6 d4		      DEC	explosion_timer
   2817  f8dd		       a5 d4		      LDA	explosion_timer
   2818  f8df		       c9 14		      CMP	#20
   2819  f8e1		       d0 0e		      BNE	.skip49then
   2820  f8e3				   .condpart50
   2821  f8e3		       a9 08		      LDA	#8
   2822  f8e5		       85 17		      STA	AUDF0
   2823  f8e7		       a5 d4		      LDA	explosion_timer
   2824  f8e9		       c9 0a		      CMP	#10
   2825  f8eb		       d0 04		      BNE	.skip50then
   2826  f8ed				   .condpart51
   2827  f8ed		       a9 0c		      LDA	#12
   2828  f8ef		       85 17		      STA	AUDF0
   2829  f8f1				   .skip50then
   2830  f8f1				   .skip49then
   2831  f8f1				   .skipL0108
   2832  f8f1				   .L0109		;  if explosion_timer	=  0 then AUDV0  =  0
   2833  f8f1
   2834  f8f1		       a5 d4		      LDA	explosion_timer
   2835  f8f3		       c9 00		      CMP	#0
   2836  f8f5		       d0 04		      BNE	.skipL0109
   2837  f8f7				   .condpart52
   2838  f8f7		       a9 00		      LDA	#0
   2839  f8f9		       85 19		      STA	AUDV0
   2840  f8fb				   .skipL0109
   2841  f8fb				   .L0110		;  rem pill removal logic
   2842  f8fb
   2843  f8fb				   .L0111		;  if playerHealth  =	3 then pfscore1  =  %00101010
   2844  f8fb
   2845  f8fb		       a5 dd		      LDA	playerHealth
   2846  f8fd		       c9 03		      CMP	#3
   2847  f8ff		       d0 04		      BNE	.skipL0111
   2848  f901				   .condpart53
   2849  f901		       a9 2a		      LDA	#%00101010
   2850  f903		       85 f2		      STA	pfscore1
   2851  f905				   .skipL0111
   2852  f905				   .L0112		;  if playerHealth  =	2 then pfscore1  =  %00001010
   2853  f905
   2854  f905		       a5 dd		      LDA	playerHealth
   2855  f907		       c9 02		      CMP	#2
   2856  f909		       d0 04		      BNE	.skipL0112
   2857  f90b				   .condpart54
   2858  f90b		       a9 0a		      LDA	#%00001010
   2859  f90d		       85 f2		      STA	pfscore1
   2860  f90f				   .skipL0112
   2861  f90f				   .L0113		;  if playerHealth  =	1 then pfscore1  =  %00000010
   2862  f90f
   2863  f90f		       a5 dd		      LDA	playerHealth
   2864  f911		       c9 01		      CMP	#1
   2865  f913		       d0 04		      BNE	.skipL0113
   2866  f915				   .condpart55
   2867  f915		       a9 02		      LDA	#%00000010
   2868  f917		       85 f2		      STA	pfscore1
   2869  f919				   .skipL0113
   2870  f919				   .L0114		;  if playerHealth  =	0 then pfscore1  =  %00000000
   2871  f919
   2872  f919		       a5 dd		      LDA	playerHealth
   2873  f91b		       c9 00		      CMP	#0
   2874  f91d		       d0 04		      BNE	.skipL0114
   2875  f91f				   .condpart56
   2876  f91f		       a9 00		      LDA	#%00000000
   2877  f921		       85 f2		      STA	pfscore1
   2878  f923				   .skipL0114
   2879  f923				   .
   2880  f923							; 
   2881  f923
   2882  f923				   .L0115		;  rem monster health bar
   2883  f923
   2884  f923				   .L0116		;  if monsterHealth  =  3 then pfscore2  =  %00101010
   2885  f923
   2886  f923		       a5 e3		      LDA	monsterHealth
   2887  f925		       c9 03		      CMP	#3
   2888  f927		       d0 04		      BNE	.skipL0116
   2889  f929				   .condpart57
   2890  f929		       a9 2a		      LDA	#%00101010
   2891  f92b		       85 f3		      STA	pfscore2
   2892  f92d				   .skipL0116
   2893  f92d				   .L0117		;  if monsterHealth  =  2 then pfscore2  =  %00001010
   2894  f92d
   2895  f92d		       a5 e3		      LDA	monsterHealth
   2896  f92f		       c9 02		      CMP	#2
   2897  f931		       d0 04		      BNE	.skipL0117
   2898  f933				   .condpart58
   2899  f933		       a9 0a		      LDA	#%00001010
   2900  f935		       85 f3		      STA	pfscore2
   2901  f937				   .skipL0117
   2902  f937				   .L0118		;  if monsterHealth  =  1 then pfscore2  =  %00000010
   2903  f937
   2904  f937		       a5 e3		      LDA	monsterHealth
   2905  f939		       c9 01		      CMP	#1
   2906  f93b		       d0 04		      BNE	.skipL0118
   2907  f93d				   .condpart59
   2908  f93d		       a9 02		      LDA	#%00000010
   2909  f93f		       85 f3		      STA	pfscore2
   2910  f941				   .skipL0118
   2911  f941				   .L0119		;  if monsterHealth  =  0 then pfscore2  =  %00000000	:  monsterHealth  =  10  :  playerHealth  =  4	:  winflag  =  winflag	+  1  :  pfscore2  =  %10101010
   2912  f941
   2913  f941		       a5 e3		      LDA	monsterHealth
   2914  f943		       c9 00		      CMP	#0
   2915  f945		       d0 12		      BNE	.skipL0119
   2916  f947				   .condpart60
   2917  f947		       a9 00		      LDA	#%00000000
   2918  f949		       85 f3		      STA	pfscore2
   2919  f94b		       a9 0a		      LDA	#10
   2920  f94d		       85 e3		      STA	monsterHealth
   2921  f94f		       a9 04		      LDA	#4
   2922  f951		       85 dd		      STA	playerHealth
   2923  f953		       e6 e8		      INC	winflag
   2924  f955		       a9 aa		      LDA	#%10101010
   2925  f957		       85 f3		      STA	pfscore2
   2926  f959				   .skipL0119
   2927  f959				   .L0120		;  rem ---------------------------------------------------------------------------------
   2928  f959
   2929  f959				   .L0121		;  if winflag	=  1 then COLUP1  =  17  +   ( rand  &	7 )   :  COLUPF  =  $36  +   ( rand  &	7 ) 
   2930  f959
   2931  f959		       a5 e8		      LDA	winflag
   2932  f95b		       c9 01		      CMP	#1
   2933  f95d		       d0 20		      BNE	.skipL0121
   2934  f95f				   .condpart61
   2935  f95f							; complex statement detected
   2936  f95f		       a9 11		      LDA	#17
   2937  f961		       48		      PHA
   2938  f962		       20 b9 f3 	      jsr	randomize
   2939  f965		       29 07		      AND	#7
   2940  f967		       ba		      TSX
   2941  f968		       e8		      INX
   2942  f969		       9a		      TXS
   2943  f96a		       18		      CLC
   2944  f96b		       75 00		      ADC	$00,x
   2945  f96d		       85 07		      STA	COLUP1
   2946  f96f							; complex statement detected
   2947  f96f		       a9 36		      LDA	#$36
   2948  f971		       48		      PHA
   2949  f972		       20 b9 f3 	      jsr	randomize
   2950  f975		       29 07		      AND	#7
   2951  f977		       ba		      TSX
   2952  f978		       e8		      INX
   2953  f979		       9a		      TXS
   2954  f97a		       18		      CLC
   2955  f97b		       75 00		      ADC	$00,x
   2956  f97d		       85 08		      STA	COLUPF
   2957  f97f				   .skipL0121
   2958  f97f				   .L0122		;  if winflag	=  2 then COLUP1  =  65  +   ( rand  &	7 )   :  COLUPF  =  $1	+   ( rand  &  7 ) 
   2959  f97f
   2960  f97f		       a5 e8		      LDA	winflag
   2961  f981		       c9 02		      CMP	#2
   2962  f983		       d0 20		      BNE	.skipL0122
   2963  f985				   .condpart62
   2964  f985							; complex statement detected
   2965  f985		       a9 41		      LDA	#65
   2966  f987		       48		      PHA
   2967  f988		       20 b9 f3 	      jsr	randomize
   2968  f98b		       29 07		      AND	#7
   2969  f98d		       ba		      TSX
   2970  f98e		       e8		      INX
   2971  f98f		       9a		      TXS
   2972  f990		       18		      CLC
   2973  f991		       75 00		      ADC	$00,x
   2974  f993		       85 07		      STA	COLUP1
   2975  f995							; complex statement detected
   2976  f995		       a9 01		      LDA	#$1
   2977  f997		       48		      PHA
   2978  f998		       20 b9 f3 	      jsr	randomize
   2979  f99b		       29 07		      AND	#7
   2980  f99d		       ba		      TSX
   2981  f99e		       e8		      INX
   2982  f99f		       9a		      TXS
   2983  f9a0		       18		      CLC
   2984  f9a1		       75 00		      ADC	$00,x
   2985  f9a3		       85 08		      STA	COLUPF
   2986  f9a5				   .skipL0122
   2987  f9a5				   .L0123		;  if winflag	=  3 then AUDV0  =  0  :  explosion_timer  =  0  :  goto win  :  rem if beaten 3rd monster win the game
   2988  f9a5
   2989  f9a5		       a5 e8		      LDA	winflag
   2990  f9a7		       c9 03		      CMP	#3
   2991  f9a9		       d0 09		      BNE	.skipL0123
   2992  f9ab				   .condpart63
   2993  f9ab		       a9 00		      LDA	#0
   2994  f9ad		       85 19		      STA	AUDV0
   2995  f9af		       85 d4		      STA	explosion_timer
   2996  f9b1		       4c 74 fd 	      jmp	.win
   2997  f9b4				   .skipL0123
   2998  f9b4				   .L0124		;  if playerHealth  =	0 then AUDV0  =  0  :  goto lose  :  rem player get hit 5 times lose
   2999  f9b4
   3000  f9b4		       a5 dd		      LDA	playerHealth
   3001  f9b6		       c9 00		      CMP	#0
   3002  f9b8		       d0 07		      BNE	.skipL0124
   3003  f9ba				   .condpart64
   3004  f9ba		       a9 00		      LDA	#0
   3005  f9bc		       85 19		      STA	AUDV0
   3006  f9be		       4c dc fd 	      jmp	.lose
   3007  f9c1				   .skipL0124
   3008  f9c1				   .L0125		;  rem ---------------------------------------------------------------------------------
   3009  f9c1
   3010  f9c1				   .L0126		;  p0x  =  0  :  rem player movement sprite left & right
   3011  f9c1
   3012  f9c1		       a9 00		      LDA	#0
   3013  f9c3		       85 d9		      STA	p0x
   3014  f9c5				   .L0127		;  if joy0left then p0x  =  255
   3015  f9c5
   3016  f9c5		       2c 80 02 	      bit	SWCHA
   3017  f9c8		       70 04		      BVS	.skipL0127
   3018  f9ca				   .condpart65
   3019  f9ca		       a9 ff		      LDA	#255
   3020  f9cc		       85 d9		      STA	p0x
   3021  f9ce				   .skipL0127
   3022  f9ce				   .L0128		;  if joy0right then p0x  =  1
   3023  f9ce
   3024  f9ce		       2c 80 02 	      bit	SWCHA
   3025  f9d1		       30 04		      BMI	.skipL0128
   3026  f9d3				   .condpart66
   3027  f9d3		       a9 01		      LDA	#1
   3028  f9d5		       85 d9		      STA	p0x
   3029  f9d7				   .skipL0128
   3030  f9d7				   .L0129		;  player0x  =  player0x  +  p0x
   3031  f9d7
   3032  f9d7		       a5 80		      LDA	player0x
   3033  f9d9		       18		      CLC
   3034  f9da		       65 d9		      ADC	p0x
   3035  f9dc		       85 80		      STA	player0x
   3036  f9de				   .
   3037  f9de							; 
   3038  f9de
   3039  f9de				   .L0130		;  p0y  =  0  :  rem player movement sprite up & down
   3040  f9de
   3041  f9de		       a9 00		      LDA	#0
   3042  f9e0		       85 d7		      STA	p0y
   3043  f9e2				   .L0131		;  if joy0up then p0y	=  255
   3044  f9e2
   3045  f9e2		       a9 10		      lda	#$10
   3046  f9e4		       2c 80 02 	      bit	SWCHA
   3047  f9e7		       d0 04		      BNE	.skipL0131
   3048  f9e9				   .condpart67
   3049  f9e9		       a9 ff		      LDA	#255
   3050  f9eb		       85 d7		      STA	p0y
   3051  f9ed				   .skipL0131
   3052  f9ed				   .L0132		;  if joy0down then p0y  =  1
   3053  f9ed
   3054  f9ed		       a9 20		      lda	#$20
   3055  f9ef		       2c 80 02 	      bit	SWCHA
   3056  f9f2		       d0 04		      BNE	.skipL0132
   3057  f9f4				   .condpart68
   3058  f9f4		       a9 01		      LDA	#1
   3059  f9f6		       85 d7		      STA	p0y
   3060  f9f8				   .skipL0132
   3061  f9f8				   .L0133		;  player0y  =  player0y  +  p0y
   3062  f9f8
   3063  f9f8		       a5 85		      LDA	player0y
   3064  f9fa		       18		      CLC
   3065  f9fb		       65 d7		      ADC	p0y
   3066  f9fd		       85 85		      STA	player0y
   3067  f9ff				   .
   3068  f9ff							; 
   3069  f9ff
   3070  f9ff				   .L0134		;  rem ---------------------------------------------------------------------------------
   3071  f9ff
   3072  f9ff				   .L0135		;  rem This section sets a value for the last direction the joystick was pushed
   3073  f9ff
   3074  f9ff				   .L0136		;  rem
   3075  f9ff
   3076  f9ff				   .L0137		;  rem  This determines the direction the bullet will be fired later, and also
   3077  f9ff
   3078  f9ff				   .L0138		;  rem  allows you to keep firing the bullet in the same direction after you
   3079  f9ff
   3080  f9ff				   .L0139		;  rem  have stopped moving.
   3081  f9ff
   3082  f9ff				   .L0140		;  rem
   3083  f9ff
   3084  f9ff				   .L0141		;  rem  Each time you move, each of the eight possible directions of the joystick is
   3085  f9ff
   3086  f9ff				   .L0142		;  rem  marked as on or off with a bit variable.
   3087  f9ff
   3088  f9ff				   .L0143		;  rem ---------------------------------------------------------------------------------
   3089  f9ff
   3090  f9ff				   .
   3091  f9ff							; 
   3092  f9ff
   3093  f9ff				   .L0144		;  if joy0up then c{1} = 1 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   3094  f9ff
   3095  f9ff		       a9 10		      lda	#$10
   3096  fa01		       2c 80 02 	      bit	SWCHA
   3097  fa04		       d0 30		      BNE	.skipL0144
   3098  fa06				   .condpart69
   3099  fa06		       a5 d6		      LDA	c
   3100  fa08		       09 02		      ORA	#2
   3101  fa0a		       85 d6		      STA	c
   3102  fa0c		       a5 d6		      LDA	c
   3103  fa0e		       29 fb		      AND	#251
   3104  fa10		       85 d6		      STA	c
   3105  fa12		       a5 d6		      LDA	c
   3106  fa14		       29 f7		      AND	#247
   3107  fa16		       85 d6		      STA	c
   3108  fa18		       a5 d6		      LDA	c
   3109  fa1a		       29 ef		      AND	#239
   3110  fa1c		       85 d6		      STA	c
   3111  fa1e		       a5 d6		      LDA	c
   3112  fa20		       29 df		      AND	#223
   3113  fa22		       85 d6		      STA	c
   3114  fa24		       a5 d6		      LDA	c
   3115  fa26		       29 bf		      AND	#191
   3116  fa28		       85 d6		      STA	c
   3117  fa2a		       a5 d6		      LDA	c
   3118  fa2c		       29 7f		      AND	#127
   3119  fa2e		       85 d6		      STA	c
   3120  fa30		       a5 d6		      LDA	c
   3121  fa32		       29 fe		      AND	#254
   3122  fa34		       85 d6		      STA	c
   3123  fa36				   .skipL0144
   3124  fa36				   .L0145		;  if joy0down then c{1} = 0 : c{2} = 1 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   3125  fa36
   3126  fa36		       a9 20		      lda	#$20
   3127  fa38		       2c 80 02 	      bit	SWCHA
   3128  fa3b		       d0 30		      BNE	.skipL0145
   3129  fa3d				   .condpart70
   3130  fa3d		       a5 d6		      LDA	c
   3131  fa3f		       29 fd		      AND	#253
   3132  fa41		       85 d6		      STA	c
   3133  fa43		       a5 d6		      LDA	c
   3134  fa45		       09 04		      ORA	#4
   3135  fa47		       85 d6		      STA	c
   3136  fa49		       a5 d6		      LDA	c
   3137  fa4b		       29 f7		      AND	#247
   3138  fa4d		       85 d6		      STA	c
   3139  fa4f		       a5 d6		      LDA	c
   3140  fa51		       29 ef		      AND	#239
   3141  fa53		       85 d6		      STA	c
   3142  fa55		       a5 d6		      LDA	c
   3143  fa57		       29 df		      AND	#223
   3144  fa59		       85 d6		      STA	c
   3145  fa5b		       a5 d6		      LDA	c
   3146  fa5d		       29 bf		      AND	#191
   3147  fa5f		       85 d6		      STA	c
   3148  fa61		       a5 d6		      LDA	c
   3149  fa63		       29 7f		      AND	#127
   3150  fa65		       85 d6		      STA	c
   3151  fa67		       a5 d6		      LDA	c
   3152  fa69		       29 fe		      AND	#254
   3153  fa6b		       85 d6		      STA	c
   3154  fa6d				   .skipL0145
   3155  fa6d				   .L0146		;  if joy0left then c{1} = 0 : c{2} = 0 : c{3} = 1 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   3156  fa6d
   3157  fa6d		       2c 80 02 	      bit	SWCHA
   3158  fa70		       70 30		      BVS	.skipL0146
   3159  fa72				   .condpart71
   3160  fa72		       a5 d6		      LDA	c
   3161  fa74		       29 fd		      AND	#253
   3162  fa76		       85 d6		      STA	c
   3163  fa78		       a5 d6		      LDA	c
   3164  fa7a		       29 fb		      AND	#251
   3165  fa7c		       85 d6		      STA	c
   3166  fa7e		       a5 d6		      LDA	c
   3167  fa80		       09 08		      ORA	#8
   3168  fa82		       85 d6		      STA	c
   3169  fa84		       a5 d6		      LDA	c
   3170  fa86		       29 ef		      AND	#239
   3171  fa88		       85 d6		      STA	c
   3172  fa8a		       a5 d6		      LDA	c
   3173  fa8c		       29 df		      AND	#223
   3174  fa8e		       85 d6		      STA	c
   3175  fa90		       a5 d6		      LDA	c
   3176  fa92		       29 bf		      AND	#191
   3177  fa94		       85 d6		      STA	c
   3178  fa96		       a5 d6		      LDA	c
   3179  fa98		       29 7f		      AND	#127
   3180  fa9a		       85 d6		      STA	c
   3181  fa9c		       a5 d6		      LDA	c
   3182  fa9e		       29 fe		      AND	#254
   3183  faa0		       85 d6		      STA	c
   3184  faa2				   .skipL0146
   3185  faa2				   .L0147		;  if joy0right then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 1 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   3186  faa2
   3187  faa2		       2c 80 02 	      bit	SWCHA
   3188  faa5		       30 30		      BMI	.skipL0147
   3189  faa7				   .condpart72
   3190  faa7		       a5 d6		      LDA	c
   3191  faa9		       29 fd		      AND	#253
   3192  faab		       85 d6		      STA	c
   3193  faad		       a5 d6		      LDA	c
   3194  faaf		       29 fb		      AND	#251
   3195  fab1		       85 d6		      STA	c
   3196  fab3		       a5 d6		      LDA	c
   3197  fab5		       29 f7		      AND	#247
   3198  fab7		       85 d6		      STA	c
   3199  fab9		       a5 d6		      LDA	c
   3200  fabb		       09 10		      ORA	#16
   3201  fabd		       85 d6		      STA	c
   3202  fabf		       a5 d6		      LDA	c
   3203  fac1		       29 df		      AND	#223
   3204  fac3		       85 d6		      STA	c
   3205  fac5		       a5 d6		      LDA	c
   3206  fac7		       29 bf		      AND	#191
   3207  fac9		       85 d6		      STA	c
   3208  facb		       a5 d6		      LDA	c
   3209  facd		       29 7f		      AND	#127
   3210  facf		       85 d6		      STA	c
   3211  fad1		       a5 d6		      LDA	c
   3212  fad3		       29 fe		      AND	#254
   3213  fad5		       85 d6		      STA	c
   3214  fad7				   .skipL0147
   3215  fad7				   .L0148		;  if joy0up  &&  joy0left then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 1 : c{6} = 0 : c{7} = 0 : c{0} = 0
   3216  fad7
   3217  fad7		       a9 10		      lda	#$10
   3218  fad9		       2c 80 02 	      bit	SWCHA
   3219  fadc		       d0 35		      BNE	.skipL0148
   3220  fade				   .condpart73
   3221  fade		       2c 80 02 	      bit	SWCHA
   3222  fae1		       70 30		      BVS	.skip73then
   3223  fae3				   .condpart74
   3224  fae3		       a5 d6		      LDA	c
   3225  fae5		       29 fd		      AND	#253
   3226  fae7		       85 d6		      STA	c
   3227  fae9		       a5 d6		      LDA	c
   3228  faeb		       29 fb		      AND	#251
   3229  faed		       85 d6		      STA	c
   3230  faef		       a5 d6		      LDA	c
   3231  faf1		       29 f7		      AND	#247
   3232  faf3		       85 d6		      STA	c
   3233  faf5		       a5 d6		      LDA	c
   3234  faf7		       29 ef		      AND	#239
   3235  faf9		       85 d6		      STA	c
   3236  fafb		       a5 d6		      LDA	c
   3237  fafd		       09 20		      ORA	#32
   3238  faff		       85 d6		      STA	c
   3239  fb01		       a5 d6		      LDA	c
   3240  fb03		       29 bf		      AND	#191
   3241  fb05		       85 d6		      STA	c
   3242  fb07		       a5 d6		      LDA	c
   3243  fb09		       29 7f		      AND	#127
   3244  fb0b		       85 d6		      STA	c
   3245  fb0d		       a5 d6		      LDA	c
   3246  fb0f		       29 fe		      AND	#254
   3247  fb11		       85 d6		      STA	c
   3248  fb13				   .skip73then
   3249  fb13				   .skipL0148
   3250  fb13				   .L0149		;  if joy0up  &&  joy0right then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 1 : c{7} = 0 : c{0} = 0
   3251  fb13
   3252  fb13		       a9 10		      lda	#$10
   3253  fb15		       2c 80 02 	      bit	SWCHA
   3254  fb18		       d0 35		      BNE	.skipL0149
   3255  fb1a				   .condpart75
   3256  fb1a		       2c 80 02 	      bit	SWCHA
   3257  fb1d		       30 30		      BMI	.skip75then
   3258  fb1f				   .condpart76
   3259  fb1f		       a5 d6		      LDA	c
   3260  fb21		       29 fd		      AND	#253
   3261  fb23		       85 d6		      STA	c
   3262  fb25		       a5 d6		      LDA	c
   3263  fb27		       29 fb		      AND	#251
   3264  fb29		       85 d6		      STA	c
   3265  fb2b		       a5 d6		      LDA	c
   3266  fb2d		       29 f7		      AND	#247
   3267  fb2f		       85 d6		      STA	c
   3268  fb31		       a5 d6		      LDA	c
   3269  fb33		       29 ef		      AND	#239
   3270  fb35		       85 d6		      STA	c
   3271  fb37		       a5 d6		      LDA	c
   3272  fb39		       29 df		      AND	#223
   3273  fb3b		       85 d6		      STA	c
   3274  fb3d		       a5 d6		      LDA	c
   3275  fb3f		       09 40		      ORA	#64
   3276  fb41		       85 d6		      STA	c
   3277  fb43		       a5 d6		      LDA	c
   3278  fb45		       29 7f		      AND	#127
   3279  fb47		       85 d6		      STA	c
   3280  fb49		       a5 d6		      LDA	c
   3281  fb4b		       29 fe		      AND	#254
   3282  fb4d		       85 d6		      STA	c
   3283  fb4f				   .skip75then
   3284  fb4f				   .skipL0149
   3285  fb4f				   .L0150		;  if joy0down  &&  joy0left then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 1 : c{0} = 0
   3286  fb4f
   3287  fb4f		       a9 20		      lda	#$20
   3288  fb51		       2c 80 02 	      bit	SWCHA
   3289  fb54		       d0 35		      BNE	.skipL0150
   3290  fb56				   .condpart77
   3291  fb56		       2c 80 02 	      bit	SWCHA
   3292  fb59		       70 30		      BVS	.skip77then
   3293  fb5b				   .condpart78
   3294  fb5b		       a5 d6		      LDA	c
   3295  fb5d		       29 fd		      AND	#253
   3296  fb5f		       85 d6		      STA	c
   3297  fb61		       a5 d6		      LDA	c
   3298  fb63		       29 fb		      AND	#251
   3299  fb65		       85 d6		      STA	c
   3300  fb67		       a5 d6		      LDA	c
   3301  fb69		       29 f7		      AND	#247
   3302  fb6b		       85 d6		      STA	c
   3303  fb6d		       a5 d6		      LDA	c
   3304  fb6f		       29 ef		      AND	#239
   3305  fb71		       85 d6		      STA	c
   3306  fb73		       a5 d6		      LDA	c
   3307  fb75		       29 df		      AND	#223
   3308  fb77		       85 d6		      STA	c
   3309  fb79		       a5 d6		      LDA	c
   3310  fb7b		       29 bf		      AND	#191
   3311  fb7d		       85 d6		      STA	c
   3312  fb7f		       a5 d6		      LDA	c
   3313  fb81		       09 80		      ORA	#128
   3314  fb83		       85 d6		      STA	c
   3315  fb85		       a5 d6		      LDA	c
   3316  fb87		       29 fe		      AND	#254
   3317  fb89		       85 d6		      STA	c
   3318  fb8b				   .skip77then
   3319  fb8b				   .skipL0150
   3320  fb8b				   .L0151		;  if joy0down  &&  joy0right then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 1
   3321  fb8b
   3322  fb8b		       a9 20		      lda	#$20
   3323  fb8d		       2c 80 02 	      bit	SWCHA
   3324  fb90		       d0 35		      BNE	.skipL0151
   3325  fb92				   .condpart79
   3326  fb92		       2c 80 02 	      bit	SWCHA
   3327  fb95		       30 30		      BMI	.skip79then
   3328  fb97				   .condpart80
   3329  fb97		       a5 d6		      LDA	c
   3330  fb99		       29 fd		      AND	#253
   3331  fb9b		       85 d6		      STA	c
   3332  fb9d		       a5 d6		      LDA	c
   3333  fb9f		       29 fb		      AND	#251
   3334  fba1		       85 d6		      STA	c
   3335  fba3		       a5 d6		      LDA	c
   3336  fba5		       29 f7		      AND	#247
   3337  fba7		       85 d6		      STA	c
   3338  fba9		       a5 d6		      LDA	c
   3339  fbab		       29 ef		      AND	#239
   3340  fbad		       85 d6		      STA	c
   3341  fbaf		       a5 d6		      LDA	c
   3342  fbb1		       29 df		      AND	#223
   3343  fbb3		       85 d6		      STA	c
   3344  fbb5		       a5 d6		      LDA	c
   3345  fbb7		       29 bf		      AND	#191
   3346  fbb9		       85 d6		      STA	c
   3347  fbbb		       a5 d6		      LDA	c
   3348  fbbd		       29 7f		      AND	#127
   3349  fbbf		       85 d6		      STA	c
   3350  fbc1		       a5 d6		      LDA	c
   3351  fbc3		       09 01		      ORA	#1
   3352  fbc5		       85 d6		      STA	c
   3353  fbc7				   .skip79then
   3354  fbc7				   .skipL0151
   3355  fbc7				   .
   3356  fbc7							; 
   3357  fbc7
   3358  fbc7				   .L0152		;  rem ------------------------------------------------------------------
   3359  fbc7
   3360  fbc7				   .L0153		;  rem  Increase 20 to a larger number to make the bullets travel farther
   3361  fbc7
   3362  fbc7				   .L0154		;  rem ------------------------------------------------------------------
   3363  fbc7
   3364  fbc7				   .L0155		;  e = e + 1
   3365  fbc7
   3366  fbc7		       e6 d8		      INC	e
   3367  fbc9				   .L0156		;  if e > 50 then e = 0
   3368  fbc9
   3369  fbc9		       a9 32		      LDA	#50
   3370  fbcb		       c5 d8		      CMP	e
   3371  fbcd		       b0 04		      BCS	.skipL0156
   3372  fbcf				   .condpart81
   3373  fbcf		       a9 00		      LDA	#0
   3374  fbd1		       85 d8		      STA	e
   3375  fbd3				   .skipL0156
   3376  fbd3				   .L0157		;  rem ------------------------------------------------------------------
   3377  fbd3
   3378  fbd3				   .L0158		;  rem  if you let go of the fire button, the missile shot is turned off,
   3379  fbd3
   3380  fbd3				   .L0159		;  rem  and the gunshot travel length variable (e) is reset to 0.
   3381  fbd3
   3382  fbd3				   .L0160		;  rem ------------------------------------------------------------------
   3383  fbd3
   3384  fbd3				   .L0161		;  if !joy0fire then missile0x = 0 : missile0y = 0 : e = 0
   3385  fbd3
   3386  fbd3		       24 0c		      bit	INPT4
   3387  fbd5		       10 08		      BPL	.skipL0161
   3388  fbd7				   .condpart82
   3389  fbd7		       a9 00		      LDA	#0
   3390  fbd9		       85 82		      STA	missile0x
   3391  fbdb		       85 91		      STA	missile0y
   3392  fbdd		       85 d8		      STA	e
   3393  fbdf				   .skipL0161
   3394  fbdf				   .
   3395  fbdf							; 
   3396  fbdf
   3397  fbdf				   .L0162		;  rem ------------------------------------------------------------------
   3398  fbdf
   3399  fbdf				   .L0163		;  rem  Fire the Missile
   3400  fbdf
   3401  fbdf				   .L0164		;  rem    This code is what actually fires the missile.
   3402  fbdf
   3403  fbdf				   .L0165		;  rem  
   3404  fbdf
   3405  fbdf				   .L0166		;  rem  It checks for a combination of pressing the fire button and
   3406  fbdf
   3407  fbdf				   .L0167		;  rem    the direction the joystick was most recently moved in to
   3408  fbdf
   3409  fbdf				   .L0168		;  rem    determine which direction to fire the missile.
   3410  fbdf
   3411  fbdf				   .L0169		;  rem
   3412  fbdf
   3413  fbdf				   .L0170		;  rem  the E variable determines the length of the shot
   3414  fbdf
   3415  fbdf				   .L0171		;  rem ------------------------------------------------------------------
   3416  fbdf
   3417  fbdf				   .
   3418  fbdf							; 
   3419  fbdf
   3420  fbdf				   .L0172		;  rem diagonal shots
   3421  fbdf
   3422  fbdf				   .L0173		;  if joy0fire  &&  c{0} then missile0x = player0x + 7 + e : missile0y = player0y - 3 + e
   3423  fbdf
   3424  fbdf		       24 0c		      bit	INPT4
   3425  fbe1		       30 19		      BMI	.skipL0173
   3426  fbe3				   .condpart83
   3427  fbe3		       a5 d6		      LDA	c
   3428  fbe5		       4a		      LSR
   3429  fbe6		       90 14		      BCC	.skip83then
   3430  fbe8				   .condpart84
   3431  fbe8							; complex statement detected
   3432  fbe8		       a5 80		      LDA	player0x
   3433  fbea		       18		      CLC
   3434  fbeb		       69 07		      ADC	#7
   3435  fbed		       18		      CLC
   3436  fbee		       65 d8		      ADC	e
   3437  fbf0		       85 82		      STA	missile0x
   3438  fbf2							; complex statement detected
   3439  fbf2		       a5 85		      LDA	player0y
   3440  fbf4		       38		      SEC
   3441  fbf5		       e9 03		      SBC	#3
   3442  fbf7		       18		      CLC
   3443  fbf8		       65 d8		      ADC	e
   3444  fbfa		       85 91		      STA	missile0y
   3445  fbfc				   .skip83then
   3446  fbfc				   .skipL0173
   3447  fbfc				   .L0174		;  if joy0fire  &&  c{5} then missile0x = player0x - e : missile0y = player0y - 7 - e
   3448  fbfc
   3449  fbfc		       24 0c		      bit	INPT4
   3450  fbfe		       30 17		      BMI	.skipL0174
   3451  fc00				   .condpart85
   3452  fc00		       a5 d6		      LDA	c
   3453  fc02		       29 20		      AND	#32
   3454  fc04		       f0 11		      BEQ	.skip85then
   3455  fc06				   .condpart86
   3456  fc06		       a5 80		      LDA	player0x
   3457  fc08		       38		      SEC
   3458  fc09		       e5 d8		      SBC	e
   3459  fc0b		       85 82		      STA	missile0x
   3460  fc0d							; complex statement detected
   3461  fc0d		       a5 85		      LDA	player0y
   3462  fc0f		       38		      SEC
   3463  fc10		       e9 07		      SBC	#7
   3464  fc12		       38		      SEC
   3465  fc13		       e5 d8		      SBC	e
   3466  fc15		       85 91		      STA	missile0y
   3467  fc17				   .skip85then
   3468  fc17				   .skipL0174
   3469  fc17				   .L0175		;  if joy0fire  &&  c{7} then missile0x = player0x - e : missile0y = player0y + 1 + e
   3470  fc17
   3471  fc17		       24 0c		      bit	INPT4
   3472  fc19		       30 15		      BMI	.skipL0175
   3473  fc1b				   .condpart87
   3474  fc1b		       24 d6		      BIT	c
   3475  fc1d		       10 11		      BPL	.skip87then
   3476  fc1f				   .condpart88
   3477  fc1f		       a5 80		      LDA	player0x
   3478  fc21		       38		      SEC
   3479  fc22		       e5 d8		      SBC	e
   3480  fc24		       85 82		      STA	missile0x
   3481  fc26							; complex statement detected
   3482  fc26		       a5 85		      LDA	player0y
   3483  fc28		       18		      CLC
   3484  fc29		       69 01		      ADC	#1
   3485  fc2b		       18		      CLC
   3486  fc2c		       65 d8		      ADC	e
   3487  fc2e		       85 91		      STA	missile0y
   3488  fc30				   .skip87then
   3489  fc30				   .skipL0175
   3490  fc30				   .L0176		;  if joy0fire  &&  c{6} then missile0x = player0x + 7 + e : missile0y = player0y - 7 - e
   3491  fc30
   3492  fc30		       24 0c		      bit	INPT4
   3493  fc32		       30 18		      BMI	.skipL0176
   3494  fc34				   .condpart89
   3495  fc34		       24 d6		      BIT	c
   3496  fc36		       50 14		      BVC	.skip89then
   3497  fc38				   .condpart90
   3498  fc38							; complex statement detected
   3499  fc38		       a5 80		      LDA	player0x
   3500  fc3a		       18		      CLC
   3501  fc3b		       69 07		      ADC	#7
   3502  fc3d		       18		      CLC
   3503  fc3e		       65 d8		      ADC	e
   3504  fc40		       85 82		      STA	missile0x
   3505  fc42							; complex statement detected
   3506  fc42		       a5 85		      LDA	player0y
   3507  fc44		       38		      SEC
   3508  fc45		       e9 07		      SBC	#7
   3509  fc47		       38		      SEC
   3510  fc48		       e5 d8		      SBC	e
   3511  fc4a		       85 91		      STA	missile0y
   3512  fc4c				   .skip89then
   3513  fc4c				   .skipL0176
   3514  fc4c				   .
   3515  fc4c							; 
   3516  fc4c
   3517  fc4c				   .L0177		;  rem left and right shots
   3518  fc4c
   3519  fc4c				   .L0178		;  if joy0fire  &&  c{3} then missile0x = player0x - e : missile0y = player0y - 5
   3520  fc4c
   3521  fc4c		       24 0c		      bit	INPT4
   3522  fc4e		       30 14		      BMI	.skipL0178
   3523  fc50				   .condpart91
   3524  fc50		       a5 d6		      LDA	c
   3525  fc52		       29 08		      AND	#8
   3526  fc54		       f0 0e		      BEQ	.skip91then
   3527  fc56				   .condpart92
   3528  fc56		       a5 80		      LDA	player0x
   3529  fc58		       38		      SEC
   3530  fc59		       e5 d8		      SBC	e
   3531  fc5b		       85 82		      STA	missile0x
   3532  fc5d		       a5 85		      LDA	player0y
   3533  fc5f		       38		      SEC
   3534  fc60		       e9 05		      SBC	#5
   3535  fc62		       85 91		      STA	missile0y
   3536  fc64				   .skip91then
   3537  fc64				   .skipL0178
   3538  fc64				   .L0179		;  if joy0fire  &&  c{4} then missile0x = player0x + 8 + e : missile0y = player0y - 5
   3539  fc64
   3540  fc64		       24 0c		      bit	INPT4
   3541  fc66		       30 17		      BMI	.skipL0179
   3542  fc68				   .condpart93
   3543  fc68		       a5 d6		      LDA	c
   3544  fc6a		       29 10		      AND	#16
   3545  fc6c		       f0 11		      BEQ	.skip93then
   3546  fc6e				   .condpart94
   3547  fc6e							; complex statement detected
   3548  fc6e		       a5 80		      LDA	player0x
   3549  fc70		       18		      CLC
   3550  fc71		       69 08		      ADC	#8
   3551  fc73		       18		      CLC
   3552  fc74		       65 d8		      ADC	e
   3553  fc76		       85 82		      STA	missile0x
   3554  fc78		       a5 85		      LDA	player0y
   3555  fc7a		       38		      SEC
   3556  fc7b		       e9 05		      SBC	#5
   3557  fc7d		       85 91		      STA	missile0y
   3558  fc7f				   .skip93then
   3559  fc7f				   .skipL0179
   3560  fc7f				   .
   3561  fc7f							; 
   3562  fc7f
   3563  fc7f				   .L0180		;  rem up and down shots
   3564  fc7f
   3565  fc7f				   .L0181		;  if joy0fire  &&  c{1} then missile0x = player0x + 5 : missile0y = player0y - 10 - e
   3566  fc7f
   3567  fc7f		       24 0c		      bit	INPT4
   3568  fc81		       30 17		      BMI	.skipL0181
   3569  fc83				   .condpart95
   3570  fc83		       a5 d6		      LDA	c
   3571  fc85		       29 02		      AND	#2
   3572  fc87		       f0 11		      BEQ	.skip95then
   3573  fc89				   .condpart96
   3574  fc89		       a5 80		      LDA	player0x
   3575  fc8b		       18		      CLC
   3576  fc8c		       69 05		      ADC	#5
   3577  fc8e		       85 82		      STA	missile0x
   3578  fc90							; complex statement detected
   3579  fc90		       a5 85		      LDA	player0y
   3580  fc92		       38		      SEC
   3581  fc93		       e9 0a		      SBC	#10
   3582  fc95		       38		      SEC
   3583  fc96		       e5 d8		      SBC	e
   3584  fc98		       85 91		      STA	missile0y
   3585  fc9a				   .skip95then
   3586  fc9a				   .skipL0181
   3587  fc9a				   .L0182		;  if joy0fire  &&  c{2} then missile0x = player0x + 5 : missile0y = player0y + 3 + e
   3588  fc9a
   3589  fc9a		       24 0c		      bit	INPT4
   3590  fc9c		       30 17		      BMI	.skipL0182
   3591  fc9e				   .condpart97
   3592  fc9e		       a5 d6		      LDA	c
   3593  fca0		       29 04		      AND	#4
   3594  fca2		       f0 11		      BEQ	.skip97then
   3595  fca4				   .condpart98
   3596  fca4		       a5 80		      LDA	player0x
   3597  fca6		       18		      CLC
   3598  fca7		       69 05		      ADC	#5
   3599  fca9		       85 82		      STA	missile0x
   3600  fcab							; complex statement detected
   3601  fcab		       a5 85		      LDA	player0y
   3602  fcad		       18		      CLC
   3603  fcae		       69 03		      ADC	#3
   3604  fcb0		       18		      CLC
   3605  fcb1		       65 d8		      ADC	e
   3606  fcb3		       85 91		      STA	missile0y
   3607  fcb5				   .skip97then
   3608  fcb5				   .skipL0182
   3609  fcb5				   .
   3610  fcb5							; 
   3611  fcb5
   3612  fcb5				   .L0183		;  rem ------------------------------------------------------------------
   3613  fcb5
   3614  fcb5				   .L0184		;  rem This stops the animation and shows a still sprite when you're 
   3615  fcb5
   3616  fcb5				   .L0185		;  rem not moving.
   3617  fcb5
   3618  fcb5				   .L0186		;  rem ------------------------------------------------------------------
   3619  fcb5
   3620  fcb5				   .L0187		;  if !joy0up	&&  !joy0down  &&  !joy0left  &&  !joy0right then y = 30
   3621  fcb5
   3622  fcb5		       a9 10		      lda	#$10
   3623  fcb7		       2c 80 02 	      bit	SWCHA
   3624  fcba		       f0 15		      BEQ	.skipL0187
   3625  fcbc				   .condpart99
   3626  fcbc		       a9 20		      lda	#$20
   3627  fcbe		       2c 80 02 	      bit	SWCHA
   3628  fcc1		       f0 0e		      BEQ	.skip99then
   3629  fcc3				   .condpart100
   3630  fcc3		       2c 80 02 	      bit	SWCHA
   3631  fcc6		       50 09		      BVC	.skip100then
   3632  fcc8				   .condpart101
   3633  fcc8		       2c 80 02 	      bit	SWCHA
   3634  fccb		       10 04		      BPL	.skip101then
   3635  fccd				   .condpart102
   3636  fccd		       a9 1e		      LDA	#30
   3637  fccf		       85 ec		      STA	y
   3638  fcd1				   .skip101then
   3639  fcd1				   .skip100then
   3640  fcd1				   .skip99then
   3641  fcd1				   .skipL0187
   3642  fcd1				   .
   3643  fcd1							; 
   3644  fcd1
   3645  fcd1				   .L0188		;  rem ------------------------------------------------------------------
   3646  fcd1
   3647  fcd1				   .L0189		;  rem Monster AI: Moves randomly every 40 frames
   3648  fcd1
   3649  fcd1				   .L0190		;  if z  =  0 then p1x  =   ( rand  &	2 )   -  1  :  p1y  =	( rand	&  2 )	 -  1  :  z  =	30
   3650  fcd1
   3651  fcd1		       a5 ed		      LDA	z
   3652  fcd3		       c9 00		      CMP	#0
   3653  fcd5		       d0 18		      BNE	.skipL0190
   3654  fcd7				   .condpart103
   3655  fcd7							; complex statement detected
   3656  fcd7		       20 b9 f3 	      jsr	randomize
   3657  fcda		       29 02		      AND	#2
   3658  fcdc		       38		      SEC
   3659  fcdd		       e9 01		      SBC	#1
   3660  fcdf		       85 db		      STA	p1x
   3661  fce1							; complex statement detected
   3662  fce1		       20 b9 f3 	      jsr	randomize
   3663  fce4		       29 02		      AND	#2
   3664  fce6		       38		      SEC
   3665  fce7		       e9 01		      SBC	#1
   3666  fce9		       85 da		      STA	p1y
   3667  fceb		       a9 1e		      LDA	#30
   3668  fced		       85 ed		      STA	z
   3669  fcef				   .skipL0190
   3670  fcef				   .L0191		;  if z  <  10 then player1x  =  player1x  +  p1x  :  player1y  =  player1y  +  p1y
   3671  fcef
   3672  fcef		       a5 ed		      LDA	z
   3673  fcf1		       c9 0a		      CMP	#10
   3674  fcf3		       b0 0e		      BCS	.skipL0191
   3675  fcf5				   .condpart104
   3676  fcf5		       a5 81		      LDA	player1x
   3677  fcf7		       18		      CLC
   3678  fcf8		       65 db		      ADC	p1x
   3679  fcfa		       85 81		      STA	player1x
   3680  fcfc		       a5 86		      LDA	player1y
   3681  fcfe		       18		      CLC
   3682  fcff		       65 da		      ADC	p1y
   3683  fd01		       85 86		      STA	player1y
   3684  fd03				   .skipL0191
   3685  fd03				   .L0192		;  z  =  z  -	1
   3686  fd03
   3687  fd03		       c6 ed		      DEC	z
   3688  fd05				   .L0193		;  if collision(player1,playfield) then player1x  =  player1x	-  p1x	*  2  :  player1y  =  player1y	-  p1y	*  2  :  p1x  =   - p1x  :  p1y  =   - p1y
   3689  fd05
   3690  fd05		       24 03		      bit	CXP1FB
   3691  fd07		       10 2e		      BPL	.skipL0193
   3692  fd09				   .condpart105
   3693  fd09							; complex statement detected
   3694  fd09		       a5 81		      LDA	player1x
   3695  fd0b		       48		      PHA
   3696  fd0c		       a5 db		      LDA	p1x
   3697  fd0e		       0a		      asl
   3698  fd0f		       a8		      TAY
   3699  fd10		       68		      PLA
   3700  fd11		       ba		      TSX
   3701  fd12		       94 00		      STY	$00,x
   3702  fd14		       38		      SEC
   3703  fd15		       f5 00		      SBC	$00,x
   3704  fd17		       85 81		      STA	player1x
   3705  fd19							; complex statement detected
   3706  fd19		       a5 86		      LDA	player1y
   3707  fd1b		       48		      PHA
   3708  fd1c		       a5 da		      LDA	p1y
   3709  fd1e		       0a		      asl
   3710  fd1f		       a8		      TAY
   3711  fd20		       68		      PLA
   3712  fd21		       ba		      TSX
   3713  fd22		       94 00		      STY	$00,x
   3714  fd24		       38		      SEC
   3715  fd25		       f5 00		      SBC	$00,x
   3716  fd27		       85 86		      STA	player1y
   3717  fd29		       a9 00		      LDA	#0
   3718  fd2b		       38		      SEC
   3719  fd2c		       e5 db		      SBC	p1x
   3720  fd2e		       85 db		      STA	p1x
   3721  fd30		       a9 00		      LDA	#0
   3722  fd32		       38		      SEC
   3723  fd33		       e5 da		      SBC	p1y
   3724  fd35		       85 da		      STA	p1y
   3725  fd37				   .skipL0193
   3726  fd37				   .
   3727  fd37							; 
   3728  fd37
   3729  fd37				   .
   3730  fd37							; 
   3731  fd37
   3732  fd37				   .L0194		;  rem ------------------------------------------------------------------
   3733  fd37
   3734  fd37				   .L0195		;  rem Monster AI: fires randomly left
   3735  fd37
   3736  fd37				   .L0196		;  if missile1x  =  0 then missile1x  =  player1x  :  missile1y  =  player1y  :  AUDV0  =  10	:  AUDC0  =  8	:  AUDF0  =  4
   3737  fd37
   3738  fd37		       a5 83		      LDA	missile1x
   3739  fd39		       c9 00		      CMP	#0
   3740  fd3b		       d0 14		      BNE	.skipL0196
   3741  fd3d				   .condpart106
   3742  fd3d		       a5 81		      LDA	player1x
   3743  fd3f		       85 83		      STA	missile1x
   3744  fd41		       a5 86		      LDA	player1y
   3745  fd43		       85 88		      STA	missile1y
   3746  fd45		       a9 0a		      LDA	#10
   3747  fd47		       85 19		      STA	AUDV0
   3748  fd49		       a9 08		      LDA	#8
   3749  fd4b		       85 15		      STA	AUDC0
   3750  fd4d		       a9 04		      LDA	#4
   3751  fd4f		       85 17		      STA	AUDF0
   3752  fd51				   .skipL0196
   3753  fd51				   .L0197		;  missile1x  =  missile1x  -	1
   3754  fd51
   3755  fd51		       c6 83		      DEC	missile1x
   3756  fd53				   .L0198		;  if missile1x  <  0 then missile1x  =  0  :	AUDV0  =  0
   3757  fd53
   3758  fd53		       a5 83		      LDA	missile1x
   3759  fd55		       c9 00		      CMP	#0
   3760  fd57		       b0 06		      BCS	.skipL0198
   3761  fd59				   .condpart107
   3762  fd59		       a9 00		      LDA	#0
   3763  fd5b		       85 83		      STA	missile1x
   3764  fd5d		       85 19		      STA	AUDV0
   3765  fd5f				   .skipL0198
   3766  fd5f				   .
   3767  fd5f							; 
   3768  fd5f
   3769  fd5f				   .L0199		;  drawscreen
   3770  fd5f
   3771  fd5f		       20 c3 f3 	      jsr	drawscreen
   3772  fd62				   .
   3773  fd62							; 
   3774  fd62
   3775  fd62				   .L0200		;  goto main
   3776  fd62
   3777  fd62		       4c 3d f5 	      jmp	.main
   3778  fd65
   3779  fd65				   .
   3780  fd65							; 
   3781  fd65
   3782  fd65				   .L0201		;  rem knockback function
   3783  fd65
   3784  fd65				   .knock_player_back
   3785  fd65							; knock_player_back
   3786  fd65
   3787  fd65				   .L0202		;  player0x  =  player0x  -  p0x
   3788  fd65
   3789  fd65		       a5 80		      LDA	player0x
   3790  fd67		       38		      SEC
   3791  fd68		       e5 d9		      SBC	p0x
   3792  fd6a		       85 80		      STA	player0x
   3793  fd6c				   .L0203		;  player0y  =  player0y  -  p0y
   3794  fd6c
   3795  fd6c		       a5 85		      LDA	player0y
   3796  fd6e		       38		      SEC
   3797  fd6f		       e5 d7		      SBC	p0y
   3798  fd71		       85 85		      STA	player0y
   3799  fd73				   .L0204		;  return
   3800  fd73
   3801  fd73		       60		      RTS
   3802  fd74				   .
   3803  fd74							; 
   3804  fd74
   3805  fd74				   .win
   3806  fd74							; win
   3807  fd74
   3808  fd74				   .L0205		;  COLUPF  =  $1C  +	( rand	&  3 )	 :  rem Set random yellow shades for the playfield
   3809  fd74
   3810  fd74							; complex statement detected
   3811  fd74		       a9 1c		      LDA	#$1C
   3812  fd76		       48		      PHA
   3813  fd77		       20 b9 f3 	      jsr	randomize
   3814  fd7a		       29 03		      AND	#3
   3815  fd7c		       ba		      TSX
   3816  fd7d		       e8		      INX
   3817  fd7e		       9a		      TXS
   3818  fd7f		       18		      CLC
   3819  fd80		       75 00		      ADC	$00,x
   3820  fd82		       85 08		      STA	COLUPF
   3821  fd84				   .L0206		;  playfield:
   3822  fd84
   3823  fd84				  -	      ifconst	pfres
   3824  fd84				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3825  fd84					      else
   3826  fd84		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3827  fd86					      endif
   3828  fd86		       4c b5 fd 	      jmp	pflabel4
   3829  fd89				   PF_data4
   3830  fd89		       ff ff		      .byte.b	%11111111, %11111111
   3831  fd8b					      if	(pfwidth>2)
   3832  fd8b		       ff ff		      .byte.b	%11111111, %11111111
   3833  fd8d					      endif
   3834  fd8d		       80 00		      .byte.b	%10000000, %00000000
   3835  fd8f					      if	(pfwidth>2)
   3836  fd8f		       00 80		      .byte.b	%00000000, %10000000
   3837  fd91					      endif
   3838  fd91		       b0 db		      .byte.b	%10110000, %11011011
   3839  fd93					      if	(pfwidth>2)
   3840  fd93		       e0 b6		      .byte.b	%11100000, %10110110
   3841  fd95					      endif
   3842  fd95		       b0 db		      .byte.b	%10110000, %11011011
   3843  fd97					      if	(pfwidth>2)
   3844  fd97		       30 b6		      .byte.b	%00110000, %10110110
   3845  fd99					      endif
   3846  fd99		       b0 db		      .byte.b	%10110000, %11011011
   3847  fd9b					      if	(pfwidth>2)
   3848  fd9b		       18 b6		      .byte.b	%00011000, %10110110
   3849  fd9d					      endif
   3850  fd9d		       b0 db		      .byte.b	%10110000, %11011011
   3851  fd9f					      if	(pfwidth>2)
   3852  fd9f		       0c b6		      .byte.b	%00001100, %10110110
   3853  fda1					      endif
   3854  fda1		       b0 db		      .byte.b	%10110000, %11011011
   3855  fda3					      if	(pfwidth>2)
   3856  fda3		       06 b6		      .byte.b	%00000110, %10110110
   3857  fda5					      endif
   3858  fda5		       b6 db		      .byte.b	%10110110, %11011011
   3859  fda7					      if	(pfwidth>2)
   3860  fda7		       03 86		      .byte.b	%00000011, %10000110
   3861  fda9					      endif
   3862  fda9		       b6 db		      .byte.b	%10110110, %11011011
   3863  fdab					      if	(pfwidth>2)
   3864  fdab		       01 b7		      .byte.b	%00000001, %10110111
   3865  fdad					      endif
   3866  fdad		       b9 db		      .byte.b	%10111001, %11011011
   3867  fdaf					      if	(pfwidth>2)
   3868  fdaf		       00 b7		      .byte.b	%00000000, %10110111
   3869  fdb1					      endif
   3870  fdb1		       ff ff		      .byte.b	%11111111, %11111111
   3871  fdb3					      if	(pfwidth>2)
   3872  fdb3		       ff ff		      .byte.b	%11111111, %11111111
   3873  fdb5					      endif
   3874  fdb5				   pflabel4
   3875  fdb5		       bd 89 fd 	      lda	PF_data4,x
   3876  fdb8		       95 a4		      sta	playfield,x
   3877  fdba		       ca		      dex
   3878  fdbb		       10 f8		      bpl	pflabel4
   3879  fdbd				   .L0207		;  if joy0fire then playerHealth  =  4  :  monsterHealth  =  10  :  winflag  =  0  :  pfscore1  =  %10101010  :  pfscore2  =  %10101010  :  goto titlescreen
   3880  fdbd
   3881  fdbd		       24 0c		      bit	INPT4
   3882  fdbf		       30 15		      BMI	.skipL0207
   3883  fdc1				   .condpart108
   3884  fdc1		       a9 04		      LDA	#4
   3885  fdc3		       85 dd		      STA	playerHealth
   3886  fdc5		       a9 0a		      LDA	#10
   3887  fdc7		       85 e3		      STA	monsterHealth
   3888  fdc9		       a9 00		      LDA	#0
   3889  fdcb		       85 e8		      STA	winflag
   3890  fdcd		       a9 aa		      LDA	#%10101010
   3891  fdcf		       85 f2		      STA	pfscore1
   3892  fdd1		       85 f3		      STA	pfscore2
   3893  fdd3		       4c e7 f4 	      jmp	.titlescreen
   3894  fdd6
   3895  fdd6				   .skipL0207
   3896  fdd6				   .L0208		;  drawscreen
   3897  fdd6
   3898  fdd6		       20 c3 f3 	      jsr	drawscreen
   3899  fdd9				   .L0209		;  goto win
   3900  fdd9
   3901  fdd9		       4c 74 fd 	      jmp	.win
   3902  fddc
   3903  fddc				   .
   3904  fddc							; 
   3905  fddc
   3906  fddc				   .lose
   3907  fddc							; lose
   3908  fddc
   3909  fddc				   .L0210		;  COLUPF  =  $4C  +	( rand	&  3 )	 :  rem Set random red shades for the playfield
   3910  fddc
   3911  fddc							; complex statement detected
   3912  fddc		       a9 4c		      LDA	#$4C
   3913  fdde		       48		      PHA
   3914  fddf		       20 b9 f3 	      jsr	randomize
   3915  fde2		       29 03		      AND	#3
   3916  fde4		       ba		      TSX
   3917  fde5		       e8		      INX
   3918  fde6		       9a		      TXS
   3919  fde7		       18		      CLC
   3920  fde8		       75 00		      ADC	$00,x
   3921  fdea		       85 08		      STA	COLUPF
   3922  fdec				   .L0211		;  playfield:
   3923  fdec
   3924  fdec				  -	      ifconst	pfres
   3925  fdec				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3926  fdec					      else
   3927  fdec		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3928  fdee					      endif
   3929  fdee		       4c 1d fe 	      jmp	pflabel5
   3930  fdf1				   PF_data5
   3931  fdf1		       ff ff		      .byte.b	%11111111, %11111111
   3932  fdf3					      if	(pfwidth>2)
   3933  fdf3		       ff ff		      .byte.b	%11111111, %11111111
   3934  fdf5					      endif
   3935  fdf5		       80 00		      .byte.b	%10000000, %00000000
   3936  fdf7					      if	(pfwidth>2)
   3937  fdf7		       00 80		      .byte.b	%00000000, %10000000
   3938  fdf9					      endif
   3939  fdf9		       bc 7d		      .byte.b	%10111100, %01111101
   3940  fdfb					      if	(pfwidth>2)
   3941  fdfb		       90 80		      .byte.b	%10010000, %10000000
   3942  fdfd					      endif
   3943  fdfd		       a0 11		      .byte.b	%10100000, %00010001
   3944  fdff					      if	(pfwidth>2)
   3945  fdff		       f0 80		      .byte.b	%11110000, %10000000
   3946  fe01					      endif
   3947  fe01		       bc 11		      .byte.b	%10111100, %00010001
   3948  fe03					      if	(pfwidth>2)
   3949  fe03		       10 80		      .byte.b	%00010000, %10000000
   3950  fe05					      endif
   3951  fe05		       80 c0		      .byte.b	%10000000, %11000000
   3952  fe07					      if	(pfwidth>2)
   3953  fe07		       e7 bf		      .byte.b	%11100111, %10111111
   3954  fe09					      endif
   3955  fe09		       a0 5f		      .byte.b	%10100000, %01011111
   3956  fe0b					      if	(pfwidth>2)
   3957  fe0b		       00 83		      .byte.b	%00000000, %10000011
   3958  fe0d					      endif
   3959  fe0d		       a0 d1		      .byte.b	%10100000, %11010001
   3960  fe0f					      if	(pfwidth>2)
   3961  fe0f		       f0 83		      .byte.b	%11110000, %10000011
   3962  fe11					      endif
   3963  fe11		       be 1f		      .byte.b	%10111110, %00011111
   3964  fe13					      if	(pfwidth>2)
   3965  fe13		       10 83		      .byte.b	%00010000, %10000011
   3966  fe15					      endif
   3967  fe15		       80 e0		      .byte.b	%10000000, %11100000
   3968  fe17					      if	(pfwidth>2)
   3969  fe17		       f0 83		      .byte.b	%11110000, %10000011
   3970  fe19					      endif
   3971  fe19		       ff ff		      .byte.b	%11111111, %11111111
   3972  fe1b					      if	(pfwidth>2)
   3973  fe1b		       ff ff		      .byte.b	%11111111, %11111111
   3974  fe1d					      endif
   3975  fe1d				   pflabel5
   3976  fe1d		       bd f1 fd 	      lda	PF_data5,x
   3977  fe20		       95 a4		      sta	playfield,x
   3978  fe22		       ca		      dex
   3979  fe23		       10 f8		      bpl	pflabel5
   3980  fe25				   .L0212		;  if joy0fire then playerHealth  =  4  :  monsterHealth  =  10  :  winflag  =  0  :  pfscore1  =  %10101010  :  pfscore2  =  %10101010  :  goto titlescreen
   3981  fe25
   3982  fe25		       24 0c		      bit	INPT4
   3983  fe27		       30 15		      BMI	.skipL0212
   3984  fe29				   .condpart109
   3985  fe29		       a9 04		      LDA	#4
   3986  fe2b		       85 dd		      STA	playerHealth
   3987  fe2d		       a9 0a		      LDA	#10
   3988  fe2f		       85 e3		      STA	monsterHealth
   3989  fe31		       a9 00		      LDA	#0
   3990  fe33		       85 e8		      STA	winflag
   3991  fe35		       a9 aa		      LDA	#%10101010
   3992  fe37		       85 f2		      STA	pfscore1
   3993  fe39		       85 f3		      STA	pfscore2
   3994  fe3b		       4c e7 f4 	      jmp	.titlescreen
   3995  fe3e
   3996  fe3e				   .skipL0212
   3997  fe3e				   .L0213		;  drawscreen
   3998  fe3e
   3999  fe3e		       20 c3 f3 	      jsr	drawscreen
   4000  fe41				   .L0214		;  goto lose
   4001  fe41
   4002  fe41		       4c dc fd 	      jmp	.lose
   4003  fe44
   4004  fe44				   .
   4005  fe44							; 
   4006  fe44
   4007  fe44				   .
   4008  fe44							; 
   4009  fe44
   4010  fe44				  -	      if	(<*) > (<(*+10))
   4011  fe44				  -	      repeat	($100-<*)
   4012  fe44				  -	      .byte	0
   4013  fe44				  -	      repend
   4014  fe44					      endif
   4015  fe44				   player8then_0
   4016  fe44		       1c		      .byte.b	%00011100
   4017  fe45		       18		      .byte.b	%00011000
   4018  fe46		       18		      .byte.b	%00011000
   4019  fe47		       20		      .byte.b	%00100000
   4020  fe48		       18		      .byte.b	%00011000
   4021  fe49		       5f		      .byte.b	%01011111
   4022  fe4a		       64		      .byte.b	%01100100
   4023  fe4b		       10		      .byte.b	%00010000
   4024  fe4c		       18		      .byte.b	%00011000
   4025  fe4d		       18		      .byte.b	%00011000
   4026  fe4e		       00		      .byte.b	%00000000
   4027  fe4f				  -	      if	(<*) > (<(*+10))
   4028  fe4f				  -	      repeat	($100-<*)
   4029  fe4f				  -	      .byte	0
   4030  fe4f				  -	      repend
   4031  fe4f					      endif
   4032  fe4f				   player10then_0
   4033  fe4f		       38		      .byte.b	%00111000
   4034  fe50		       18		      .byte.b	%00011000
   4035  fe51		       18		      .byte.b	%00011000
   4036  fe52		       04		      .byte.b	%00000100
   4037  fe53		       18		      .byte.b	%00011000
   4038  fe54		       fa		      .byte.b	%11111010
   4039  fe55		       26		      .byte.b	%00100110
   4040  fe56		       08		      .byte.b	%00001000
   4041  fe57		       18		      .byte.b	%00011000
   4042  fe58		       18		      .byte.b	%00011000
   4043  fe59		       00		      .byte.b	%00000000
   4044  fe5a				  -	      if	(<*) > (<(*+10))
   4045  fe5a				  -	      repeat	($100-<*)
   4046  fe5a				  -	      .byte	0
   4047  fe5a				  -	      repend
   4048  fe5a					      endif
   4049  fe5a				   player12then_0
   4050  fe5a		       c2		      .byte.b	%11000010
   4051  fe5b		       46		      .byte.b	%01000110
   4052  fe5c		       6c		      .byte.b	%01101100
   4053  fe5d		       38		      .byte.b	%00111000
   4054  fe5e		       14		      .byte.b	%00010100
   4055  fe5f		       3c		      .byte.b	%00111100
   4056  fe60		       24		      .byte.b	%00100100
   4057  fe61		       08		      .byte.b	%00001000
   4058  fe62		       18		      .byte.b	%00011000
   4059  fe63		       18		      .byte.b	%00011000
   4060  fe64		       00		      .byte.b	%00000000
   4061  fe65				  -	      if	(<*) > (<(*+10))
   4062  fe65				  -	      repeat	($100-<*)
   4063  fe65				  -	      .byte	0
   4064  fe65				  -	      repend
   4065  fe65					      endif
   4066  fe65				   player14then_0
   4067  fe65		       38		      .byte.b	%00111000
   4068  fe66		       18		      .byte.b	%00011000
   4069  fe67		       18		      .byte.b	%00011000
   4070  fe68		       04		      .byte.b	%00000100
   4071  fe69		       5a		      .byte.b	%01011010
   4072  fe6a		       3e		      .byte.b	%00111110
   4073  fe6b		       24		      .byte.b	%00100100
   4074  fe6c		       08		      .byte.b	%00001000
   4075  fe6d		       18		      .byte.b	%00011000
   4076  fe6e		       18		      .byte.b	%00011000
   4077  fe6f		       00		      .byte.b	%00000000
   4078  fe70				  -	      if	(<*) > (<(*+10))
   4079  fe70				  -	      repeat	($100-<*)
   4080  fe70				  -	      .byte	0
   4081  fe70				  -	      repend
   4082  fe70					      endif
   4083  fe70				   player16then_0
   4084  fe70		       1c		      .byte.b	%00011100
   4085  fe71		       18		      .byte.b	%00011000
   4086  fe72		       18		      .byte.b	%00011000
   4087  fe73		       20		      .byte.b	%00100000
   4088  fe74		       18		      .byte.b	%00011000
   4089  fe75		       5f		      .byte.b	%01011111
   4090  fe76		       64		      .byte.b	%01100100
   4091  fe77		       10		      .byte.b	%00010000
   4092  fe78		       18		      .byte.b	%00011000
   4093  fe79		       18		      .byte.b	%00011000
   4094  fe7a		       00		      .byte.b	%00000000
   4095  fe7b				  -	      if	(<*) > (<(*+10))
   4096  fe7b				  -	      repeat	($100-<*)
   4097  fe7b				  -	      .byte	0
   4098  fe7b				  -	      repend
   4099  fe7b					      endif
   4100  fe7b				   player18then_0
   4101  fe7b		       43		      .byte.b	%01000011
   4102  fe7c		       62		      .byte.b	%01100010
   4103  fe7d		       36		      .byte.b	%00110110
   4104  fe7e		       1c		      .byte.b	%00011100
   4105  fe7f		       28		      .byte.b	%00101000
   4106  fe80		       3c		      .byte.b	%00111100
   4107  fe81		       24		      .byte.b	%00100100
   4108  fe82		       10		      .byte.b	%00010000
   4109  fe83		       18		      .byte.b	%00011000
   4110  fe84		       18		      .byte.b	%00011000
   4111  fe85		       00		      .byte.b	%00000000
   4112  fe86				  -	      if	(<*) > (<(*+10))
   4113  fe86				  -	      repeat	($100-<*)
   4114  fe86				  -	      .byte	0
   4115  fe86				  -	      repend
   4116  fe86					      endif
   4117  fe86				   player20then_0
   4118  fe86		       1c		      .byte.b	%00011100
   4119  fe87		       18		      .byte.b	%00011000
   4120  fe88		       18		      .byte.b	%00011000
   4121  fe89		       20		      .byte.b	%00100000
   4122  fe8a		       5a		      .byte.b	%01011010
   4123  fe8b		       7c		      .byte.b	%01111100
   4124  fe8c		       24		      .byte.b	%00100100
   4125  fe8d		       10		      .byte.b	%00010000
   4126  fe8e		       18		      .byte.b	%00011000
   4127  fe8f		       18		      .byte.b	%00011000
   4128  fe90		       00		      .byte.b	%00000000
   4129  fe91				  -	      if	(<*) > (<(*+23))
   4130  fe91				  -	      repeat	($100-<*)
   4131  fe91				  -	      .byte	0
   4132  fe91				  -	      repend
   4133  fe91					      endif
   4134  fe91				   player23then_1
   4135  fe91		       18		      .byte.b	%00011000
   4136  fe92		       18		      .byte.b	%00011000
   4137  fe93		       1c		      .byte.b	%00011100
   4138  fe94		       3e		      .byte.b	%00111110
   4139  fe95		       7f		      .byte.b	%01111111
   4140  fe96		       ff		      .byte.b	%11111111
   4141  fe97		       db		      .byte.b	%11011011
   4142  fe98		       db		      .byte.b	%11011011
   4143  fe99		       ff		      .byte.b	%11111111
   4144  fe9a		       7e		      .byte.b	%01111110
   4145  fe9b		       3c		      .byte.b	%00111100
   4146  fe9c		       3c		      .byte.b	%00111100
   4147  fe9d		       7e		      .byte.b	%01111110
   4148  fe9e		       7e		      .byte.b	%01111110
   4149  fe9f		       ff		      .byte.b	%11111111
   4150  fea0		       6e		      .byte.b	%01101110
   4151  fea1		       24		      .byte.b	%00100100
   4152  fea2		       24		      .byte.b	%00100100
   4153  fea3		       18		      .byte.b	%00011000
   4154  fea4		       18		      .byte.b	%00011000
   4155  fea5		       18		      .byte.b	%00011000
   4156  fea6		       10		      .byte.b	%00010000
   4157  fea7		       10		      .byte.b	%00010000
   4158  fea8		       00		      .byte.b	%00000000
   4159  fea9				  -	      if	(<*) > (<(*+23))
   4160  fea9				  -	      repeat	($100-<*)
   4161  fea9				  -	      .byte	0
   4162  fea9				  -	      repend
   4163  fea9					      endif
   4164  fea9				   player25then_1
   4165  fea9		       18		      .byte.b	%00011000
   4166  feaa		       18		      .byte.b	%00011000
   4167  feab		       1c		      .byte.b	%00011100
   4168  feac		       3e		      .byte.b	%00111110
   4169  fead		       7f		      .byte.b	%01111111
   4170  feae		       ff		      .byte.b	%11111111
   4171  feaf		       db		      .byte.b	%11011011
   4172  feb0		       db		      .byte.b	%11011011
   4173  feb1		       ff		      .byte.b	%11111111
   4174  feb2		       7e		      .byte.b	%01111110
   4175  feb3		       3c		      .byte.b	%00111100
   4176  feb4		       3c		      .byte.b	%00111100
   4177  feb5		       7e		      .byte.b	%01111110
   4178  feb6		       6e		      .byte.b	%01101110
   4179  feb7		       df		      .byte.b	%11011111
   4180  feb8		       6e		      .byte.b	%01101110
   4181  feb9		       24		      .byte.b	%00100100
   4182  feba		       24		      .byte.b	%00100100
   4183  febb		       18		      .byte.b	%00011000
   4184  febc		       18		      .byte.b	%00011000
   4185  febd		       18		      .byte.b	%00011000
   4186  febe		       10		      .byte.b	%00010000
   4187  febf		       10		      .byte.b	%00010000
   4188  fec0		       00		      .byte.b	%00000000
   4189  fec1				  -	      if	(<*) > (<(*+23))
   4190  fec1				  -	      repeat	($100-<*)
   4191  fec1				  -	      .byte	0
   4192  fec1				  -	      repend
   4193  fec1					      endif
   4194  fec1				   player27then_1
   4195  fec1		       18		      .byte.b	%00011000
   4196  fec2		       18		      .byte.b	%00011000
   4197  fec3		       1c		      .byte.b	%00011100
   4198  fec4		       3e		      .byte.b	%00111110
   4199  fec5		       7f		      .byte.b	%01111111
   4200  fec6		       ff		      .byte.b	%11111111
   4201  fec7		       db		      .byte.b	%11011011
   4202  fec8		       db		      .byte.b	%11011011
   4203  fec9		       ff		      .byte.b	%11111111
   4204  feca		       7e		      .byte.b	%01111110
   4205  fecb		       3c		      .byte.b	%00111100
   4206  fecc		       3c		      .byte.b	%00111100
   4207  fecd		       7e		      .byte.b	%01111110
   4208  fece		       7e		      .byte.b	%01111110
   4209  fecf		       bf		      .byte.b	%10111111
   4210  fed0		       6e		      .byte.b	%01101110
   4211  fed1		       24		      .byte.b	%00100100
   4212  fed2		       24		      .byte.b	%00100100
   4213  fed3		       18		      .byte.b	%00011000
   4214  fed4		       18		      .byte.b	%00011000
   4215  fed5		       18		      .byte.b	%00011000
   4216  fed6		       18		      .byte.b	%00011000
   4217  fed7		       18		      .byte.b	%00011000
   4218  fed8		       00		      .byte.b	%00000000
   4219  fed9				  -	      if	(<*) > (<(*+23))
   4220  fed9				  -	      repeat	($100-<*)
   4221  fed9				  -	      .byte	0
   4222  fed9				  -	      repend
   4223  fed9					      endif
   4224  fed9				   player29then_1
   4225  fed9		       18		      .byte.b	%00011000
   4226  feda		       18		      .byte.b	%00011000
   4227  fedb		       18		      .byte.b	%00011000
   4228  fedc		       18		      .byte.b	%00011000
   4229  fedd		       3c		      .byte.b	%00111100
   4230  fede		       3c		      .byte.b	%00111100
   4231  fedf		       18		      .byte.b	%00011000
   4232  fee0		       18		      .byte.b	%00011000
   4233  fee1		       18		      .byte.b	%00011000
   4234  fee2		       3c		      .byte.b	%00111100
   4235  fee3		       7e		      .byte.b	%01111110
   4236  fee4		       66		      .byte.b	%01100110
   4237  fee5		       3c		      .byte.b	%00111100
   4238  fee6		       18		      .byte.b	%00011000
   4239  fee7		       18		      .byte.b	%00011000
   4240  fee8		       24		      .byte.b	%00100100
   4241  fee9		       24		      .byte.b	%00100100
   4242  feea		       24		      .byte.b	%00100100
   4243  feeb		       66		      .byte.b	%01100110
   4244  feec		       66		      .byte.b	%01100110
   4245  feed		       24		      .byte.b	%00100100
   4246  feee		       24		      .byte.b	%00100100
   4247  feef		       42		      .byte.b	%01000010
   4248  fef0		       00		      .byte.b	%00000000
   4249  fef1					      if	(<*) > (<(*+23))
   4250  fef1					      repeat	($100-<*)
   4251  fef1		       00		      .byte.b	0
   4250  fef1					      repend
   4251  fef2		       00		      .byte.b	0
   4250  fef2					      repend
   4251  fef3		       00		      .byte.b	0
   4250  fef3					      repend
   4251  fef4		       00		      .byte.b	0
   4250  fef4					      repend
   4251  fef5		       00		      .byte.b	0
   4250  fef5					      repend
   4251  fef6		       00		      .byte.b	0
   4250  fef6					      repend
   4251  fef7		       00		      .byte.b	0
   4250  fef7					      repend
   4251  fef8		       00		      .byte.b	0
   4250  fef8					      repend
   4251  fef9		       00		      .byte.b	0
   4250  fef9					      repend
   4251  fefa		       00		      .byte.b	0
   4250  fefa					      repend
   4251  fefb		       00		      .byte.b	0
   4250  fefb					      repend
   4251  fefc		       00		      .byte.b	0
   4250  fefc					      repend
   4251  fefd		       00		      .byte.b	0
   4250  fefd					      repend
   4251  fefe		       00		      .byte.b	0
   4250  fefe					      repend
   4251  feff		       00		      .byte.b	0
   4252  ff00					      repend
   4253  ff00					      endif
   4254  ff00				   player31then_1
   4255  ff00		       18		      .byte.b	%00011000
   4256  ff01		       18		      .byte.b	%00011000
   4257  ff02		       18		      .byte.b	%00011000
   4258  ff03		       18		      .byte.b	%00011000
   4259  ff04		       3c		      .byte.b	%00111100
   4260  ff05		       3c		      .byte.b	%00111100
   4261  ff06		       18		      .byte.b	%00011000
   4262  ff07		       18		      .byte.b	%00011000
   4263  ff08		       18		      .byte.b	%00011000
   4264  ff09		       3c		      .byte.b	%00111100
   4265  ff0a		       7e		      .byte.b	%01111110
   4266  ff0b		       66		      .byte.b	%01100110
   4267  ff0c		       3c		      .byte.b	%00111100
   4268  ff0d		       18		      .byte.b	%00011000
   4269  ff0e		       18		      .byte.b	%00011000
   4270  ff0f		       24		      .byte.b	%00100100
   4271  ff10		       24		      .byte.b	%00100100
   4272  ff11		       24		      .byte.b	%00100100
   4273  ff12		       66		      .byte.b	%01100110
   4274  ff13		       66		      .byte.b	%01100110
   4275  ff14		       04		      .byte.b	%00000100
   4276  ff15		       08		      .byte.b	%00001000
   4277  ff16		       10		      .byte.b	%00010000
   4278  ff17		       00		      .byte.b	%00000000
   4279  ff18				  -	      if	(<*) > (<(*+23))
   4280  ff18				  -	      repeat	($100-<*)
   4281  ff18				  -	      .byte	0
   4282  ff18				  -	      repend
   4283  ff18					      endif
   4284  ff18				   player33then_1
   4285  ff18		       18		      .byte.b	%00011000
   4286  ff19		       18		      .byte.b	%00011000
   4287  ff1a		       18		      .byte.b	%00011000
   4288  ff1b		       18		      .byte.b	%00011000
   4289  ff1c		       3c		      .byte.b	%00111100
   4290  ff1d		       3c		      .byte.b	%00111100
   4291  ff1e		       18		      .byte.b	%00011000
   4292  ff1f		       18		      .byte.b	%00011000
   4293  ff20		       18		      .byte.b	%00011000
   4294  ff21		       3c		      .byte.b	%00111100
   4295  ff22		       7e		      .byte.b	%01111110
   4296  ff23		       66		      .byte.b	%01100110
   4297  ff24		       3c		      .byte.b	%00111100
   4298  ff25		       18		      .byte.b	%00011000
   4299  ff26		       18		      .byte.b	%00011000
   4300  ff27		       24		      .byte.b	%00100100
   4301  ff28		       24		      .byte.b	%00100100
   4302  ff29		       24		      .byte.b	%00100100
   4303  ff2a		       66		      .byte.b	%01100110
   4304  ff2b		       66		      .byte.b	%01100110
   4305  ff2c		       20		      .byte.b	%00100000
   4306  ff2d		       10		      .byte.b	%00010000
   4307  ff2e		       08		      .byte.b	%00001000
   4308  ff2f		       00		      .byte.b	%00000000
   4309  ff30				  -	      if	(<*) > (<(*+23))
   4310  ff30				  -	      repeat	($100-<*)
   4311  ff30				  -	      .byte	0
   4312  ff30				  -	      repend
   4313  ff30					      endif
   4314  ff30				   player35then_1
   4315  ff30		       18		      .byte.b	%00011000
   4316  ff31		       3c		      .byte.b	%00111100
   4317  ff32		       7e		      .byte.b	%01111110
   4318  ff33		       e7		      .byte.b	%11100111
   4319  ff34		       db		      .byte.b	%11011011
   4320  ff35		       c3		      .byte.b	%11000011
   4321  ff36		       7e		      .byte.b	%01111110
   4322  ff37		       24		      .byte.b	%00100100
   4323  ff38		       24		      .byte.b	%00100100
   4324  ff39		       3c		      .byte.b	%00111100
   4325  ff3a		       7e		      .byte.b	%01111110
   4326  ff3b		       7e		      .byte.b	%01111110
   4327  ff3c		       66		      .byte.b	%01100110
   4328  ff3d		       24		      .byte.b	%00100100
   4329  ff3e		       24		      .byte.b	%00100100
   4330  ff3f		       42		      .byte.b	%01000010
   4331  ff40		       18		      .byte.b	%00011000
   4332  ff41		       18		      .byte.b	%00011000
   4333  ff42		       18		      .byte.b	%00011000
   4334  ff43		       10		      .byte.b	%00010000
   4335  ff44		       10		      .byte.b	%00010000
   4336  ff45		       10		      .byte.b	%00010000
   4337  ff46		       08		      .byte.b	%00001000
   4338  ff47		       00		      .byte.b	%00000000
   4339  ff48				  -	      if	(<*) > (<(*+23))
   4340  ff48				  -	      repeat	($100-<*)
   4341  ff48				  -	      .byte	0
   4342  ff48				  -	      repend
   4343  ff48					      endif
   4344  ff48				   player37then_1
   4345  ff48		       18		      .byte.b	%00011000
   4346  ff49		       3c		      .byte.b	%00111100
   4347  ff4a		       7e		      .byte.b	%01111110
   4348  ff4b		       e7		      .byte.b	%11100111
   4349  ff4c		       db		      .byte.b	%11011011
   4350  ff4d		       c3		      .byte.b	%11000011
   4351  ff4e		       7e		      .byte.b	%01111110
   4352  ff4f		       24		      .byte.b	%00100100
   4353  ff50		       24		      .byte.b	%00100100
   4354  ff51		       3c		      .byte.b	%00111100
   4355  ff52		       7e		      .byte.b	%01111110
   4356  ff53		       7e		      .byte.b	%01111110
   4357  ff54		       66		      .byte.b	%01100110
   4358  ff55		       24		      .byte.b	%00100100
   4359  ff56		       24		      .byte.b	%00100100
   4360  ff57		       42		      .byte.b	%01000010
   4361  ff58		       18		      .byte.b	%00011000
   4362  ff59		       18		      .byte.b	%00011000
   4363  ff5a		       18		      .byte.b	%00011000
   4364  ff5b		       10		      .byte.b	%00010000
   4365  ff5c		       10		      .byte.b	%00010000
   4366  ff5d		       10		      .byte.b	%00010000
   4367  ff5e		       08		      .byte.b	%00001000
   4368  ff5f		       00		      .byte.b	%00000000
   4369  ff60				  -	      if	(<*) > (<(*+23))
   4370  ff60				  -	      repeat	($100-<*)
   4371  ff60				  -	      .byte	0
   4372  ff60				  -	      repend
   4373  ff60					      endif
   4374  ff60				   player39then_1
   4375  ff60		       18		      .byte.b	%00011000
   4376  ff61		       3c		      .byte.b	%00111100
   4377  ff62		       7e		      .byte.b	%01111110
   4378  ff63		       e7		      .byte.b	%11100111
   4379  ff64		       db		      .byte.b	%11011011
   4380  ff65		       c3		      .byte.b	%11000011
   4381  ff66		       7e		      .byte.b	%01111110
   4382  ff67		       24		      .byte.b	%00100100
   4383  ff68		       66		      .byte.b	%01100110
   4384  ff69		       7e		      .byte.b	%01111110
   4385  ff6a		       ff		      .byte.b	%11111111
   4386  ff6b		       ff		      .byte.b	%11111111
   4387  ff6c		       7e		      .byte.b	%01111110
   4388  ff6d		       66		      .byte.b	%01100110
   4389  ff6e		       24		      .byte.b	%00100100
   4390  ff6f		       24		      .byte.b	%00100100
   4391  ff70		       24		      .byte.b	%00100100
   4392  ff71		       18		      .byte.b	%00011000
   4393  ff72		       18		      .byte.b	%00011000
   4394  ff73		       18		      .byte.b	%00011000
   4395  ff74		       18		      .byte.b	%00011000
   4396  ff75		       10		      .byte.b	%00010000
   4397  ff76		       10		      .byte.b	%00010000
   4398  ff77		       08		      .byte.b	%00001000
   4399  ff78					      if	ECHOFIRST
      36 bytes of ROM space left
   4400  ff78					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   4401  ff78					      endif
   4402  ff78		       00 01	   ECHOFIRST  =	1
   4403  ff78
   4404  ff78
   4405  ff78
   4406  ff78							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4407  ff78
   4408  ff78							; feel free to modify the score graphics - just keep each digit 8 high
   4409  ff78							; and keep the conditional compilation stuff intact
   4410  ff78				  -	      ifconst	ROM2k
   4411  ff78				  -	      ORG	$F7AC-8
   4412  ff78					      else
   4413  ff78				  -	      ifconst	bankswitch
   4414  ff78				  -	      if	bankswitch == 8
   4415  ff78				  -	      ORG	$2F94-bscode_length
   4416  ff78				  -	      RORG	$FF94-bscode_length
   4417  ff78				  -	      endif
   4418  ff78				  -	      if	bankswitch == 16
   4419  ff78				  -	      ORG	$4F94-bscode_length
   4420  ff78				  -	      RORG	$FF94-bscode_length
   4421  ff78				  -	      endif
   4422  ff78				  -	      if	bankswitch == 32
   4423  ff78				  -	      ORG	$8F94-bscode_length
   4424  ff78				  -	      RORG	$FF94-bscode_length
   4425  ff78				  -	      endif
   4426  ff78				  -	      if	bankswitch == 64
   4427  ff78				  -	      ORG	$10F80-bscode_length
   4428  ff78				  -	      RORG	$1FF80-bscode_length
   4429  ff78				  -	      endif
   4430  ff78					      else
   4431  ff9c					      ORG	$FF9C
   4432  ff9c					      endif
   4433  ff9c					      endif
   4434  ff9c
   4435  ff9c							; font equates
   4436  ff9c		       00 01	   .21stcentury =	1
   4437  ff9c		       00 02	   alarmclock =	2
   4438  ff9c		       00 03	   handwritten =	3
   4439  ff9c		       00 04	   interrupted =	4
   4440  ff9c		       00 05	   retroputer =	5
   4441  ff9c		       00 06	   whimsey    =	6
   4442  ff9c		       00 07	   tiny       =	7
   4443  ff9c		       00 08	   hex	      =	8
   4444  ff9c
   4445  ff9c				  -	      ifconst	font
   4446  ff9c				  -	      if	font == hex
   4447  ff9c				  -	      ORG	. - 48
   4448  ff9c				  -	      endif
   4449  ff9c					      endif
   4450  ff9c
   4451  ff9c				   scoretable
   4452  ff9c
   4453  ff9c				  -	      ifconst	font
   4454  ff9c				  -	      if	font == .21stcentury
   4455  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   4456  ff9c				  -	      endif
   4457  ff9c				  -	      if	font == alarmclock
   4458  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   4459  ff9c				  -	      endif
   4460  ff9c				  -	      if	font == handwritten
   4461  ff9c				  -	      include	"score_graphics.asm.handwritten"
   4462  ff9c				  -	      endif
   4463  ff9c				  -	      if	font == interrupted
   4464  ff9c				  -	      include	"score_graphics.asm.interrupted"
   4465  ff9c				  -	      endif
   4466  ff9c				  -	      if	font == retroputer
   4467  ff9c				  -	      include	"score_graphics.asm.retroputer"
   4468  ff9c				  -	      endif
   4469  ff9c				  -	      if	font == whimsey
   4470  ff9c				  -	      include	"score_graphics.asm.whimsey"
   4471  ff9c				  -	      endif
   4472  ff9c				  -	      if	font == tiny
   4473  ff9c				  -	      include	"score_graphics.asm.tiny"
   4474  ff9c				  -	      endif
   4475  ff9c				  -	      if	font == hex
   4476  ff9c				  -	      include	"score_graphics.asm.hex"
   4477  ff9c				  -	      endif
   4478  ff9c					      else		; default font
   4479  ff9c
   4480  ff9c		       3c		      .byte.b	%00111100
   4481  ff9d		       66		      .byte.b	%01100110
   4482  ff9e		       66		      .byte.b	%01100110
   4483  ff9f		       66		      .byte.b	%01100110
   4484  ffa0		       66		      .byte.b	%01100110
   4485  ffa1		       66		      .byte.b	%01100110
   4486  ffa2		       66		      .byte.b	%01100110
   4487  ffa3		       3c		      .byte.b	%00111100
   4488  ffa4
   4489  ffa4		       7e		      .byte.b	%01111110
   4490  ffa5		       18		      .byte.b	%00011000
   4491  ffa6		       18		      .byte.b	%00011000
   4492  ffa7		       18		      .byte.b	%00011000
   4493  ffa8		       18		      .byte.b	%00011000
   4494  ffa9		       38		      .byte.b	%00111000
   4495  ffaa		       18		      .byte.b	%00011000
   4496  ffab		       08		      .byte.b	%00001000
   4497  ffac
   4498  ffac		       7e		      .byte.b	%01111110
   4499  ffad		       60		      .byte.b	%01100000
   4500  ffae		       60		      .byte.b	%01100000
   4501  ffaf		       3c		      .byte.b	%00111100
   4502  ffb0		       06		      .byte.b	%00000110
   4503  ffb1		       06		      .byte.b	%00000110
   4504  ffb2		       46		      .byte.b	%01000110
   4505  ffb3		       3c		      .byte.b	%00111100
   4506  ffb4
   4507  ffb4		       3c		      .byte.b	%00111100
   4508  ffb5		       46		      .byte.b	%01000110
   4509  ffb6		       06		      .byte.b	%00000110
   4510  ffb7		       06		      .byte.b	%00000110
   4511  ffb8		       1c		      .byte.b	%00011100
   4512  ffb9		       06		      .byte.b	%00000110
   4513  ffba		       46		      .byte.b	%01000110
   4514  ffbb		       3c		      .byte.b	%00111100
   4515  ffbc
   4516  ffbc		       0c		      .byte.b	%00001100
   4517  ffbd		       0c		      .byte.b	%00001100
   4518  ffbe		       7e		      .byte.b	%01111110
   4519  ffbf		       4c		      .byte.b	%01001100
   4520  ffc0		       4c		      .byte.b	%01001100
   4521  ffc1		       2c		      .byte.b	%00101100
   4522  ffc2		       1c		      .byte.b	%00011100
   4523  ffc3		       0c		      .byte.b	%00001100
   4524  ffc4
   4525  ffc4		       3c		      .byte.b	%00111100
   4526  ffc5		       46		      .byte.b	%01000110
   4527  ffc6		       06		      .byte.b	%00000110
   4528  ffc7		       06		      .byte.b	%00000110
   4529  ffc8		       3c		      .byte.b	%00111100
   4530  ffc9		       60		      .byte.b	%01100000
   4531  ffca		       60		      .byte.b	%01100000
   4532  ffcb		       7e		      .byte.b	%01111110
   4533  ffcc
   4534  ffcc		       3c		      .byte.b	%00111100
   4535  ffcd		       66		      .byte.b	%01100110
   4536  ffce		       66		      .byte.b	%01100110
   4537  ffcf		       66		      .byte.b	%01100110
   4538  ffd0		       7c		      .byte.b	%01111100
   4539  ffd1		       60		      .byte.b	%01100000
   4540  ffd2		       62		      .byte.b	%01100010
   4541  ffd3		       3c		      .byte.b	%00111100
   4542  ffd4
   4543  ffd4		       30		      .byte.b	%00110000
   4544  ffd5		       30		      .byte.b	%00110000
   4545  ffd6		       30		      .byte.b	%00110000
   4546  ffd7		       18		      .byte.b	%00011000
   4547  ffd8		       0c		      .byte.b	%00001100
   4548  ffd9		       06		      .byte.b	%00000110
   4549  ffda		       42		      .byte.b	%01000010
   4550  ffdb		       3e		      .byte.b	%00111110
   4551  ffdc
   4552  ffdc		       3c		      .byte.b	%00111100
   4553  ffdd		       66		      .byte.b	%01100110
   4554  ffde		       66		      .byte.b	%01100110
   4555  ffdf		       66		      .byte.b	%01100110
   4556  ffe0		       3c		      .byte.b	%00111100
   4557  ffe1		       66		      .byte.b	%01100110
   4558  ffe2		       66		      .byte.b	%01100110
   4559  ffe3		       3c		      .byte.b	%00111100
   4560  ffe4
   4561  ffe4		       3c		      .byte.b	%00111100
   4562  ffe5		       46		      .byte.b	%01000110
   4563  ffe6		       06		      .byte.b	%00000110
   4564  ffe7		       3e		      .byte.b	%00111110
   4565  ffe8		       66		      .byte.b	%01100110
   4566  ffe9		       66		      .byte.b	%01100110
   4567  ffea		       66		      .byte.b	%01100110
   4568  ffeb		       3c		      .byte.b	%00111100
   4569  ffec
   4570  ffec					      ifnconst	DPC_kernel_options
   4571  ffec
   4572  ffec		       00		      .byte.b	%00000000
   4573  ffed		       00		      .byte.b	%00000000
   4574  ffee		       00		      .byte.b	%00000000
   4575  ffef		       00		      .byte.b	%00000000
   4576  fff0		       00		      .byte.b	%00000000
   4577  fff1		       00		      .byte.b	%00000000
   4578  fff2		       00		      .byte.b	%00000000
   4579  fff3		       00		      .byte.b	%00000000
   4580  fff4
   4581  fff4					      endif
   4582  fff4
   4583  fff4					      endif
   4584  fff4
   4585  fff4				  -	      ifconst	ROM2k
   4586  fff4				  -	      ORG	$F7FC
   4587  fff4					      else
   4588  fff4				  -	      ifconst	bankswitch
   4589  fff4				  -	      if	bankswitch == 8
   4590  fff4				  -	      ORG	$2FF4-bscode_length
   4591  fff4				  -	      RORG	$FFF4-bscode_length
   4592  fff4				  -	      endif
   4593  fff4				  -	      if	bankswitch == 16
   4594  fff4				  -	      ORG	$4FF4-bscode_length
   4595  fff4				  -	      RORG	$FFF4-bscode_length
   4596  fff4				  -	      endif
   4597  fff4				  -	      if	bankswitch == 32
   4598  fff4				  -	      ORG	$8FF4-bscode_length
   4599  fff4				  -	      RORG	$FFF4-bscode_length
   4600  fff4				  -	      endif
   4601  fff4				  -	      if	bankswitch == 64
   4602  fff4				  -	      ORG	$10FE0-bscode_length
   4603  fff4				  -	      RORG	$1FFE0-bscode_length
   4604  fff4				  -	      endif
   4605  fff4					      else
   4606  fffc					      ORG	$FFFC
   4607  fffc					      endif
   4608  fffc					      endif
   4609  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4610  fffc
   4611  fffc				  -	      ifconst	bankswitch
   4612  fffc				  -	      if	bankswitch == 8
   4613  fffc				  -	      ORG	$2FFC
   4614  fffc				  -	      RORG	$FFFC
   4615  fffc				  -	      endif
   4616  fffc				  -	      if	bankswitch == 16
   4617  fffc				  -	      ORG	$4FFC
   4618  fffc				  -	      RORG	$FFFC
   4619  fffc				  -	      endif
   4620  fffc				  -	      if	bankswitch == 32
   4621  fffc				  -	      ORG	$8FFC
   4622  fffc				  -	      RORG	$FFFC
   4623  fffc				  -	      endif
   4624  fffc				  -	      if	bankswitch == 64
   4625  fffc				  -	      ORG	$10FF0
   4626  fffc				  -	      RORG	$1FFF0
   4627  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   4628  fffc				  -	      ORG	$10FF8
   4629  fffc				  -	      RORG	$1FFF8
   4630  fffc				  -	      ifconst	superchip
   4631  fffc				  -	      .byte	"E","F","S","C"
   4632  fffc				  -	      else
   4633  fffc				  -	      .byte	"E","F","E","F"
   4634  fffc				  -	      endif
   4635  fffc				  -	      ORG	$10FFC
   4636  fffc				  -	      RORG	$1FFFC
   4637  fffc				  -	      endif
   4638  fffc					      else
   4639  fffc				  -	      ifconst	ROM2k
   4640  fffc				  -	      ORG	$F7FC
   4641  fffc					      else
   4642  fffc					      ORG	$FFFC
   4643  fffc					      endif
   4644  fffc					      endif
   4645  fffc		       00 f0		      .word.w	(start & $ffff)
   4646  fffe		       00 f0		      .word.w	(start & $ffff)
