------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 e8	    winflag    =	u
      4  10000 ????		00 00	    moved      =	0
      5  10000 ????		00 e1	    playerSprite =	n
      6  10000 ????		00 e0	    monsterSprite =	m
      7  10000 ????		00 db	    p1x        =	h
      8  10000 ????		00 da	    p1y        =	g
      9  10000 ????		00 d9	    p0x        =	f
     10  10000 ????		00 d7	    p0y        =	d
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 e8	    winflag    =	u
      4  10000 ????		00 00	    moved      =	0
      5  10000 ????		00 e1	    playerSprite =	n
      6  10000 ????		00 e0	    monsterSprite =	m
      7  10000 ????		00 db	    p1x        =	h
      8  10000 ????		00 da	    p1y        =	g
      9  10000 ????		00 d9	    p0x        =	f
     10  10000 ????		00 d7	    p0y        =	d
------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 5d f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8					      ifnconst	no_blank_lines
    279  f0d8					      ifnconst	playercolors
    280  f0d8		       a5 90		      lda	missile0height	;3
    281  f0da		       c7 91		      dcp	missile0y	;5
    282  f0dc		       e5 f6		      sbc	stack1
    283  f0de		       85 1d		      sta	ENAM0	;3
    284  f0e0				  -	      else
    285  f0e0				  -	      lda	(player0color),y
    286  f0e0				  -	      sta	player0colorstore
    287  f0e0				  -	      sleep	6
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef				  -	      ifconst	PFcolors
    403  f0ef				  -	      tay
    404  f0ef				  -	      lda	(pfcolortable),y
    405  f0ef				  -	      ifnconst	backgroundchange
    406  f0ef				  -	      sta	COLUPF
    407  f0ef				  -	      else
    408  f0ef				  -	      sta	COLUBK
    409  f0ef				  -	      endif
    410  f0ef				  -	      ifconst	pfrowheight
    411  f0ef				  -	      lda	#pfrowheight
    412  f0ef				  -	      else
    413  f0ef				  -	      ifnconst	pfres
    414  f0ef				  -	      lda	#8
    415  f0ef				  -	      else
    416  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0ef				  -	      endif
    418  f0ef				  -	      endif
    419  f0ef				  -	      sta	temp1
    420  f0ef					      endif
    421  f0ef					      ifnconst	PFcolorandheight
    422  f0ef					      ifnconst	PFcolors
    423  f0ef					      ifnconst	PFheights
    424  f0ef					      ifnconst	no_blank_lines
    425  f0ef							; read paddle 0
    426  f0ef							; lo-res paddle read
    427  f0ef							; bit INPT0
    428  f0ef							; bmi paddleskipread
    429  f0ef							; inc paddle0
    430  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    432  f0f4				  -	      ifconst	pfrowheight
    433  f0f4				  -	      lda	#pfrowheight
    434  f0f4					      else
    435  f0f4					      ifnconst	pfres
    436  f0f4		       a9 08		      lda	#8
    437  f0f6				  -	      else
    438  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f6					      endif
    440  f0f6					      endif
    441  f0f6		       85 9c		      sta	temp1
    442  f0f8					      endif
    443  f0f8					      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    460  f106				  -	      else
    461  f106				  -	      ldy	#124
    462  f106				  -	      lda	(pfcolortable),y
    463  f106				  -	      sta	COLUPF
    464  f106					      endif
    465  f106
    466  f106				  -	      ifconst	PFheights
    467  f106				  -	      ldx	#1
    468  f106				  -			;sleep 4
    469  f106				  -	      sleep	3	; this was over 1 cycle
    470  f106					      else
    471  f106		       a6 ef		      ldx	playfieldpos
    472  f108							;sleep 3
      0  f108					      sleep	2	; this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    474  f109					      endif
    475  f109
    476  f109		       4c 27 f1 	      jmp	enterlastkernel
    477  f10c
    478  f10c				  -	      else
    479  f10c				  -lastkernelline
    480  f10c				  -
    481  f10c				  -	      ifconst	PFheights
    482  f10c				  -	      ldx	#1
    483  f10c				  -			;sleep 5
    484  f10c				  -	      sleep	4	; this was over 1 cycle
    485  f10c				  -	      else
    486  f10c				  -	      ldx	playfieldpos
    487  f10c				  -			;sleep 4
    488  f10c				  -	      sleep	3	; this was over 1 cycle
    489  f10c				  -	      endif
    490  f10c				  -
    491  f10c				  -	      cpx	#0
    492  f10c				  -	      bne	.enterfromNBL
    493  f10c				  -	      jmp	no_blank_lines_bailout
    494  f10c					      endif
    495  f10c
    496  f10c				  -	      if	((<*)>$d5)
    497  f10c				  -	      align	256
    498  f10c					      endif
    499  f10c							; this is a kludge to prevent page wrapping - fix!!!
    500  f10c
    501  f10c				   .skipDrawlastP1
    502  f10c		       a9 00		      lda	#0
    503  f10e		       a8		      tay		; added so we don't cross a page
    504  f10f		       4c 39 f1 	      jmp	.continuelastP1
    505  f112
    506  f112				   .endkerloop		; enter at cycle 59??
    507  f112
    508  f112		       ea		      nop
    509  f113
    510  f113				   .enterfromNBL
    511  f113				  -	      ifconst	pfres
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f113				  -	      sty	PF1L	;3
    514  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f113				  -	      sty	PF2L	;3
    516  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f113				  -	      sty	PF1R	; possibly too early?
    518  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f113				  -	      sty	PF2R	;3
    520  f113					      else
    521  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f116		       84 0e		      sty	PF1L	;3
    523  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11b		       84 0f		      sty	PF2L	;3
    525  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f120		       84 0e		      sty	PF1R	; possibly too early?
    527  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f125		       84 0f		      sty	PF2R	;3
    529  f127					      endif
    530  f127
    531  f127				   enterlastkernel
    532  f127		       a5 92		      lda	ballheight
    533  f129
    534  f129							; tya
    535  f129		       c7 89		      dcp	bally
    536  f12b							; sleep 4
    537  f12b
    538  f12b							; sbc stack3
    539  f12b		       2a		      rol
    540  f12c		       2a		      rol
    541  f12d		       85 1f		      sta	ENABL
    542  f12f
    543  f12f		       a5 8f		      lda	player1height	;3
    544  f131		       c7 86		      dcp	player1y	;5
    545  f133		       90 d7		      bcc	.skipDrawlastP1
    546  f135		       a4 86		      ldy	player1y	;3
    547  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f139							; so it doesn't cross a page boundary!
    549  f139
    550  f139				   .continuelastP1
    551  f139		       85 1c		      sta	GRP1	;3
    552  f13b
    553  f13b					      ifnconst	player1colors
    554  f13b		       a5 87		      lda	missile1height	;3
    555  f13d		       c7 88		      dcp	missile1y	;5
    556  f13f				  -	      else
    557  f13f				  -	      lda	(player1color),y
    558  f13f				  -	      sta	COLUP1
    559  f13f					      endif
    560  f13f
    561  f13f		       ca		      dex
    562  f140							;dec temp4 ; might try putting this above PF writes
    563  f140		       f0 36		      beq	endkernel
    564  f142
    565  f142
    566  f142				  -	      ifconst	pfres
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f142				  -	      sty	PF1L	;3
    569  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f142				  -	      sty	PF2L	;3
    571  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f142				  -	      sty	PF1R	; possibly too early?
    573  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f142				  -	      sty	PF2R	;3
    575  f142					      else
    576  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f145		       84 0e		      sty	PF1L	;3
    578  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14a		       84 0f		      sty	PF2L	;3
    580  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f14f		       84 0e		      sty	PF1R	; possibly too early?
    582  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f154		       84 0f		      sty	PF2R	;3
    584  f156					      endif
    585  f156
    586  f156					      ifnconst	player1colors
    587  f156		       2a		      rol		;2
    588  f157		       2a		      rol		;2
    589  f158		       85 1e		      sta	ENAM1	;3
    590  f15a				  -	      else
    591  f15a				  -	      ifnconst	playercolors
    592  f15a				  -	      sleep	7
    593  f15a				  -	      else
    594  f15a				  -	      lda.w	player0colorstore
    595  f15a				  -	      sta	COLUP0
    596  f15a				  -	      endif
    597  f15a					      endif
    598  f15a
    599  f15a		       ad 8e 00 	      lda.w	player0height
    600  f15d		       c7 85		      dcp	player0y
    601  f15f		       90 11		      bcc	.skipDrawlastP0
    602  f161		       a4 85		      ldy	player0y
    603  f163		       b1 8a		      lda	(player0pointer),y
    604  f165				   .continuelastP0
    605  f165		       85 1b		      sta	GRP0
    606  f167
    607  f167
    608  f167
    609  f167					      ifnconst	no_blank_lines
    610  f167		       a5 90		      lda	missile0height	;3
    611  f169		       c7 91		      dcp	missile0y	;5
    612  f16b		       e5 f6		      sbc	stack1
    613  f16d		       85 1d		      sta	ENAM0	;3
    614  f16f		       4c 12 f1 	      jmp	.endkerloop
    615  f172				  -	      else
    616  f172				  -	      ifconst	readpaddle
    617  f172				  -	      ldy	currentpaddle
    618  f172				  -	      lda	INPT0,y
    619  f172				  -	      bpl	noreadpaddle2
    620  f172				  -	      inc	paddle
    621  f172				  -	      jmp	.endkerloop
    622  f172				  -noreadpaddle2
    623  f172				  -	      sleep	4
    624  f172				  -	      jmp	.endkerloop
    625  f172				  -	      else		; no_blank_lines and no paddle reading
    626  f172				  -	      pla
    627  f172				  -	      pha		; 14 cycles in 4 bytes
    628  f172				  -	      pla
    629  f172				  -	      pha
    630  f172				  -			; sleep 14
    631  f172				  -	      jmp	.endkerloop
    632  f172				  -	      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 65 f1 	      jmp	.continuelastP0
    647  f178
    648  f178				  -	      ifconst	no_blank_lines
    649  f178				  -no_blank_lines_bailout
    650  f178				  -	      ldx	#0
    651  f178					      endif
    652  f178
    653  f178				   endkernel
    654  f178							; 6 digit score routine
    655  f178		       86 0e		      stx	PF1
    656  f17a		       86 0f		      stx	PF2
    657  f17c		       86 0d		      stx	PF0
    658  f17e		       18		      clc
    659  f17f
    660  f17f				  -	      ifconst	pfrowheight
    661  f17f				  -	      lda	#pfrowheight+2
    662  f17f					      else
    663  f17f					      ifnconst	pfres
    664  f17f		       a9 0a		      lda	#10
    665  f181				  -	      else
    666  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f181					      endif
    668  f181					      endif
    669  f181
    670  f181		       e5 ef		      sbc	playfieldpos
    671  f183		       85 ef		      sta	playfieldpos
    672  f185		       8a		      txa
    673  f186
    674  f186				  -	      ifconst	shakescreen
    675  f186				  -	      bit	shakescreen
    676  f186				  -	      bmi	noshakescreen2
    677  f186				  -	      ldx	#$3D
    678  f186				  -noshakescreen2
    679  f186					      endif
    680  f186
    681  f186		       95 02		      sta	WSYNC,x
    682  f188
    683  f188							; STA WSYNC ;first one, need one more
    684  f188		       85 0b		      sta	REFP0
    685  f18a		       85 0c		      sta	REFP1
    686  f18c		       85 1b		      STA	GRP0
    687  f18e		       85 1c		      STA	GRP1
    688  f190							; STA PF1
    689  f190							; STA PF2
    690  f190		       85 2b		      sta	HMCLR
    691  f192		       85 1d		      sta	ENAM0
    692  f194		       85 1e		      sta	ENAM1
    693  f196		       85 1f		      sta	ENABL
    694  f198
    695  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19a		       85 85		      sta	player0y
    697  f19c		       a5 9e		      lda	temp3
    698  f19e		       85 86		      sta	player1y
    699  f1a0					      ifnconst	player1colors
    700  f1a0		       a5 a1		      lda	temp6
    701  f1a2		       85 88		      sta	missile1y
    702  f1a4					      endif
    703  f1a4					      ifnconst	playercolors
    704  f1a4					      ifnconst	readpaddle
    705  f1a4		       a5 a0		      lda	temp5
    706  f1a6		       85 91		      sta	missile0y
    707  f1a8					      endif
    708  f1a8					      endif
    709  f1a8		       a5 f7		      lda	stack2
    710  f1aa		       85 89		      sta	bally
    711  f1ac
    712  f1ac							; strangely, this isn't required any more. might have
    713  f1ac							; resulted from the no_blank_lines score bounce fix
    714  f1ac							;ifconst no_blank_lines
    715  f1ac							;sta WSYNC
    716  f1ac							;endif
    717  f1ac
    718  f1ac		       ad 84 02 	      lda	INTIM
    719  f1af		       18		      clc
    720  f1b0					      ifnconst	vblank_time
    721  f1b0		       69 8e		      adc	#43+12+87
    722  f1b2				  -	      else
    723  f1b2				  -	      adc	#vblank_time+12+87
    724  f1b2				  -
    725  f1b2					      endif
    726  f1b2							; sta WSYNC
    727  f1b2		       8d 96 02 	      sta	TIM64T
    728  f1b5
    729  f1b5				  -	      ifconst	minikernel
    730  f1b5				  -	      jsr	minikernel
    731  f1b5					      endif
    732  f1b5
    733  f1b5							; now reassign temp vars for score pointers
    734  f1b5
    735  f1b5							; score pointers contain:
    736  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b5							; swap lo2->temp1
    738  f1b5							; swap lo4->temp3
    739  f1b5							; swap lo6->temp5
    740  f1b5					      ifnconst	noscore
    741  f1b5		       a5 97		      lda	scorepointers+1
    742  f1b7							; ldy temp1
    743  f1b7		       85 9c		      sta	temp1
    744  f1b9							; sty scorepointers+1
    745  f1b9
    746  f1b9		       a5 99		      lda	scorepointers+3
    747  f1bb							; ldy temp3
    748  f1bb		       85 9e		      sta	temp3
    749  f1bd							; sty scorepointers+3
    750  f1bd
    751  f1bd
    752  f1bd		       85 2b		      sta	HMCLR
    753  f1bf		       ba		      tsx
    754  f1c0		       86 f6		      stx	stack1
    755  f1c2		       a2 e0		      ldx	#$E0
    756  f1c4		       86 20		      stx	HMP0
    757  f1c6
    758  f1c6		       a5 a3		      LDA	scorecolor
    759  f1c8		       85 06		      STA	COLUP0
    760  f1ca		       85 07		      STA	COLUP1
    761  f1cc				  -	      ifconst	scorefade
    762  f1cc				  -	      STA	stack2
    763  f1cc					      endif
    764  f1cc				  -	      ifconst	pfscore
    765  f1cc				  -	      lda	pfscorecolor
    766  f1cc				  -	      sta	COLUPF
    767  f1cc					      endif
    768  f1cc		       85 02		      sta	WSYNC
    769  f1ce		       a2 00		      ldx	#0
    770  f1d0		       86 1b		      STx	GRP0
    771  f1d2		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1d4
    773  f1d4		       a5 9b		      lda	scorepointers+5
    774  f1d6							; ldy temp5
    775  f1d6		       95 a0		      sta	temp5,x
    776  f1d8							; sty scorepointers+5
    777  f1d8		       a9 ff		      lda	#>scoretable
    778  f1da		       85 97		      sta	scorepointers+1
    779  f1dc		       85 99		      sta	scorepointers+3
    780  f1de		       85 9b		      sta	scorepointers+5
    781  f1e0		       85 9d		      sta	temp2
    782  f1e2		       85 9f		      sta	temp4
    783  f1e4		       85 a1		      sta	temp6
    784  f1e6		       a0 07		      LDY	#7
    785  f1e8		       84 25		      STY	VDELP0
    786  f1ea		       85 10		      STA	RESP0
    787  f1ec		       85 11		      STA	RESP1
    788  f1ee
    789  f1ee
    790  f1ee		       a9 03		      LDA	#$03
    791  f1f0		       85 04		      STA	NUSIZ0
    792  f1f2		       85 05		      STA	NUSIZ1
    793  f1f4		       85 26		      STA	VDELP1
    794  f1f6		       a9 f0		      LDA	#$F0
    795  f1f8		       85 21		      STA	HMP1
    796  f1fa		       b1 96		      lda	(scorepointers),y
    797  f1fc		       85 1b		      sta	GRP0
    798  f1fe		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f200		       4c 0b f2 	      jmp	beginscore
    800  f203
    801  f203
    802  f203				  -	      if	((<*)>$d4)
    803  f203				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f203					      endif
    805  f203
    806  f203				   loop2
    807  f203		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f205		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f207				  -	      ifconst	pfscore
    810  f207				  -	      lda.w	pfscore1
    811  f207				  -	      sta	PF1
    812  f207					      else
    813  f207				  -	      ifconst	scorefade
    814  f207				  -	      sleep	2
    815  f207				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f207					      else
      0  f207					      sleep	7
      1  f207				   .CYCLES    SET	7
      2  f207
      3  f207				  -	      IF	.CYCLES < 2
      4  f207				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f207				  -	      ERR
      6  f207					      ENDIF
      7  f207
      8  f207					      IF	.CYCLES & 1
      9  f207					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f207		       04 00		      nop	0
     11  f209				  -	      ELSE
     12  f209				  -	      bit	VSYNC
     13  f209					      ENDIF
     14  f209				   .CYCLES    SET	.CYCLES - 3
     15  f209					      ENDIF
     16  f209
     17  f209					      REPEAT	.CYCLES / 2
     18  f209		       ea		      nop
     17  f209					      REPEND
     18  f20a		       ea		      nop
     19  f20b					      REPEND
    818  f20b					      endif
    819  f20b					      endif
    820  f20b							; cycle 0
    821  f20b				   beginscore
    822  f20b		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f20d		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f20f		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f211		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f213		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f215		       9a		      txs
    828  f216		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f218				  -	      ifconst	scorefade
    830  f218				  -	      lda	stack2
    831  f218					      else
      0  f218					      sleep	3
      1  f218				   .CYCLES    SET	3
      2  f218
      3  f218				  -	      IF	.CYCLES < 2
      4  f218				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f218				  -	      ERR
      6  f218					      ENDIF
      7  f218
      8  f218					      IF	.CYCLES & 1
      9  f218					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f218		       04 00		      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a					      ENDIF
     14  f21a				   .CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a				  -	      REPEAT	.CYCLES / 2
     18  f21a				  -	      nop
     19  f21a					      REPEND
    833  f21a					      endif
    834  f21a
    835  f21a				  -	      ifconst	pfscore
    836  f21a				  -	      lda	pfscore2
    837  f21a				  -	      sta	PF1
    838  f21a					      else
    839  f21a				  -	      ifconst	scorefade
    840  f21a				  -	      sta	COLUP0
    841  f21a				  -	      sta	COLUP1
    842  f21a					      else
      0  f21a					      sleep	6
      1  f21a				   .CYCLES    SET	6
      2  f21a
      3  f21a				  -	      IF	.CYCLES < 2
      4  f21a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21a				  -	      ERR
      6  f21a					      ENDIF
      7  f21a
      8  f21a				  -	      IF	.CYCLES & 1
      9  f21a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21a				  -	      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a				  -	      ENDIF
     14  f21a				  -.CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a					      REPEAT	.CYCLES / 2
     18  f21a		       ea		      nop
     17  f21a					      REPEND
     18  f21b		       ea		      nop
     17  f21b					      REPEND
     18  f21c		       ea		      nop
     19  f21d					      REPEND
    844  f21d					      endif
    845  f21d					      endif
    846  f21d
    847  f21d		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f21f		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f221		       ba		      tsx
    850  f222		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f224		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f226		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f228		       88		      dey
    854  f229		       10 d8		      bpl	loop2	;+2 60 180
    855  f22b
    856  f22b		       a6 f6		      ldx	stack1
    857  f22d		       9a		      txs
    858  f22e							; lda scorepointers+1
    859  f22e		       a4 9c		      ldy	temp1
    860  f230							; sta temp1
    861  f230		       84 97		      sty	scorepointers+1
    862  f232
    863  f232		       a9 00		      LDA	#0
    864  f234		       85 0e		      sta	PF1
    865  f236		       85 1b		      STA	GRP0
    866  f238		       85 1c		      STA	GRP1
    867  f23a		       85 25		      STA	VDELP0
    868  f23c		       85 26		      STA	VDELP1	;do we need these
    869  f23e		       85 04		      STA	NUSIZ0
    870  f240		       85 05		      STA	NUSIZ1
    871  f242
    872  f242							; lda scorepointers+3
    873  f242		       a4 9e		      ldy	temp3
    874  f244							; sta temp3
    875  f244		       84 99		      sty	scorepointers+3
    876  f246
    877  f246							; lda scorepointers+5
    878  f246		       a4 a0		      ldy	temp5
    879  f248							; sta temp5
    880  f248		       84 9b		      sty	scorepointers+5
    881  f24a					      endif		;noscore
    882  f24a				  -	      ifconst	readpaddle
    883  f24a				  -	      lda	#%11000010
    884  f24a					      else
    885  f24a				  -	      ifconst	qtcontroller
    886  f24a				  -	      lda	qtcontroller
    887  f24a				  -	      lsr		; bit 0 in carry
    888  f24a				  -	      lda	#4
    889  f24a				  -	      ror		; carry into top of A
    890  f24a					      else
    891  f24a		       a9 02		      lda	#2
    892  f24c					      endif		; qtcontroller
    893  f24c					      endif		; readpaddle
    894  f24c		       85 02		      sta	WSYNC
    895  f24e		       85 01		      sta	VBLANK
      0  f250					      RETURN
      1  f250					      ifnconst	bankswitch
      2  f250		       60		      rts
      3  f251				  -	      else
      4  f251				  -	      jmp	BS_return
      5  f251					      endif
    897  f251				  -	      ifconst	shakescreen
    898  f251				  -doshakescreen
    899  f251				  -	      bit	shakescreen
    900  f251				  -	      bmi	noshakescreen
    901  f251				  -	      sta	WSYNC
    902  f251				  -noshakescreen
    903  f251				  -	      ldx	missile0height
    904  f251				  -	      inx
    905  f251				  -	      rts
    906  f251					      endif
    907  f251
    908  f251							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f251
    910  f251							; playfield drawing routines
    911  f251							; you get a 32x12 bitmapped display in a single color :)
    912  f251							; 0-31 and 0-11
    913  f251
    914  f251				   pfclear		; clears playfield - or fill with pattern
    915  f251				  -	      ifconst	pfres
    916  f251				  -	      ldx	#pfres*pfwidth-1
    917  f251					      else
    918  f251		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f253					      endif
    920  f253				   pfclear_loop
    921  f253					      ifnconst	superchip
    922  f253		       95 a4		      sta	playfield,x
    923  f255				  -	      else
    924  f255				  -	      sta	playfield-128,x
    925  f255					      endif
    926  f255		       ca		      dex
    927  f256		       10 fb		      bpl	pfclear_loop
      0  f258					      RETURN
      1  f258					      ifnconst	bankswitch
      2  f258		       60		      rts
      3  f259				  -	      else
      4  f259				  -	      jmp	BS_return
      5  f259					      endif
    929  f259
    930  f259				   setuppointers
    931  f259		       86 9d		      stx	temp2	; store on.off.flip value
    932  f25b		       aa		      tax		; put x-value in x 
    933  f25c		       4a		      lsr
    934  f25d		       4a		      lsr
    935  f25e		       4a		      lsr		; divide x pos by 8 
    936  f25f		       85 9c		      sta	temp1
    937  f261		       98		      tya
    938  f262		       0a		      asl
    939  f263					      if	pfwidth=4
    940  f263		       0a		      asl		; multiply y pos by 4
    941  f264					      endif		; else multiply by 2
    942  f264		       18		      clc
    943  f265		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f267		       a8		      tay		; put the value in y
    945  f268		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f26a		       60		      rts
    947  f26b
    948  f26b				   pfread
    949  f26b							;x=xvalue, y=yvalue
    950  f26b		       20 59 f2 	      jsr	setuppointers
    951  f26e		       bd d3 f2 	      lda	setbyte,x
    952  f271		       39 a4 00 	      and	playfield,y
    953  f274		       5d d3 f2 	      eor	setbyte,x
    954  f277							; beq readzero
    955  f277							; lda #1
    956  f277							; readzero
      0  f277					      RETURN
      1  f277					      ifnconst	bankswitch
      2  f277		       60		      rts
      3  f278				  -	      else
      4  f278				  -	      jmp	BS_return
      5  f278					      endif
    958  f278
    959  f278				   pfpixel
    960  f278							;x=xvalue, y=yvalue, a=0,1,2
    961  f278		       20 59 f2 	      jsr	setuppointers
    962  f27b
    963  f27b				  -	      ifconst	bankswitch
    964  f27b				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f27b				  -	      beq	pixelon_r	; if "on" go to on
    966  f27b				  -	      lsr
    967  f27b				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f27b				  -	      lda	playfield,y	; if here, it's "flip"
    969  f27b				  -	      eor	setbyte,x
    970  f27b				  -	      ifconst	superchip
    971  f27b				  -	      sta	playfield-128,y
    972  f27b				  -	      else
    973  f27b				  -	      sta	playfield,y
    974  f27b				  -	      endif
    975  f27b				  -	      RETURN
    976  f27b				  -pixelon_r
    977  f27b				  -	      lda	playfield,y
    978  f27b				  -	      ora	setbyte,x
    979  f27b				  -	      ifconst	superchip
    980  f27b				  -	      sta	playfield-128,y
    981  f27b				  -	      else
    982  f27b				  -	      sta	playfield,y
    983  f27b				  -	      endif
    984  f27b				  -	      RETURN
    985  f27b				  -pixeloff_r
    986  f27b				  -	      lda	setbyte,x
    987  f27b				  -	      eor	#$ff
    988  f27b				  -	      and	playfield,y
    989  f27b				  -	      ifconst	superchip
    990  f27b				  -	      sta	playfield-128,y
    991  f27b				  -	      else
    992  f27b				  -	      sta	playfield,y
    993  f27b				  -	      endif
    994  f27b				  -	      RETURN
    995  f27b				  -
    996  f27b					      else
    997  f27b		       4c ac f2 	      jmp	plotpoint
    998  f27e					      endif
    999  f27e
   1000  f27e				   pfhline
   1001  f27e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f27e		       20 59 f2 	      jsr	setuppointers
   1003  f281		       4c 8b f2 	      jmp	noinc
   1004  f284				   keepgoing
   1005  f284		       e8		      inx
   1006  f285		       8a		      txa
   1007  f286		       29 07		      and	#7
   1008  f288		       d0 01		      bne	noinc
   1009  f28a		       c8		      iny
   1010  f28b				   noinc
   1011  f28b		       20 ac f2 	      jsr	plotpoint
   1012  f28e		       e4 9e		      cpx	temp3
   1013  f290		       30 f2		      bmi	keepgoing
      0  f292					      RETURN
      1  f292					      ifnconst	bankswitch
      2  f292		       60		      rts
      3  f293				  -	      else
      4  f293				  -	      jmp	BS_return
      5  f293					      endif
   1015  f293
   1016  f293				   pfvline
   1017  f293							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f293		       20 59 f2 	      jsr	setuppointers
   1019  f296		       84 9c		      sty	temp1	; store memory location offset
   1020  f298		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f29a		       a5 9e		      lda	temp3
   1022  f29c		       0a		      asl
   1023  f29d					      if	pfwidth=4
   1024  f29d		       0a		      asl		; multiply by 4
   1025  f29e					      endif		; else multiply by 2
   1026  f29e		       85 9e		      sta	temp3	; store it
   1027  f2a0							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2a0							; right now, temp1=y=starting memory location, temp3=final
   1029  f2a0							; x should equal original x value
   1030  f2a0				   keepgoingy
   1031  f2a0		       20 ac f2 	      jsr	plotpoint
   1032  f2a3		       c8		      iny
   1033  f2a4		       c8		      iny
   1034  f2a5					      if	pfwidth=4
   1035  f2a5		       c8		      iny
   1036  f2a6		       c8		      iny
   1037  f2a7					      endif
   1038  f2a7		       c4 9e		      cpy	temp3
   1039  f2a9		       30 f5		      bmi	keepgoingy
      0  f2ab					      RETURN
      1  f2ab					      ifnconst	bankswitch
      2  f2ab		       60		      rts
      3  f2ac				  -	      else
      4  f2ac				  -	      jmp	BS_return
      5  f2ac					      endif
   1041  f2ac
   1042  f2ac				   plotpoint
   1043  f2ac		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2ae		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2b0		       4a		      lsr
   1046  f2b1		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2b3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2b6		       5d d3 f2 	      eor	setbyte,x
   1049  f2b9				  -	      ifconst	superchip
   1050  f2b9				  -	      sta	playfield-128,y
   1051  f2b9					      else
   1052  f2b9		       99 a4 00 	      sta	playfield,y
   1053  f2bc					      endif
   1054  f2bc		       60		      rts
   1055  f2bd				   pixelon
   1056  f2bd		       b9 a4 00 	      lda	playfield,y
   1057  f2c0		       1d d3 f2 	      ora	setbyte,x
   1058  f2c3				  -	      ifconst	superchip
   1059  f2c3				  -	      sta	playfield-128,y
   1060  f2c3					      else
   1061  f2c3		       99 a4 00 	      sta	playfield,y
   1062  f2c6					      endif
   1063  f2c6		       60		      rts
   1064  f2c7				   pixeloff
   1065  f2c7		       bd d3 f2 	      lda	setbyte,x
   1066  f2ca		       49 ff		      eor	#$ff
   1067  f2cc		       39 a4 00 	      and	playfield,y
   1068  f2cf				  -	      ifconst	superchip
   1069  f2cf				  -	      sta	playfield-128,y
   1070  f2cf					      else
   1071  f2cf		       99 a4 00 	      sta	playfield,y
   1072  f2d2					      endif
   1073  f2d2		       60		      rts
   1074  f2d3
   1075  f2d3				   setbyte
   1076  f2d3					      ifnconst	pfcenter
   1077  f2d3		       80		      .byte.b	$80
   1078  f2d4		       40		      .byte.b	$40
   1079  f2d5		       20		      .byte.b	$20
   1080  f2d6		       10		      .byte.b	$10
   1081  f2d7		       08		      .byte.b	$08
   1082  f2d8		       04		      .byte.b	$04
   1083  f2d9		       02		      .byte.b	$02
   1084  f2da		       01		      .byte.b	$01
   1085  f2db					      endif
   1086  f2db		       01		      .byte.b	$01
   1087  f2dc		       02		      .byte.b	$02
   1088  f2dd		       04		      .byte.b	$04
   1089  f2de		       08		      .byte.b	$08
   1090  f2df		       10		      .byte.b	$10
   1091  f2e0		       20		      .byte.b	$20
   1092  f2e1		       40		      .byte.b	$40
   1093  f2e2		       80		      .byte.b	$80
   1094  f2e3		       80		      .byte.b	$80
   1095  f2e4		       40		      .byte.b	$40
   1096  f2e5		       20		      .byte.b	$20
   1097  f2e6		       10		      .byte.b	$10
   1098  f2e7		       08		      .byte.b	$08
   1099  f2e8		       04		      .byte.b	$04
   1100  f2e9		       02		      .byte.b	$02
   1101  f2ea		       01		      .byte.b	$01
   1102  f2eb		       01		      .byte.b	$01
   1103  f2ec		       02		      .byte.b	$02
   1104  f2ed		       04		      .byte.b	$04
   1105  f2ee		       08		      .byte.b	$08
   1106  f2ef		       10		      .byte.b	$10
   1107  f2f0		       20		      .byte.b	$20
   1108  f2f1		       40		      .byte.b	$40
   1109  f2f2		       80		      .byte.b	$80
   1110  f2f3							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f2f3
   1112  f2f3				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f2f3		       d0 13		      bne	notleft
   1114  f2f5							;left
   1115  f2f5				  -	      ifconst	pfres
   1116  f2f5				  -	      ldx	#pfres*4
   1117  f2f5					      else
   1118  f2f5		       a2 30		      ldx	#48
   1119  f2f7					      endif
   1120  f2f7				   leftloop
   1121  f2f7		       b5 a3		      lda	playfield-1,x
   1122  f2f9		       4a		      lsr
   1123  f2fa
   1124  f2fa				  -	      ifconst	superchip
   1125  f2fa				  -	      lda	playfield-2,x
   1126  f2fa				  -	      rol
   1127  f2fa				  -	      sta	playfield-130,x
   1128  f2fa				  -	      lda	playfield-3,x
   1129  f2fa				  -	      ror
   1130  f2fa				  -	      sta	playfield-131,x
   1131  f2fa				  -	      lda	playfield-4,x
   1132  f2fa				  -	      rol
   1133  f2fa				  -	      sta	playfield-132,x
   1134  f2fa				  -	      lda	playfield-1,x
   1135  f2fa				  -	      ror
   1136  f2fa				  -	      sta	playfield-129,x
   1137  f2fa					      else
   1138  f2fa		       36 a2		      rol	playfield-2,x
   1139  f2fc		       76 a1		      ror	playfield-3,x
   1140  f2fe		       36 a0		      rol	playfield-4,x
   1141  f300		       76 a3		      ror	playfield-1,x
   1142  f302					      endif
   1143  f302
   1144  f302		       8a		      txa
   1145  f303		       cb 04		      sbx	#4
   1146  f305		       d0 f0		      bne	leftloop
      0  f307					      RETURN
      1  f307					      ifnconst	bankswitch
      2  f307		       60		      rts
      3  f308				  -	      else
      4  f308				  -	      jmp	BS_return
      5  f308					      endif
   1148  f308
   1149  f308				   notleft
   1150  f308		       4a		      lsr
   1151  f309		       90 13		      bcc	notright
   1152  f30b							;right
   1153  f30b
   1154  f30b				  -	      ifconst	pfres
   1155  f30b				  -	      ldx	#pfres*4
   1156  f30b					      else
   1157  f30b		       a2 30		      ldx	#48
   1158  f30d					      endif
   1159  f30d				   rightloop
   1160  f30d		       b5 a0		      lda	playfield-4,x
   1161  f30f		       4a		      lsr
   1162  f310				  -	      ifconst	superchip
   1163  f310				  -	      lda	playfield-3,x
   1164  f310				  -	      rol
   1165  f310				  -	      sta	playfield-131,x
   1166  f310				  -	      lda	playfield-2,x
   1167  f310				  -	      ror
   1168  f310				  -	      sta	playfield-130,x
   1169  f310				  -	      lda	playfield-1,x
   1170  f310				  -	      rol
   1171  f310				  -	      sta	playfield-129,x
   1172  f310				  -	      lda	playfield-4,x
   1173  f310				  -	      ror
   1174  f310				  -	      sta	playfield-132,x
   1175  f310					      else
   1176  f310		       36 a1		      rol	playfield-3,x
   1177  f312		       76 a2		      ror	playfield-2,x
   1178  f314		       36 a3		      rol	playfield-1,x
   1179  f316		       76 a0		      ror	playfield-4,x
   1180  f318					      endif
   1181  f318		       8a		      txa
   1182  f319		       cb 04		      sbx	#4
   1183  f31b		       d0 f0		      bne	rightloop
      0  f31d					      RETURN
      1  f31d					      ifnconst	bankswitch
      2  f31d		       60		      rts
      3  f31e				  -	      else
      4  f31e				  -	      jmp	BS_return
      5  f31e					      endif
   1185  f31e
   1186  f31e				   notright
   1187  f31e		       4a		      lsr
   1188  f31f		       90 49		      bcc	notup
   1189  f321							;up
   1190  f321		       4a		      lsr
   1191  f322		       90 02		      bcc	onedecup
   1192  f324		       c6 ef		      dec	playfieldpos
   1193  f326				   onedecup
   1194  f326		       c6 ef		      dec	playfieldpos
   1195  f328		       f0 02		      beq	shiftdown
   1196  f32a		       10 3d		      bpl	noshiftdown2
   1197  f32c				   shiftdown
   1198  f32c				  -	      ifconst	pfrowheight
   1199  f32c				  -	      lda	#pfrowheight
   1200  f32c					      else
   1201  f32c					      ifnconst	pfres
   1202  f32c		       a9 08		      lda	#8
   1203  f32e				  -	      else
   1204  f32e				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f32e					      endif
   1206  f32e					      endif
   1207  f32e
   1208  f32e		       85 ef		      sta	playfieldpos
   1209  f330		       a5 a7		      lda	playfield+3
   1210  f332		       85 9f		      sta	temp4
   1211  f334		       a5 a6		      lda	playfield+2
   1212  f336		       85 9e		      sta	temp3
   1213  f338		       a5 a5		      lda	playfield+1
   1214  f33a		       85 9d		      sta	temp2
   1215  f33c		       a5 a4		      lda	playfield
   1216  f33e		       85 9c		      sta	temp1
   1217  f340		       a2 00		      ldx	#0
   1218  f342				   up2
   1219  f342		       b5 a8		      lda	playfield+4,x
   1220  f344				  -	      ifconst	superchip
   1221  f344				  -	      sta	playfield-128,x
   1222  f344				  -	      lda	playfield+5,x
   1223  f344				  -	      sta	playfield-127,x
   1224  f344				  -	      lda	playfield+6,x
   1225  f344				  -	      sta	playfield-126,x
   1226  f344				  -	      lda	playfield+7,x
   1227  f344				  -	      sta	playfield-125,x
   1228  f344					      else
   1229  f344		       95 a4		      sta	playfield,x
   1230  f346		       b5 a9		      lda	playfield+5,x
   1231  f348		       95 a5		      sta	playfield+1,x
   1232  f34a		       b5 aa		      lda	playfield+6,x
   1233  f34c		       95 a6		      sta	playfield+2,x
   1234  f34e		       b5 ab		      lda	playfield+7,x
   1235  f350		       95 a7		      sta	playfield+3,x
   1236  f352					      endif
   1237  f352		       8a		      txa
   1238  f353		       cb fc		      sbx	#252
   1239  f355				  -	      ifconst	pfres
   1240  f355				  -	      cpx	#(pfres-1)*4
   1241  f355					      else
   1242  f355		       e0 2c		      cpx	#44
   1243  f357					      endif
   1244  f357		       d0 e9		      bne	up2
   1245  f359
   1246  f359		       a5 9f		      lda	temp4
   1247  f35b
   1248  f35b				  -	      ifconst	superchip
   1249  f35b				  -	      ifconst	pfres
   1250  f35b				  -	      sta	playfield+pfres*4-129
   1251  f35b				  -	      lda	temp3
   1252  f35b				  -	      sta	playfield+pfres*4-130
   1253  f35b				  -	      lda	temp2
   1254  f35b				  -	      sta	playfield+pfres*4-131
   1255  f35b				  -	      lda	temp1
   1256  f35b				  -	      sta	playfield+pfres*4-132
   1257  f35b				  -	      else
   1258  f35b				  -	      sta	playfield+47-128
   1259  f35b				  -	      lda	temp3
   1260  f35b				  -	      sta	playfield+46-128
   1261  f35b				  -	      lda	temp2
   1262  f35b				  -	      sta	playfield+45-128
   1263  f35b				  -	      lda	temp1
   1264  f35b				  -	      sta	playfield+44-128
   1265  f35b				  -	      endif
   1266  f35b					      else
   1267  f35b				  -	      ifconst	pfres
   1268  f35b				  -	      sta	playfield+pfres*4-1
   1269  f35b				  -	      lda	temp3
   1270  f35b				  -	      sta	playfield+pfres*4-2
   1271  f35b				  -	      lda	temp2
   1272  f35b				  -	      sta	playfield+pfres*4-3
   1273  f35b				  -	      lda	temp1
   1274  f35b				  -	      sta	playfield+pfres*4-4
   1275  f35b					      else
   1276  f35b		       85 d3		      sta	playfield+47
   1277  f35d		       a5 9e		      lda	temp3
   1278  f35f		       85 d2		      sta	playfield+46
   1279  f361		       a5 9d		      lda	temp2
   1280  f363		       85 d1		      sta	playfield+45
   1281  f365		       a5 9c		      lda	temp1
   1282  f367		       85 d0		      sta	playfield+44
   1283  f369					      endif
   1284  f369					      endif
   1285  f369				   noshiftdown2
      0  f369					      RETURN
      1  f369					      ifnconst	bankswitch
      2  f369		       60		      rts
      3  f36a				  -	      else
      4  f36a				  -	      jmp	BS_return
      5  f36a					      endif
   1287  f36a
   1288  f36a
   1289  f36a				   notup
   1290  f36a							;down
   1291  f36a		       4a		      lsr
   1292  f36b		       b0 02		      bcs	oneincup
   1293  f36d		       e6 ef		      inc	playfieldpos
   1294  f36f				   oneincup
   1295  f36f		       e6 ef		      inc	playfieldpos
   1296  f371		       a5 ef		      lda	playfieldpos
   1297  f373
   1298  f373				  -	      ifconst	pfrowheight
   1299  f373				  -	      cmp	#pfrowheight+1
   1300  f373					      else
   1301  f373					      ifnconst	pfres
   1302  f373		       c9 09		      cmp	#9
   1303  f375				  -	      else
   1304  f375				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f375					      endif
   1306  f375					      endif
   1307  f375
   1308  f375		       90 3b		      bcc	noshiftdown
   1309  f377		       a9 01		      lda	#1
   1310  f379		       85 ef		      sta	playfieldpos
   1311  f37b
   1312  f37b				  -	      ifconst	pfres
   1313  f37b				  -	      lda	playfield+pfres*4-1
   1314  f37b				  -	      sta	temp4
   1315  f37b				  -	      lda	playfield+pfres*4-2
   1316  f37b				  -	      sta	temp3
   1317  f37b				  -	      lda	playfield+pfres*4-3
   1318  f37b				  -	      sta	temp2
   1319  f37b				  -	      lda	playfield+pfres*4-4
   1320  f37b					      else
   1321  f37b		       a5 d3		      lda	playfield+47
   1322  f37d		       85 9f		      sta	temp4
   1323  f37f		       a5 d2		      lda	playfield+46
   1324  f381		       85 9e		      sta	temp3
   1325  f383		       a5 d1		      lda	playfield+45
   1326  f385		       85 9d		      sta	temp2
   1327  f387		       a5 d0		      lda	playfield+44
   1328  f389					      endif
   1329  f389
   1330  f389		       85 9c		      sta	temp1
   1331  f38b
   1332  f38b				  -	      ifconst	pfres
   1333  f38b				  -	      ldx	#(pfres-1)*4
   1334  f38b					      else
   1335  f38b		       a2 2c		      ldx	#44
   1336  f38d					      endif
   1337  f38d				   down2
   1338  f38d		       b5 a3		      lda	playfield-1,x
   1339  f38f				  -	      ifconst	superchip
   1340  f38f				  -	      sta	playfield-125,x
   1341  f38f				  -	      lda	playfield-2,x
   1342  f38f				  -	      sta	playfield-126,x
   1343  f38f				  -	      lda	playfield-3,x
   1344  f38f				  -	      sta	playfield-127,x
   1345  f38f				  -	      lda	playfield-4,x
   1346  f38f				  -	      sta	playfield-128,x
   1347  f38f					      else
   1348  f38f		       95 a7		      sta	playfield+3,x
   1349  f391		       b5 a2		      lda	playfield-2,x
   1350  f393		       95 a6		      sta	playfield+2,x
   1351  f395		       b5 a1		      lda	playfield-3,x
   1352  f397		       95 a5		      sta	playfield+1,x
   1353  f399		       b5 a0		      lda	playfield-4,x
   1354  f39b		       95 a4		      sta	playfield,x
   1355  f39d					      endif
   1356  f39d		       8a		      txa
   1357  f39e		       cb 04		      sbx	#4
   1358  f3a0		       d0 eb		      bne	down2
   1359  f3a2
   1360  f3a2		       a5 9f		      lda	temp4
   1361  f3a4				  -	      ifconst	superchip
   1362  f3a4				  -	      sta	playfield-125
   1363  f3a4				  -	      lda	temp3
   1364  f3a4				  -	      sta	playfield-126
   1365  f3a4				  -	      lda	temp2
   1366  f3a4				  -	      sta	playfield-127
   1367  f3a4				  -	      lda	temp1
   1368  f3a4				  -	      sta	playfield-128
   1369  f3a4					      else
   1370  f3a4		       85 a7		      sta	playfield+3
   1371  f3a6		       a5 9e		      lda	temp3
   1372  f3a8		       85 a6		      sta	playfield+2
   1373  f3aa		       a5 9d		      lda	temp2
   1374  f3ac		       85 a5		      sta	playfield+1
   1375  f3ae		       a5 9c		      lda	temp1
   1376  f3b0		       85 a4		      sta	playfield
   1377  f3b2					      endif
   1378  f3b2				   noshiftdown
      0  f3b2					      RETURN
      1  f3b2					      ifnconst	bankswitch
      2  f3b2		       60		      rts
      3  f3b3				  -	      else
      4  f3b3				  -	      jmp	BS_return
      5  f3b3					      endif
   1380  f3b3							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3b3
   1382  f3b3							;standard routines needed for pretty much all games
   1383  f3b3							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3b3							; repositioning code and score pointer setup moved to overscan
   1385  f3b3							; read switches, joysticks now compiler generated (more efficient)
   1386  f3b3
   1387  f3b3				   randomize
   1388  f3b3		       a5 a2		      lda	rand
   1389  f3b5		       4a		      lsr
   1390  f3b6				  -	      ifconst	rand16
   1391  f3b6				  -	      rol	rand16
   1392  f3b6					      endif
   1393  f3b6		       90 02		      bcc	noeor
   1394  f3b8		       49 b4		      eor	#$B4
   1395  f3ba				   noeor
   1396  f3ba		       85 a2		      sta	rand
   1397  f3bc				  -	      ifconst	rand16
   1398  f3bc				  -	      eor	rand16
   1399  f3bc					      endif
      0  f3bc					      RETURN
      1  f3bc					      ifnconst	bankswitch
      2  f3bc		       60		      rts
      3  f3bd				  -	      else
      4  f3bd				  -	      jmp	BS_return
      5  f3bd					      endif
   1401  f3bd							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3bd
   1403  f3bd				   drawscreen
   1404  f3bd				  -	      ifconst	debugscore
   1405  f3bd				  -	      ldx	#14
   1406  f3bd				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3bd				  -
   1408  f3bd				  -	      ifconst	mincycles
   1409  f3bd				  -	      lda	mincycles
   1410  f3bd				  -	      cmp	INTIM
   1411  f3bd				  -	      lda	mincycles
   1412  f3bd				  -	      bcc	nochange
   1413  f3bd				  -	      lda	INTIM
   1414  f3bd				  -	      sta	mincycles
   1415  f3bd				  -nochange
   1416  f3bd				  -	      endif
   1417  f3bd				  -
   1418  f3bd				  -			; cmp #$2B
   1419  f3bd				  -			; bcs no_cycles_left
   1420  f3bd				  -	      bmi	cycles_left
   1421  f3bd				  -	      ldx	#64
   1422  f3bd				  -	      eor	#$ff	;make negative
   1423  f3bd				  -cycles_left
   1424  f3bd				  -	      stx	scorecolor
   1425  f3bd				  -	      and	#$7f	; clear sign bit
   1426  f3bd				  -	      tax
   1427  f3bd				  -	      lda	scorebcd,x
   1428  f3bd				  -	      sta	score+2
   1429  f3bd				  -	      lda	scorebcd1,x
   1430  f3bd				  -	      sta	score+1
   1431  f3bd				  -	      jmp	done_debugscore
   1432  f3bd				  -scorebcd
   1433  f3bd				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3bd				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3bd				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3bd				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3bd				  -scorebcd1
   1438  f3bd				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3bd				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3bd				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3bd				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3bd				  -done_debugscore
   1443  f3bd					      endif
   1444  f3bd
   1445  f3bd				  -	      ifconst	debugcycles
   1446  f3bd				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3bd				  -			; cmp #$2B
   1448  f3bd				  -			; BCC overscan
   1449  f3bd				  -	      bmi	overscan
   1450  f3bd				  -	      sta	COLUBK
   1451  f3bd				  -	      bcs	doneoverscan
   1452  f3bd					      endif
   1453  f3bd
   1454  f3bd				   overscan
   1455  f3bd				  -	      ifconst	interlaced
   1456  f3bd				  -	      PHP
   1457  f3bd				  -	      PLA
   1458  f3bd				  -	      EOR	#4	; flip interrupt bit
   1459  f3bd				  -	      PHA
   1460  f3bd				  -	      PLP
   1461  f3bd				  -	      AND	#4	; isolate the interrupt bit
   1462  f3bd				  -	      TAX		; save it for later
   1463  f3bd					      endif
   1464  f3bd
   1465  f3bd				   overscanloop
   1466  f3bd		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3c0		       30 fb		      bmi	overscanloop
   1468  f3c2				   doneoverscan
   1469  f3c2
   1470  f3c2							;do VSYNC
   1471  f3c2
   1472  f3c2				  -	      ifconst	interlaced
   1473  f3c2				  -	      CPX	#4
   1474  f3c2				  -	      BNE	oddframevsync
   1475  f3c2					      endif
   1476  f3c2
   1477  f3c2		       a9 02		      lda	#2
   1478  f3c4		       85 02		      sta	WSYNC
   1479  f3c6		       85 00		      sta	VSYNC
   1480  f3c8		       85 02		      STA	WSYNC
   1481  f3ca		       85 02		      STA	WSYNC
   1482  f3cc		       4a		      lsr
   1483  f3cd		       85 02		      STA	WSYNC
   1484  f3cf		       85 00		      STA	VSYNC
   1485  f3d1		       85 01		      sta	VBLANK
   1486  f3d3					      ifnconst	overscan_time
   1487  f3d3		       a9 a5		      lda	#37+128
   1488  f3d5				  -	      else
   1489  f3d5				  -	      lda	#overscan_time+128
   1490  f3d5					      endif
   1491  f3d5		       8d 96 02 	      sta	TIM64T
   1492  f3d8
   1493  f3d8				  -	      ifconst	interlaced
   1494  f3d8				  -	      jmp	postsync
   1495  f3d8				  -
   1496  f3d8				  -oddframevsync
   1497  f3d8				  -	      sta	WSYNC
   1498  f3d8				  -
   1499  f3d8				  -	      LDA	($80,X)	; 11 waste
   1500  f3d8				  -	      LDA	($80,X)	; 11 waste
   1501  f3d8				  -	      LDA	($80,X)	; 11 waste
   1502  f3d8				  -
   1503  f3d8				  -	      lda	#2
   1504  f3d8				  -	      sta	VSYNC
   1505  f3d8				  -	      sta	WSYNC
   1506  f3d8				  -	      sta	WSYNC
   1507  f3d8				  -	      sta	WSYNC
   1508  f3d8				  -
   1509  f3d8				  -	      LDA	($80,X)	; 11 waste
   1510  f3d8				  -	      LDA	($80,X)	; 11 waste
   1511  f3d8				  -	      LDA	($80,X)	; 11 waste
   1512  f3d8				  -
   1513  f3d8				  -	      lda	#0
   1514  f3d8				  -	      sta	VSYNC
   1515  f3d8				  -	      sta	VBLANK
   1516  f3d8				  -	      ifnconst	overscan_time
   1517  f3d8				  -	      lda	#37+128
   1518  f3d8				  -	      else
   1519  f3d8				  -	      lda	#overscan_time+128
   1520  f3d8				  -	      endif
   1521  f3d8				  -	      sta	TIM64T
   1522  f3d8				  -
   1523  f3d8				  -postsync
   1524  f3d8					      endif
   1525  f3d8
   1526  f3d8				  -	      ifconst	legacy
   1527  f3d8				  -	      if	legacy < 100
   1528  f3d8				  -	      ldx	#4
   1529  f3d8				  -adjustloop
   1530  f3d8				  -	      lda	player0x,x
   1531  f3d8				  -	      sec
   1532  f3d8				  -	      sbc	#14	;?
   1533  f3d8				  -	      sta	player0x,x
   1534  f3d8				  -	      dex
   1535  f3d8				  -	      bpl	adjustloop
   1536  f3d8				  -	      endif
   1537  f3d8					      endif
   1538  f3d8				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3d8				  -	      repeat	($fa-(<*))
   1540  f3d8				  -	      nop
   1541  f3d8				  -	      repend
   1542  f3d8					      endif
   1543  f3d8		       85 02		      sta	WSYNC
   1544  f3da		       a2 04		      ldx	#4
      0  f3dc					      SLEEP	3
      1  f3dc				   .CYCLES    SET	3
      2  f3dc
      3  f3dc				  -	      IF	.CYCLES < 2
      4  f3dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3dc				  -	      ERR
      6  f3dc					      ENDIF
      7  f3dc
      8  f3dc					      IF	.CYCLES & 1
      9  f3dc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3dc		       04 00		      nop	0
     11  f3de				  -	      ELSE
     12  f3de				  -	      bit	VSYNC
     13  f3de					      ENDIF
     14  f3de				   .CYCLES    SET	.CYCLES - 3
     15  f3de					      ENDIF
     16  f3de
     17  f3de				  -	      REPEAT	.CYCLES / 2
     18  f3de				  -	      nop
     19  f3de					      REPEND
   1546  f3de				   HorPosLoop		; 5
   1547  f3de		       b5 80		      lda	player0x,X	;+4 9
   1548  f3e0		       38		      sec		;+2 11
   1549  f3e1				   DivideLoop
   1550  f3e1		       e9 0f		      sbc	#15
   1551  f3e3		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3e5		       95 9c		      sta	temp1,X	;+4 19
   1553  f3e7		       95 10		      sta	RESP0,X	;+4 23
   1554  f3e9		       85 02		      sta	WSYNC
   1555  f3eb		       ca		      dex
   1556  f3ec		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3ee							; 4
   1558  f3ee
   1559  f3ee		       a2 04		      ldx	#4
   1560  f3f0		       b4 9c		      ldy	temp1,X
   1561  f3f2		       b9 4e f3 	      lda	repostable-256,Y
   1562  f3f5		       95 20		      sta	HMP0,X	;+14 18
   1563  f3f7
   1564  f3f7		       ca		      dex
   1565  f3f8		       b4 9c		      ldy	temp1,X
   1566  f3fa		       b9 4e f3 	      lda	repostable-256,Y
   1567  f3fd		       95 20		      sta	HMP0,X	;+14 32
   1568  f3ff
   1569  f3ff		       ca		      dex
   1570  f400		       b4 9c		      ldy	temp1,X
   1571  f402		       b9 4e f3 	      lda	repostable-256,Y
   1572  f405		       95 20		      sta	HMP0,X	;+14 46
   1573  f407
   1574  f407		       ca		      dex
   1575  f408		       b4 9c		      ldy	temp1,X
   1576  f40a		       b9 4e f3 	      lda	repostable-256,Y
   1577  f40d		       95 20		      sta	HMP0,X	;+14 60
   1578  f40f
   1579  f40f		       ca		      dex
   1580  f410		       b4 9c		      ldy	temp1,X
   1581  f412		       b9 4e f3 	      lda	repostable-256,Y
   1582  f415		       95 20		      sta	HMP0,X	;+14 74
   1583  f417
   1584  f417		       85 02		      sta	WSYNC
   1585  f419
   1586  f419		       85 2a		      sta	HMOVE	;+3 3
   1587  f41b
   1588  f41b
   1589  f41b				  -	      ifconst	legacy
   1590  f41b				  -	      if	legacy < 100
   1591  f41b				  -	      ldx	#4
   1592  f41b				  -adjustloop2
   1593  f41b				  -	      lda	player0x,x
   1594  f41b				  -	      clc
   1595  f41b				  -	      adc	#14	;?
   1596  f41b				  -	      sta	player0x,x
   1597  f41b				  -	      dex
   1598  f41b				  -	      bpl	adjustloop2
   1599  f41b				  -	      endif
   1600  f41b					      endif
   1601  f41b
   1602  f41b
   1603  f41b
   1604  f41b
   1605  f41b							;set score pointers
   1606  f41b		       a7 95		      lax	score+2
   1607  f41d		       20 4e f4 	      jsr	scorepointerset
   1608  f420		       84 9b		      sty	scorepointers+5
   1609  f422		       86 98		      stx	scorepointers+2
   1610  f424		       a7 94		      lax	score+1
   1611  f426		       20 4e f4 	      jsr	scorepointerset
   1612  f429		       84 9a		      sty	scorepointers+4
   1613  f42b		       86 97		      stx	scorepointers+1
   1614  f42d		       a7 93		      lax	score
   1615  f42f		       20 4e f4 	      jsr	scorepointerset
   1616  f432		       84 99		      sty	scorepointers+3
   1617  f434		       86 96		      stx	scorepointers
   1618  f436
   1619  f436				   vblk
   1620  f436							; run possible vblank bB code
   1621  f436				  -	      ifconst	vblank_bB_code
   1622  f436				  -	      jsr	vblank_bB_code
   1623  f436					      endif
   1624  f436				   vblk2
   1625  f436		       ad 84 02 	      LDA	INTIM
   1626  f439		       30 fb		      bmi	vblk2
   1627  f43b		       4c 34 f0 	      jmp	kernel
   1628  f43e
   1629  f43e
   1630  f43e		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f447		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f44e				   repostable
   1633  f44e
   1634  f44e				   scorepointerset
   1635  f44e		       29 0f		      and	#$0F
   1636  f450		       0a		      asl
   1637  f451		       0a		      asl
   1638  f452		       0a		      asl
   1639  f453		       69 9c		      adc	#<scoretable
   1640  f455		       a8		      tay
   1641  f456		       8a		      txa
   1642  f457							; and #$F0
   1643  f457							; lsr
   1644  f457		       4b f0		      asr	#$F0
   1645  f459		       69 9c		      adc	#<scoretable
   1646  f45b		       aa		      tax
   1647  f45c		       60		      rts
   1648  f45d				   game
   1649  f45d				   .L00 		;  rem ---------------------------------------------------------------------------------
   1650  f45d
   1651  f45d				   .L01 		;  rem Shadow Over Space an Atari Game by James Weeks 2025 
   1652  f45d
   1653  f45d				   .
   1654  f45d							; 
   1655  f45d
   1656  f45d				   .L02 		;  rem ---------------------------------------------------------------------------------  
   1657  f45d
   1658  f45d				   .L03 		;  set romsize 4k  :  rem set rom size for cartridge and IDE
   1659  f45d
   1660  f45d				   .
   1661  f45d							; 
   1662  f45d
   1663  f45d				   .L04 		;  rem variables
   1664  f45d
   1665  f45d				   .L05 		;  rem ----------------------------------------------------------------------------
   1666  f45d
   1667  f45d				   .L06 		;  c{1} = 0  : rem Turned on if the last location of the joystick was UP
   1668  f45d
   1669  f45d		       a5 d6		      LDA	c
   1670  f45f		       29 fd		      AND	#253
   1671  f461		       85 d6		      STA	c
   1672  f463				   .L07 		;  c{2} = 0  : rem Turned on if the last location of the joystick was DOWN
   1673  f463
   1674  f463		       a5 d6		      LDA	c
   1675  f465		       29 fb		      AND	#251
   1676  f467		       85 d6		      STA	c
   1677  f469				   .L08 		;  c{3} = 0  : rem Turned on if the last location of the joystick was LEFT
   1678  f469
   1679  f469		       a5 d6		      LDA	c
   1680  f46b		       29 f7		      AND	#247
   1681  f46d		       85 d6		      STA	c
   1682  f46f				   .L09 		;  c{4} = 1  : rem Turned on if the last location of the joystick was RIGHT
   1683  f46f
   1684  f46f		       a5 d6		      LDA	c
   1685  f471		       09 10		      ORA	#16
   1686  f473		       85 d6		      STA	c
   1687  f475				   .L010		;  c{5} = 0  : rem Turned on if the last location of the joystick was UP+LEFT
   1688  f475
   1689  f475		       a5 d6		      LDA	c
   1690  f477		       29 df		      AND	#223
   1691  f479		       85 d6		      STA	c
   1692  f47b				   .L011		;  c{6} = 0  : rem Turned on if the last location of the joystick was UP+RIGHT
   1693  f47b
   1694  f47b		       a5 d6		      LDA	c
   1695  f47d		       29 bf		      AND	#191
   1696  f47f		       85 d6		      STA	c
   1697  f481				   .L012		;  c{7} = 0  : rem Turned on if the last location of the joystick was DOWN+LEFT
   1698  f481
   1699  f481		       a5 d6		      LDA	c
   1700  f483		       29 7f		      AND	#127
   1701  f485		       85 d6		      STA	c
   1702  f487				   .L013		;  c{0} = 0  : rem Turned on if the last location of the joystick was DOWN+RIGHT
   1703  f487
   1704  f487		       a5 d6		      LDA	c
   1705  f489		       29 fe		      AND	#254
   1706  f48b		       85 d6		      STA	c
   1707  f48d				   .L014		;  rem ----------------------------------------------------------------------------
   1708  f48d
   1709  f48d				   .L015		;  e = 20  : rem Counter for limiting travel of fired missile
   1710  f48d
   1711  f48d		       a9 14		      LDA	#20
   1712  f48f		       85 d8		      STA	e
   1713  f491				   .L016		;  w = 0  : rem Used to determine player reflection (REFP1)
   1714  f491
   1715  f491		       a9 00		      LDA	#0
   1716  f493		       85 ea		      STA	w
   1717  f495				   .L017		;  rem ----------------------------------------------------------------------------
   1718  f495
   1719  f495				   .L018		;  f  =  50  :  rem variable for player horizontal position
   1720  f495
   1721  f495		       a9 32		      LDA	#50
   1722  f497		       85 d9		      STA	f
   1723  f499				   .L019		;  d  =  50  :  rem variable for player vertical position
   1724  f499
   1725  f499		       a9 32		      LDA	#50
   1726  f49b		       85 d7		      STA	d
   1727  f49d				   .L020		;  g  =  30  :  rem monster position vertical
   1728  f49d
   1729  f49d		       a9 1e		      LDA	#30
   1730  f49f		       85 da		      STA	g
   1731  f4a1				   .L021		;  h  =  90  :  rem monster position horizontal
   1732  f4a1
   1733  f4a1		       a9 5a		      LDA	#90
   1734  f4a3		       85 db		      STA	h
   1735  f4a5				   .L022		;  m  =  0  :	rem counter for monster animation frames
   1736  f4a5
   1737  f4a5		       a9 00		      LDA	#0
   1738  f4a7		       85 e0		      STA	m
   1739  f4a9				   .L023		;  n  =  0  :	rem counter for player animation frames
   1740  f4a9
   1741  f4a9		       a9 00		      LDA	#0
   1742  f4ab		       85 e1		      STA	n
   1743  f4ad				   .L024		;  z  =  0  :	rem Flag to simulate monster ai
   1744  f4ad
   1745  f4ad		       a9 00		      LDA	#0
   1746  f4af		       85 ed		      STA	z
   1747  f4b1				   .L025		;  k  =  0  :	rem flag for monster missile
   1748  f4b1
   1749  f4b1		       a9 00		      LDA	#0
   1750  f4b3		       85 de		      STA	k
   1751  f4b5				   .L026		;  p  =  20  :  rem flag for monster health
   1752  f4b5
   1753  f4b5		       a9 14		      LDA	#20
   1754  f4b7		       85 e3		      STA	p
   1755  f4b9				   .L027		;  j  =  5  :	rem flag for player health
   1756  f4b9
   1757  f4b9		       a9 05		      LDA	#5
   1758  f4bb		       85 dd		      STA	j
   1759  f4bd				   .L028		;  s  =  0  :	rem player sprite direction
   1760  f4bd
   1761  f4bd		       a9 00		      LDA	#0
   1762  f4bf		       85 e6		      STA	s
   1763  f4c1				   .L029		;  u  =  0  :	rem win or leveling flag
   1764  f4c1
   1765  f4c1		       a9 00		      LDA	#0
   1766  f4c3		       85 e8		      STA	u
   1767  f4c5				   .
   1768  f4c5							; 
   1769  f4c5
   1770  f4c5				   .L030		;  rem ---------------------------------------------------------------------------------
   1771  f4c5
   1772  f4c5				   .L031		;  dim p0y  =	d  :  rem player vertical position
   1773  f4c5
   1774  f4c5				   .L032		;  dim p0x  =	f  :  rem player horizontal position
   1775  f4c5
   1776  f4c5				   .L033		;  dim p1y  =	g  :  rem set p1y to g, monster vertical position
   1777  f4c5
   1778  f4c5				   .L034		;  dim p1x  =	h  :  rem set p1x to h, moster horizantal position
   1779  f4c5
   1780  f4c5				   .L035		;  dim monsterSprite  =  m  :	rem set variable m, counter fo monster animation frames
   1781  f4c5
   1782  f4c5				   .L036		;  dim playerSprite  =  n  :  rem set variable n, counter fo player animation frames
   1783  f4c5
   1784  f4c5				   .L037		;  dim moved  =  0  :	rem Flag to check if the player moved
   1785  f4c5
   1786  f4c5				   .L038		;  dim winflag  =  u  :  rem win or leveling flag
   1787  f4c5
   1788  f4c5				   .
   1789  f4c5							; 
   1790  f4c5
   1791  f4c5				   .L039		;  rem ---------------------------------------------------------------------------------
   1792  f4c5
   1793  f4c5				   .L040		;  player0x  =  p0x  :  rem set player position x
   1794  f4c5
   1795  f4c5		       a5 d9		      LDA	p0x
   1796  f4c7		       85 80		      STA	player0x
   1797  f4c9				   .L041		;  player0y  =  p0y  :  rem set player position y
   1798  f4c9
   1799  f4c9		       a5 d7		      LDA	p0y
   1800  f4cb		       85 85		      STA	player0y
   1801  f4cd				   .L042		;  player1y  =  p1y  :  rem set monster position y
   1802  f4cd
   1803  f4cd		       a5 da		      LDA	p1y
   1804  f4cf		       85 86		      STA	player1y
   1805  f4d1				   .L043		;  player1x  =  p1x  :  rem set monster position x
   1806  f4d1
   1807  f4d1		       a5 db		      LDA	p1x
   1808  f4d3		       85 81		      STA	player1x
   1809  f4d5				   .
   1810  f4d5							; 
   1811  f4d5
   1812  f4d5				   .
   1813  f4d5							; 
   1814  f4d5
   1815  f4d5				   .
   1816  f4d5							; 
   1817  f4d5
   1818  f4d5				   .titlescreen
   1819  f4d5							; titlescreen
   1820  f4d5
   1821  f4d5				   .L044		;  rem ---------------------------------------------------------------------------------
   1822  f4d5
   1823  f4d5				   .L045		;  COLUPF =  $A0  +   ( rand  &  3 )	:  rem set the playfield color of title screen 
   1824  f4d5
   1825  f4d5							; complex statement detected
   1826  f4d5		       a9 a0		      LDA	#$A0
   1827  f4d7		       48		      PHA
   1828  f4d8		       20 b3 f3 	      jsr	randomize
   1829  f4db		       29 03		      AND	#3
   1830  f4dd		       ba		      TSX
   1831  f4de		       e8		      INX
   1832  f4df		       9a		      TXS
   1833  f4e0		       18		      CLC
   1834  f4e1		       75 00		      ADC	$00,x
   1835  f4e3		       85 08		      STA	COLUPF
   1836  f4e5				   .
   1837  f4e5							; 
   1838  f4e5
   1839  f4e5				   .L046		;  rem the playfield command draws the X's on the screen.  Must use capital X, must be 32x11.
   1840  f4e5
   1841  f4e5				   .L047		;  playfield:
   1842  f4e5
   1843  f4e5				  -	      ifconst	pfres
   1844  f4e5				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1845  f4e5					      else
   1846  f4e5		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1847  f4e7					      endif
   1848  f4e7		       4c 16 f5 	      jmp	pflabel0
   1849  f4ea				   PF_data0
   1850  f4ea		       fd 6e		      .byte.b	%11111101, %01101110
   1851  f4ec					      if	(pfwidth>2)
   1852  f4ec		       74 fe		      .byte.b	%01110100, %11111110
   1853  f4ee					      endif
   1854  f4ee		       85 aa		      .byte.b	%10000101, %10101010
   1855  f4f0					      if	(pfwidth>2)
   1856  f4f0		       54 82		      .byte.b	%01010100, %10000010
   1857  f4f2					      endif
   1858  f4f2		       f7 ae		      .byte.b	%11110111, %10101110
   1859  f4f4					      if	(pfwidth>2)
   1860  f4f4		       54 82		      .byte.b	%01010100, %10000010
   1861  f4f6					      endif
   1862  f4f6		       15 aa		      .byte.b	%00010101, %10101010
   1863  f4f8					      if	(pfwidth>2)
   1864  f4f8		       55 82		      .byte.b	%01010101, %10000010
   1865  f4fa					      endif
   1866  f4fa		       f5 6a		      .byte.b	%11110101, %01101010
   1867  f4fc					      if	(pfwidth>2)
   1868  f4fc		       76 83		      .byte.b	%01110110, %10000011
   1869  f4fe					      endif
   1870  f4fe		       f7 ee		      .byte.b	%11110111, %11101110
   1871  f500					      if	(pfwidth>2)
   1872  f500		       bf 83		      .byte.b	%10111111, %10000011
   1873  f502					      endif
   1874  f502		       85 2a		      .byte.b	%10000101, %00101010
   1875  f504					      if	(pfwidth>2)
   1876  f504		       20 80		      .byte.b	%00100000, %10000000
   1877  f506					      endif
   1878  f506		       f7 2e		      .byte.b	%11110111, %00101110
   1879  f508					      if	(pfwidth>2)
   1880  f508		       3e 80		      .byte.b	%00111110, %10000000
   1881  f50a					      endif
   1882  f50a		       14 2a		      .byte.b	%00010100, %00101010
   1883  f50c					      if	(pfwidth>2)
   1884  f50c		       20 80		      .byte.b	%00100000, %10000000
   1885  f50e					      endif
   1886  f50e		       f4 ea		      .byte.b	%11110100, %11101010
   1887  f510					      if	(pfwidth>2)
   1888  f510		       bf 83		      .byte.b	%10111111, %10000011
   1889  f512					      endif
   1890  f512		       ff ff		      .byte.b	%11111111, %11111111
   1891  f514					      if	(pfwidth>2)
   1892  f514		       ff ff		      .byte.b	%11111111, %11111111
   1893  f516					      endif
   1894  f516				   pflabel0
   1895  f516		       bd ea f4 	      lda	PF_data0,x
   1896  f519		       95 a4		      sta	playfield,x
   1897  f51b		       ca		      dex
   1898  f51c		       10 f8		      bpl	pflabel0
   1899  f51e				   .
   1900  f51e							; 
   1901  f51e
   1902  f51e				   .L048		;  drawscreen
   1903  f51e
   1904  f51e		       20 bd f3 	      jsr	drawscreen
   1905  f521				   .
   1906  f521							; 
   1907  f521
   1908  f521				   .L049		;  if joy0fire then goto main	:  rem if you press fire on the joystick, you'll leave the title screen and start the main program below
   1909  f521
   1910  f521		       24 0c		      bit	INPT4
   1911  f523		       30 03		      BMI	.skipL049
   1912  f525				   .condpart0
   1913  f525		       4c 30 f5 	      jmp	.main
   1914  f528				   .skipL049
   1915  f528				   .
   1916  f528							; 
   1917  f528
   1918  f528				   .L050		;  goto titlescreen  :  rem if the joystick button is not pressed, just loop back to the titlescreen again
   1919  f528
   1920  f528		       4c d5 f4 	      jmp	.titlescreen
   1921  f52b				   .
   1922  f52b							; 
   1923  f52b
   1924  f52b				   .L051		;  pfscore1  =  pfscore1 / 2
   1925  f52b
   1926  f52b		       a5 f2		      LDA	pfscore1
   1927  f52d		       4a		      lsr
   1928  f52e		       85 f2		      STA	pfscore1
   1929  f530				   .L052		;  rem ---------------------------------------------------------------------------------
   1930  f530
   1931  f530				   .main
   1932  f530							; main
   1933  f530
   1934  f530				   .
   1935  f530							; 
   1936  f530
   1937  f530				   .L053		;  rem ---------------------------------------------------------------------------------
   1938  f530
   1939  f530				   .L054		;  if p  =  0 then winflag  =	winflag  +  1  :  j  =	5  :  p  =  30	:  rem iterate levels and reset player health
   1940  f530
   1941  f530		       a5 e3		      LDA	p
   1942  f532		       c9 00		      CMP	#0
   1943  f534		       d0 0a		      BNE	.skipL054
   1944  f536				   .condpart1
   1945  f536		       e6 e8		      INC	winflag
   1946  f538		       a9 05		      LDA	#5
   1947  f53a		       85 dd		      STA	j
   1948  f53c		       a9 1e		      LDA	#30
   1949  f53e		       85 e3		      STA	p
   1950  f540				   .skipL054
   1951  f540				   .L055		;  if winflag	=  3 then goto win  :  rem if beaten 3rd monster win the game
   1952  f540
   1953  f540		       a5 e8		      LDA	winflag
   1954  f542		       c9 03		      CMP	#3
   1955  f544		       d0 03		      BNE	.skipL055
   1956  f546				   .condpart2
   1957  f546		       4c e0 fc 	      jmp	.win
   1958  f549				   .skipL055
   1959  f549				   .L056		;  if j  =  0 then goto lose  :  rem player get hit 5 times lose
   1960  f549
   1961  f549		       a5 dd		      LDA	j
   1962  f54b		       c9 00		      CMP	#0
   1963  f54d		       d0 03		      BNE	.skipL056
   1964  f54f				   .condpart3
   1965  f54f		       4c 2f fd 	      jmp	.lose
   1966  f552				   .skipL056
   1967  f552				   .
   1968  f552							; 
   1969  f552
   1970  f552				   .L057		;  playerSprite  =  playerSprite  +  1  :  rem Increase animation frame counter
   1971  f552
   1972  f552		       e6 e1		      INC	playerSprite
   1973  f554				   .L058		;  if playerSprite  >	30 then playerSprite  =  0  :  rem Reset animation cycle
   1974  f554
   1975  f554		       a9 1e		      LDA	#30
   1976  f556		       c5 e1		      CMP	playerSprite
   1977  f558		       b0 04		      BCS	.skipL058
   1978  f55a				   .condpart4
   1979  f55a		       a9 00		      LDA	#0
   1980  f55c		       85 e1		      STA	playerSprite
   1981  f55e				   .skipL058
   1982  f55e				   .
   1983  f55e							; 
   1984  f55e
   1985  f55e				   .L059		;  if joy0right then s  =  1  :  rem Set direction to right
   1986  f55e
   1987  f55e		       2c 80 02 	      bit	SWCHA
   1988  f561		       30 04		      BMI	.skipL059
   1989  f563				   .condpart5
   1990  f563		       a9 01		      LDA	#1
   1991  f565		       85 e6		      STA	s
   1992  f567				   .skipL059
   1993  f567				   .L060		;  if joy0left then s	=  0  :  rem Set direction to left
   1994  f567
   1995  f567		       2c 80 02 	      bit	SWCHA
   1996  f56a		       70 04		      BVS	.skipL060
   1997  f56c				   .condpart6
   1998  f56c		       a9 00		      LDA	#0
   1999  f56e		       85 e6		      STA	s
   2000  f570				   .skipL060
   2001  f570				   .
   2002  f570							; 
   2003  f570
   2004  f570				   .L061		;  rem idle player sprite	     
   2005  f570
   2006  f570				   .L062		;  if !joy0left  &&  !joy0right  &&  !joy0up  &&  !joy0down  &&  !joy0fire then player0:
   2007  f570
   2008  f570		       2c 80 02 	      bit	SWCHA
   2009  f573		       50 23		      BVC	.skipL062
   2010  f575				   .condpart7
   2011  f575		       2c 80 02 	      bit	SWCHA
   2012  f578		       10 1e		      BPL	.skip7then
   2013  f57a				   .condpart8
   2014  f57a		       a9 10		      lda	#$10
   2015  f57c		       2c 80 02 	      bit	SWCHA
   2016  f57f		       f0 17		      BEQ	.skip8then
   2017  f581				   .condpart9
   2018  f581		       a9 20		      lda	#$20
   2019  f583		       2c 80 02 	      bit	SWCHA
   2020  f586		       f0 10		      BEQ	.skip9then
   2021  f588				   .condpart10
   2022  f588		       24 0c		      bit	INPT4
   2023  f58a		       10 0c		      BPL	.skip10then
   2024  f58c				   .condpart11
   2025  f58c		       a2 7e		      LDX	#<player11then_0
   2026  f58e		       86 8a		      STX	player0pointerlo
   2027  f590		       a9 fd		      LDA	#>player11then_0
   2028  f592		       85 8b		      STA	player0pointerhi
   2029  f594		       a9 0a		      LDA	#10
   2030  f596		       85 8e		      STA	player0height
   2031  f598				   .skip10then
   2032  f598				   .skip9then
   2033  f598				   .skip8then
   2034  f598				   .skip7then
   2035  f598				   .skipL062
   2036  f598				   .
   2037  f598							; 
   2038  f598
   2039  f598				   .L063		;  rem  player sprite animation left
   2040  f598
   2041  f598				   .L064		;  if playerSprite  =	10  &&	joy0left then player0: 
   2042  f598
   2043  f598		       a5 e1		      LDA	playerSprite
   2044  f59a		       c9 0a		      CMP	#10
   2045  f59c		       d0 11		      BNE	.skipL064
   2046  f59e				   .condpart12
   2047  f59e		       2c 80 02 	      bit	SWCHA
   2048  f5a1		       70 0c		      BVS	.skip12then
   2049  f5a3				   .condpart13
   2050  f5a3		       a2 89		      LDX	#<player13then_0
   2051  f5a5		       86 8a		      STX	player0pointerlo
   2052  f5a7		       a9 fd		      LDA	#>player13then_0
   2053  f5a9		       85 8b		      STA	player0pointerhi
   2054  f5ab		       a9 0a		      LDA	#10
   2055  f5ad		       85 8e		      STA	player0height
   2056  f5af				   .skip12then
   2057  f5af				   .skipL064
   2058  f5af				   .
   2059  f5af							; 
   2060  f5af
   2061  f5af				   .L065		;  if playerSprite  =	20  &&	joy0left then player0: 
   2062  f5af
   2063  f5af		       a5 e1		      LDA	playerSprite
   2064  f5b1		       c9 14		      CMP	#20
   2065  f5b3		       d0 11		      BNE	.skipL065
   2066  f5b5				   .condpart14
   2067  f5b5		       2c 80 02 	      bit	SWCHA
   2068  f5b8		       70 0c		      BVS	.skip14then
   2069  f5ba				   .condpart15
   2070  f5ba		       a2 94		      LDX	#<player15then_0
   2071  f5bc		       86 8a		      STX	player0pointerlo
   2072  f5be		       a9 fd		      LDA	#>player15then_0
   2073  f5c0		       85 8b		      STA	player0pointerhi
   2074  f5c2		       a9 0a		      LDA	#10
   2075  f5c4		       85 8e		      STA	player0height
   2076  f5c6				   .skip14then
   2077  f5c6				   .skipL065
   2078  f5c6				   .
   2079  f5c6							; 
   2080  f5c6
   2081  f5c6				   .
   2082  f5c6							; 
   2083  f5c6
   2084  f5c6				   .L066		;  if playerSprite  =	30  &&	joy0left then player0: 
   2085  f5c6
   2086  f5c6		       a5 e1		      LDA	playerSprite
   2087  f5c8		       c9 1e		      CMP	#30
   2088  f5ca		       d0 11		      BNE	.skipL066
   2089  f5cc				   .condpart16
   2090  f5cc		       2c 80 02 	      bit	SWCHA
   2091  f5cf		       70 0c		      BVS	.skip16then
   2092  f5d1				   .condpart17
   2093  f5d1		       a2 9f		      LDX	#<player17then_0
   2094  f5d3		       86 8a		      STX	player0pointerlo
   2095  f5d5		       a9 fd		      LDA	#>player17then_0
   2096  f5d7		       85 8b		      STA	player0pointerhi
   2097  f5d9		       a9 0a		      LDA	#10
   2098  f5db		       85 8e		      STA	player0height
   2099  f5dd				   .skip16then
   2100  f5dd				   .skipL066
   2101  f5dd				   .
   2102  f5dd							; 
   2103  f5dd
   2104  f5dd				   .L067		;  rem player sprtite animation left
   2105  f5dd
   2106  f5dd				   .L068		;  if playerSprite  =	10  &&	joy0right then player0: 
   2107  f5dd
   2108  f5dd		       a5 e1		      LDA	playerSprite
   2109  f5df		       c9 0a		      CMP	#10
   2110  f5e1		       d0 11		      BNE	.skipL068
   2111  f5e3				   .condpart18
   2112  f5e3		       2c 80 02 	      bit	SWCHA
   2113  f5e6		       30 0c		      BMI	.skip18then
   2114  f5e8				   .condpart19
   2115  f5e8		       a2 aa		      LDX	#<player19then_0
   2116  f5ea		       86 8a		      STX	player0pointerlo
   2117  f5ec		       a9 fd		      LDA	#>player19then_0
   2118  f5ee		       85 8b		      STA	player0pointerhi
   2119  f5f0		       a9 0a		      LDA	#10
   2120  f5f2		       85 8e		      STA	player0height
   2121  f5f4				   .skip18then
   2122  f5f4				   .skipL068
   2123  f5f4				   .
   2124  f5f4							; 
   2125  f5f4
   2126  f5f4				   .L069		;  if playerSprite  =	20  &&	joy0right then player0: 
   2127  f5f4
   2128  f5f4		       a5 e1		      LDA	playerSprite
   2129  f5f6		       c9 14		      CMP	#20
   2130  f5f8		       d0 11		      BNE	.skipL069
   2131  f5fa				   .condpart20
   2132  f5fa		       2c 80 02 	      bit	SWCHA
   2133  f5fd		       30 0c		      BMI	.skip20then
   2134  f5ff				   .condpart21
   2135  f5ff		       a2 b5		      LDX	#<player21then_0
   2136  f601		       86 8a		      STX	player0pointerlo
   2137  f603		       a9 fd		      LDA	#>player21then_0
   2138  f605		       85 8b		      STA	player0pointerhi
   2139  f607		       a9 0a		      LDA	#10
   2140  f609		       85 8e		      STA	player0height
   2141  f60b				   .skip20then
   2142  f60b				   .skipL069
   2143  f60b				   .
   2144  f60b							; 
   2145  f60b
   2146  f60b				   .L070		;  if playerSprite  =	30  &&	joy0right then player0: 
   2147  f60b
   2148  f60b		       a5 e1		      LDA	playerSprite
   2149  f60d		       c9 1e		      CMP	#30
   2150  f60f		       d0 11		      BNE	.skipL070
   2151  f611				   .condpart22
   2152  f611		       2c 80 02 	      bit	SWCHA
   2153  f614		       30 0c		      BMI	.skip22then
   2154  f616				   .condpart23
   2155  f616		       a2 c0		      LDX	#<player23then_0
   2156  f618		       86 8a		      STX	player0pointerlo
   2157  f61a		       a9 fd		      LDA	#>player23then_0
   2158  f61c		       85 8b		      STA	player0pointerhi
   2159  f61e		       a9 0a		      LDA	#10
   2160  f620		       85 8e		      STA	player0height
   2161  f622				   .skip22then
   2162  f622				   .skipL070
   2163  f622				   .
   2164  f622							; 
   2165  f622
   2166  f622				   .
   2167  f622							; 
   2168  f622
   2169  f622				   .L071		;  monsterSprite  =  monsterSprite  +	1  :  rem animation frames for monster
   2170  f622
   2171  f622		       e6 e0		      INC	monsterSprite
   2172  f624				   .L072		;  if monsterSprite  >  30 then monsterSprite	=  0  :  rem Reset animation cycle
   2173  f624
   2174  f624		       a9 1e		      LDA	#30
   2175  f626		       c5 e0		      CMP	monsterSprite
   2176  f628		       b0 04		      BCS	.skipL072
   2177  f62a				   .condpart24
   2178  f62a		       a9 00		      LDA	#0
   2179  f62c		       85 e0		      STA	monsterSprite
   2180  f62e				   .skipL072
   2181  f62e				   .
   2182  f62e							; 
   2183  f62e
   2184  f62e				   .L073		;  rem monster stage 1
   2185  f62e
   2186  f62e				   .L074		;  if monsterSprite  =  10  &&  winflag  =  0 then player1: 
   2187  f62e
   2188  f62e		       a5 e0		      LDA	monsterSprite
   2189  f630		       c9 0a		      CMP	#10
   2190  f632		       d0 12		      BNE	.skipL074
   2191  f634				   .condpart25
   2192  f634		       a5 e8		      LDA	winflag
   2193  f636		       c9 00		      CMP	#0
   2194  f638		       d0 0c		      BNE	.skip25then
   2195  f63a				   .condpart26
   2196  f63a		       a2 cb		      LDX	#<player26then_1
   2197  f63c		       86 8c		      STX	player1pointerlo
   2198  f63e		       a9 fd		      LDA	#>player26then_1
   2199  f640		       85 8d		      STA	player1pointerhi
   2200  f642		       a9 17		      LDA	#23
   2201  f644		       85 8f		      STA	player1height
   2202  f646				   .skip25then
   2203  f646				   .skipL074
   2204  f646				   .
   2205  f646							; 
   2206  f646
   2207  f646				   .L075		;  if monsterSprite  =  20  &&  winflag  =  0 then player1:
   2208  f646
   2209  f646		       a5 e0		      LDA	monsterSprite
   2210  f648		       c9 14		      CMP	#20
   2211  f64a		       d0 12		      BNE	.skipL075
   2212  f64c				   .condpart27
   2213  f64c		       a5 e8		      LDA	winflag
   2214  f64e		       c9 00		      CMP	#0
   2215  f650		       d0 0c		      BNE	.skip27then
   2216  f652				   .condpart28
   2217  f652		       a2 e3		      LDX	#<player28then_1
   2218  f654		       86 8c		      STX	player1pointerlo
   2219  f656		       a9 fd		      LDA	#>player28then_1
   2220  f658		       85 8d		      STA	player1pointerhi
   2221  f65a		       a9 17		      LDA	#23
   2222  f65c		       85 8f		      STA	player1height
   2223  f65e				   .skip27then
   2224  f65e				   .skipL075
   2225  f65e				   .
   2226  f65e							; 
   2227  f65e
   2228  f65e				   .L076		;  if monsterSprite  =  30  &&  winflag  =  0 then player1:
   2229  f65e
   2230  f65e		       a5 e0		      LDA	monsterSprite
   2231  f660		       c9 1e		      CMP	#30
   2232  f662		       d0 12		      BNE	.skipL076
   2233  f664				   .condpart29
   2234  f664		       a5 e8		      LDA	winflag
   2235  f666		       c9 00		      CMP	#0
   2236  f668		       d0 0c		      BNE	.skip29then
   2237  f66a				   .condpart30
   2238  f66a		       a2 00		      LDX	#<player30then_1
   2239  f66c		       86 8c		      STX	player1pointerlo
   2240  f66e		       a9 fe		      LDA	#>player30then_1
   2241  f670		       85 8d		      STA	player1pointerhi
   2242  f672		       a9 17		      LDA	#23
   2243  f674		       85 8f		      STA	player1height
   2244  f676				   .skip29then
   2245  f676				   .skipL076
   2246  f676				   .L077		;  rem monster stage 2
   2247  f676
   2248  f676				   .L078		;  if monsterSprite  =  10  &&  winflag  =  1 then player1: 
   2249  f676
   2250  f676		       a5 e0		      LDA	monsterSprite
   2251  f678		       c9 0a		      CMP	#10
   2252  f67a		       d0 12		      BNE	.skipL078
   2253  f67c				   .condpart31
   2254  f67c		       a5 e8		      LDA	winflag
   2255  f67e		       c9 01		      CMP	#1
   2256  f680		       d0 0c		      BNE	.skip31then
   2257  f682				   .condpart32
   2258  f682		       a2 18		      LDX	#<player32then_1
   2259  f684		       86 8c		      STX	player1pointerlo
   2260  f686		       a9 fe		      LDA	#>player32then_1
   2261  f688		       85 8d		      STA	player1pointerhi
   2262  f68a		       a9 17		      LDA	#23
   2263  f68c		       85 8f		      STA	player1height
   2264  f68e				   .skip31then
   2265  f68e				   .skipL078
   2266  f68e				   .
   2267  f68e							; 
   2268  f68e
   2269  f68e				   .L079		;  if monsterSprite  =  20  &&  winflag  =  1 then player1:
   2270  f68e
   2271  f68e		       a5 e0		      LDA	monsterSprite
   2272  f690		       c9 14		      CMP	#20
   2273  f692		       d0 12		      BNE	.skipL079
   2274  f694				   .condpart33
   2275  f694		       a5 e8		      LDA	winflag
   2276  f696		       c9 01		      CMP	#1
   2277  f698		       d0 0c		      BNE	.skip33then
   2278  f69a				   .condpart34
   2279  f69a		       a2 30		      LDX	#<player34then_1
   2280  f69c		       86 8c		      STX	player1pointerlo
   2281  f69e		       a9 fe		      LDA	#>player34then_1
   2282  f6a0		       85 8d		      STA	player1pointerhi
   2283  f6a2		       a9 17		      LDA	#23
   2284  f6a4		       85 8f		      STA	player1height
   2285  f6a6				   .skip33then
   2286  f6a6				   .skipL079
   2287  f6a6				   .
   2288  f6a6							; 
   2289  f6a6
   2290  f6a6				   .L080		;  if monsterSprite  =  30  &&  winflag  =  1 then player1:
   2291  f6a6
   2292  f6a6		       a5 e0		      LDA	monsterSprite
   2293  f6a8		       c9 1e		      CMP	#30
   2294  f6aa		       d0 12		      BNE	.skipL080
   2295  f6ac				   .condpart35
   2296  f6ac		       a5 e8		      LDA	winflag
   2297  f6ae		       c9 01		      CMP	#1
   2298  f6b0		       d0 0c		      BNE	.skip35then
   2299  f6b2				   .condpart36
   2300  f6b2		       a2 48		      LDX	#<player36then_1
   2301  f6b4		       86 8c		      STX	player1pointerlo
   2302  f6b6		       a9 fe		      LDA	#>player36then_1
   2303  f6b8		       85 8d		      STA	player1pointerhi
   2304  f6ba		       a9 17		      LDA	#23
   2305  f6bc		       85 8f		      STA	player1height
   2306  f6be				   .skip35then
   2307  f6be				   .skipL080
   2308  f6be				   .
   2309  f6be							; 
   2310  f6be
   2311  f6be				   .L081		;  rem monster stage 3
   2312  f6be
   2313  f6be				   .L082		;  if monsterSprite  =  10  &&  winflag  =  2 then player1: 
   2314  f6be
   2315  f6be		       a5 e0		      LDA	monsterSprite
   2316  f6c0		       c9 0a		      CMP	#10
   2317  f6c2		       d0 12		      BNE	.skipL082
   2318  f6c4				   .condpart37
   2319  f6c4		       a5 e8		      LDA	winflag
   2320  f6c6		       c9 02		      CMP	#2
   2321  f6c8		       d0 0c		      BNE	.skip37then
   2322  f6ca				   .condpart38
   2323  f6ca		       a2 60		      LDX	#<player38then_1
   2324  f6cc		       86 8c		      STX	player1pointerlo
   2325  f6ce		       a9 fe		      LDA	#>player38then_1
   2326  f6d0		       85 8d		      STA	player1pointerhi
   2327  f6d2		       a9 17		      LDA	#23
   2328  f6d4		       85 8f		      STA	player1height
   2329  f6d6				   .skip37then
   2330  f6d6				   .skipL082
   2331  f6d6				   .
   2332  f6d6							; 
   2333  f6d6
   2334  f6d6				   .L083		;  if monsterSprite  =  20  &&  winflag  =  2 then player1:
   2335  f6d6
   2336  f6d6		       a5 e0		      LDA	monsterSprite
   2337  f6d8		       c9 14		      CMP	#20
   2338  f6da		       d0 12		      BNE	.skipL083
   2339  f6dc				   .condpart39
   2340  f6dc		       a5 e8		      LDA	winflag
   2341  f6de		       c9 02		      CMP	#2
   2342  f6e0		       d0 0c		      BNE	.skip39then
   2343  f6e2				   .condpart40
   2344  f6e2		       a2 78		      LDX	#<player40then_1
   2345  f6e4		       86 8c		      STX	player1pointerlo
   2346  f6e6		       a9 fe		      LDA	#>player40then_1
   2347  f6e8		       85 8d		      STA	player1pointerhi
   2348  f6ea		       a9 17		      LDA	#23
   2349  f6ec		       85 8f		      STA	player1height
   2350  f6ee				   .skip39then
   2351  f6ee				   .skipL083
   2352  f6ee				   .
   2353  f6ee							; 
   2354  f6ee
   2355  f6ee				   .L084		;  if monsterSprite  =  30  &&  winflag  =  2 then player1:
   2356  f6ee
   2357  f6ee		       a5 e0		      LDA	monsterSprite
   2358  f6f0		       c9 1e		      CMP	#30
   2359  f6f2		       d0 12		      BNE	.skipL084
   2360  f6f4				   .condpart41
   2361  f6f4		       a5 e8		      LDA	winflag
   2362  f6f6		       c9 02		      CMP	#2
   2363  f6f8		       d0 0c		      BNE	.skip41then
   2364  f6fa				   .condpart42
   2365  f6fa		       a2 90		      LDX	#<player42then_1
   2366  f6fc		       86 8c		      STX	player1pointerlo
   2367  f6fe		       a9 fe		      LDA	#>player42then_1
   2368  f700		       85 8d		      STA	player1pointerhi
   2369  f702		       a9 17		      LDA	#23
   2370  f704		       85 8f		      STA	player1height
   2371  f706				   .skip41then
   2372  f706				   .skipL084
   2373  f706				   .
   2374  f706							; 
   2375  f706
   2376  f706				   .
   2377  f706							; 
   2378  f706
   2379  f706				   .L085		;  rem ---------------------------------------------------------------------------------
   2380  f706
   2381  f706				   .L086		;  if winflag	=  0 then playfield:
   2382  f706
   2383  f706		       a5 e8		      LDA	winflag
   2384  f708		       c9 00		      CMP	#0
   2385  f70a		       d0 39		      BNE	.skipL086
   2386  f70c				   .condpart43
   2387  f70c				  -	      ifconst	pfres
   2388  f70c				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2389  f70c					      else
   2390  f70c		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2391  f70e					      endif
   2392  f70e		       4c 3d f7 	      jmp	pflabel1
   2393  f711				   PF_data1
   2394  f711		       ff ff		      .byte.b	%11111111, %11111111
   2395  f713					      if	(pfwidth>2)
   2396  f713		       ff ff		      .byte.b	%11111111, %11111111
   2397  f715					      endif
   2398  f715		       80 00		      .byte.b	%10000000, %00000000
   2399  f717					      if	(pfwidth>2)
   2400  f717		       00 80		      .byte.b	%00000000, %10000000
   2401  f719					      endif
   2402  f719		       80 00		      .byte.b	%10000000, %00000000
   2403  f71b					      if	(pfwidth>2)
   2404  f71b		       00 80		      .byte.b	%00000000, %10000000
   2405  f71d					      endif
   2406  f71d		       80 00		      .byte.b	%10000000, %00000000
   2407  f71f					      if	(pfwidth>2)
   2408  f71f		       00 80		      .byte.b	%00000000, %10000000
   2409  f721					      endif
   2410  f721		       80 00		      .byte.b	%10000000, %00000000
   2411  f723					      if	(pfwidth>2)
   2412  f723		       00 80		      .byte.b	%00000000, %10000000
   2413  f725					      endif
   2414  f725		       80 00		      .byte.b	%10000000, %00000000
   2415  f727					      if	(pfwidth>2)
   2416  f727		       00 80		      .byte.b	%00000000, %10000000
   2417  f729					      endif
   2418  f729		       80 00		      .byte.b	%10000000, %00000000
   2419  f72b					      if	(pfwidth>2)
   2420  f72b		       00 80		      .byte.b	%00000000, %10000000
   2421  f72d					      endif
   2422  f72d		       80 36		      .byte.b	%10000000, %00110110
   2423  f72f					      if	(pfwidth>2)
   2424  f72f		       00 80		      .byte.b	%00000000, %10000000
   2425  f731					      endif
   2426  f731		       90 36		      .byte.b	%10010000, %00110110
   2427  f733					      if	(pfwidth>2)
   2428  f733		       20 84		      .byte.b	%00100000, %10000100
   2429  f735					      endif
   2430  f735		       da 36		      .byte.b	%11011010, %00110110
   2431  f737					      if	(pfwidth>2)
   2432  f737		       a9 a6		      .byte.b	%10101001, %10100110
   2433  f739					      endif
   2434  f739		       ff ff		      .byte.b	%11111111, %11111111
   2435  f73b					      if	(pfwidth>2)
   2436  f73b		       ff ff		      .byte.b	%11111111, %11111111
   2437  f73d					      endif
   2438  f73d				   pflabel1
   2439  f73d		       bd 11 f7 	      lda	PF_data1,x
   2440  f740		       95 a4		      sta	playfield,x
   2441  f742		       ca		      dex
   2442  f743		       10 f8		      bpl	pflabel1
   2443  f745				   .skipL086
   2444  f745				   .
   2445  f745							; 
   2446  f745
   2447  f745				   .
   2448  f745							; 
   2449  f745
   2450  f745				   .L087		;  if winflag	=  1 then playfield:
   2451  f745
   2452  f745		       a5 e8		      LDA	winflag
   2453  f747		       c9 01		      CMP	#1
   2454  f749		       d0 39		      BNE	.skipL087
   2455  f74b				   .condpart44
   2456  f74b				  -	      ifconst	pfres
   2457  f74b				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2458  f74b					      else
   2459  f74b		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2460  f74d					      endif
   2461  f74d		       4c 7c f7 	      jmp	pflabel2
   2462  f750				   PF_data2
   2463  f750		       ff ff		      .byte.b	%11111111, %11111111
   2464  f752					      if	(pfwidth>2)
   2465  f752		       ff ff		      .byte.b	%11111111, %11111111
   2466  f754					      endif
   2467  f754		       80 00		      .byte.b	%10000000, %00000000
   2468  f756					      if	(pfwidth>2)
   2469  f756		       00 80		      .byte.b	%00000000, %10000000
   2470  f758					      endif
   2471  f758		       80 00		      .byte.b	%10000000, %00000000
   2472  f75a					      if	(pfwidth>2)
   2473  f75a		       00 80		      .byte.b	%00000000, %10000000
   2474  f75c					      endif
   2475  f75c		       80 00		      .byte.b	%10000000, %00000000
   2476  f75e					      if	(pfwidth>2)
   2477  f75e		       00 80		      .byte.b	%00000000, %10000000
   2478  f760					      endif
   2479  f760		       80 00		      .byte.b	%10000000, %00000000
   2480  f762					      if	(pfwidth>2)
   2481  f762		       00 80		      .byte.b	%00000000, %10000000
   2482  f764					      endif
   2483  f764		       80 00		      .byte.b	%10000000, %00000000
   2484  f766					      if	(pfwidth>2)
   2485  f766		       00 80		      .byte.b	%00000000, %10000000
   2486  f768					      endif
   2487  f768		       80 00		      .byte.b	%10000000, %00000000
   2488  f76a					      if	(pfwidth>2)
   2489  f76a		       00 80		      .byte.b	%00000000, %10000000
   2490  f76c					      endif
   2491  f76c		       80 00		      .byte.b	%10000000, %00000000
   2492  f76e					      if	(pfwidth>2)
   2493  f76e		       00 80		      .byte.b	%00000000, %10000000
   2494  f770					      endif
   2495  f770		       81 02		      .byte.b	%10000001, %00000010
   2496  f772					      if	(pfwidth>2)
   2497  f772		       08 80		      .byte.b	%00001000, %10000000
   2498  f774					      endif
   2499  f774		       a9 52		      .byte.b	%10101001, %01010010
   2500  f776					      if	(pfwidth>2)
   2501  f776		       1c c0		      .byte.b	%00011100, %11000000
   2502  f778					      endif
   2503  f778		       ff ff		      .byte.b	%11111111, %11111111
   2504  f77a					      if	(pfwidth>2)
   2505  f77a		       ff ff		      .byte.b	%11111111, %11111111
   2506  f77c					      endif
   2507  f77c				   pflabel2
   2508  f77c		       bd 50 f7 	      lda	PF_data2,x
   2509  f77f		       95 a4		      sta	playfield,x
   2510  f781		       ca		      dex
   2511  f782		       10 f8		      bpl	pflabel2
   2512  f784				   .skipL087
   2513  f784				   .
   2514  f784							; 
   2515  f784
   2516  f784				   .L088		;  if winflag	=  2 then playfield:
   2517  f784
   2518  f784		       a5 e8		      LDA	winflag
   2519  f786		       c9 02		      CMP	#2
   2520  f788		       d0 39		      BNE	.skipL088
   2521  f78a				   .condpart45
   2522  f78a				  -	      ifconst	pfres
   2523  f78a				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2524  f78a					      else
   2525  f78a		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2526  f78c					      endif
   2527  f78c		       4c bb f7 	      jmp	pflabel3
   2528  f78f				   PF_data3
   2529  f78f		       ff ff		      .byte.b	%11111111, %11111111
   2530  f791					      if	(pfwidth>2)
   2531  f791		       ff ff		      .byte.b	%11111111, %11111111
   2532  f793					      endif
   2533  f793		       80 00		      .byte.b	%10000000, %00000000
   2534  f795					      if	(pfwidth>2)
   2535  f795		       00 87		      .byte.b	%00000000, %10000111
   2536  f797					      endif
   2537  f797		       90 38		      .byte.b	%10010000, %00111000
   2538  f799					      if	(pfwidth>2)
   2539  f799		       00 84		      .byte.b	%00000000, %10000100
   2540  f79b					      endif
   2541  f79b		       80 44		      .byte.b	%10000000, %01000100
   2542  f79d					      if	(pfwidth>2)
   2543  f79d		       00 84		      .byte.b	%00000000, %10000100
   2544  f79f					      endif
   2545  f79f		       80 44		      .byte.b	%10000000, %01000100
   2546  f7a1					      if	(pfwidth>2)
   2547  f7a1		       00 80		      .byte.b	%00000000, %10000000
   2548  f7a3					      endif
   2549  f7a3		       80 38		      .byte.b	%10000000, %00111000
   2550  f7a5					      if	(pfwidth>2)
   2551  f7a5		       00 80		      .byte.b	%00000000, %10000000
   2552  f7a7					      endif
   2553  f7a7		       88 00		      .byte.b	%10001000, %00000000
   2554  f7a9					      if	(pfwidth>2)
   2555  f7a9		       00 80		      .byte.b	%00000000, %10000000
   2556  f7ab					      endif
   2557  f7ab		       98 00		      .byte.b	%10011000, %00000000
   2558  f7ad					      if	(pfwidth>2)
   2559  f7ad		       07 81		      .byte.b	%00000111, %10000001
   2560  f7af					      endif
   2561  f7af		       80 00		      .byte.b	%10000000, %00000000
   2562  f7b1					      if	(pfwidth>2)
   2563  f7b1		       07 81		      .byte.b	%00000111, %10000001
   2564  f7b3					      endif
   2565  f7b3		       80 00		      .byte.b	%10000000, %00000000
   2566  f7b5					      if	(pfwidth>2)
   2567  f7b5		       07 81		      .byte.b	%00000111, %10000001
   2568  f7b7					      endif
   2569  f7b7		       ff ff		      .byte.b	%11111111, %11111111
   2570  f7b9					      if	(pfwidth>2)
   2571  f7b9		       ff ff		      .byte.b	%11111111, %11111111
   2572  f7bb					      endif
   2573  f7bb				   pflabel3
   2574  f7bb		       bd 8f f7 	      lda	PF_data3,x
   2575  f7be		       95 a4		      sta	playfield,x
   2576  f7c0		       ca		      dex
   2577  f7c1		       10 f8		      bpl	pflabel3
   2578  f7c3				   .skipL088
   2579  f7c3				   .
   2580  f7c3							; 
   2581  f7c3
   2582  f7c3				   .
   2583  f7c3							; 
   2584  f7c3
   2585  f7c3				   .L089		;  rem ---------------------------------------------------------------------------------
   2586  f7c3
   2587  f7c3				   .L090		;  COLUP0 =  $70  +   ( rand  &  7 )	:  rem PLAYER COLUP0=<xx> sets the color of the player 0 sprite. Valid range is 0-254 , randomizes colors 
   2588  f7c3
   2589  f7c3							; complex statement detected
   2590  f7c3		       a9 70		      LDA	#$70
   2591  f7c5		       48		      PHA
   2592  f7c6		       20 b3 f3 	      jsr	randomize
   2593  f7c9		       29 07		      AND	#7
   2594  f7cb		       ba		      TSX
   2595  f7cc		       e8		      INX
   2596  f7cd		       9a		      TXS
   2597  f7ce		       18		      CLC
   2598  f7cf		       75 00		      ADC	$00,x
   2599  f7d1		       85 06		      STA	COLUP0
   2600  f7d3				   .L091		;  COLUP1  =  $C0  +	( rand	&  7 )	 :  rem MONSTER COLUP0=<xx> sets the color of the player 0 sprite. Valid range is 0-254 , randomizes colors 
   2601  f7d3
   2602  f7d3							; complex statement detected
   2603  f7d3		       a9 c0		      LDA	#$C0
   2604  f7d5		       48		      PHA
   2605  f7d6		       20 b3 f3 	      jsr	randomize
   2606  f7d9		       29 07		      AND	#7
   2607  f7db		       ba		      TSX
   2608  f7dc		       e8		      INX
   2609  f7dd		       9a		      TXS
   2610  f7de		       18		      CLC
   2611  f7df		       75 00		      ADC	$00,x
   2612  f7e1		       85 07		      STA	COLUP1
   2613  f7e3				   .L092		;  COLUPF  =  $A0  +	( rand	&  7 )	 :  rem PLAYFIELD You need to set a color for the playfield
   2614  f7e3
   2615  f7e3							; complex statement detected
   2616  f7e3		       a9 a0		      LDA	#$A0
   2617  f7e5		       48		      PHA
   2618  f7e6		       20 b3 f3 	      jsr	randomize
   2619  f7e9		       29 07		      AND	#7
   2620  f7eb		       ba		      TSX
   2621  f7ec		       e8		      INX
   2622  f7ed		       9a		      TXS
   2623  f7ee		       18		      CLC
   2624  f7ef		       75 00		      ADC	$00,x
   2625  f7f1		       85 08		      STA	COLUPF
   2626  f7f3				   .L093		;  COLUBK  =  00  :  rem BACKGROUND BALCK Change the background color with COLUBK
   2627  f7f3
   2628  f7f3		       a9 00		      LDA	#00
   2629  f7f5		       85 09		      STA	COLUBK
   2630  f7f7				   .L094		;  rem ---------------------------------------------------------------------------------
   2631  f7f7
   2632  f7f7				   .
   2633  f7f7							; 
   2634  f7f7
   2635  f7f7				   .L095		;  if collision(missile1,player0) then player1x  =   ( rand  &  63 )	+  40  :  player0y  =	( rand	&  31 )   +  30  :  COLUBK  =  $46  +	( rand	&  2 )	 :  j  =  j  -	1  :  rem if missile and monster collide monster changes position
   2636  f7f7
   2637  f7f7		       24 01		      bit	CXM1P
   2638  f7f9		       10 26		      BPL	.skipL095
   2639  f7fb				   .condpart46
   2640  f7fb							; complex statement detected
   2641  f7fb		       20 b3 f3 	      jsr	randomize
   2642  f7fe		       29 3f		      AND	#63
   2643  f800		       18		      CLC
   2644  f801		       69 28		      ADC	#40
   2645  f803		       85 81		      STA	player1x
   2646  f805							; complex statement detected
   2647  f805		       20 b3 f3 	      jsr	randomize
   2648  f808		       29 1f		      AND	#31
   2649  f80a		       18		      CLC
   2650  f80b		       69 1e		      ADC	#30
   2651  f80d		       85 85		      STA	player0y
   2652  f80f							; complex statement detected
   2653  f80f		       a9 46		      LDA	#$46
   2654  f811		       48		      PHA
   2655  f812		       20 b3 f3 	      jsr	randomize
   2656  f815		       29 02		      AND	#2
   2657  f817		       ba		      TSX
   2658  f818		       e8		      INX
   2659  f819		       9a		      TXS
   2660  f81a		       18		      CLC
   2661  f81b		       75 00		      ADC	$00,x
   2662  f81d		       85 09		      STA	COLUBK
   2663  f81f		       c6 dd		      DEC	j
   2664  f821				   .skipL095
   2665  f821				   .
   2666  f821							; 
   2667  f821
   2668  f821				   .L096		;  if collision(missile0,player1) then player1x  =   ( rand  &  63 )	+  40  :  player1y  =	( rand	&  31 )   +  30  :  missile1y  =   ( rand  &  31 )   +	30  :  COLUBK  =  $46  +   ( rand  &  2 )   :  p  =  p	-  1  :  rem if missile and monster collide monster changes position
   2669  f821
   2670  f821		       24 00		      bit	CXM0P
   2671  f823		       10 30		      BPL	.skipL096
   2672  f825				   .condpart47
   2673  f825							; complex statement detected
   2674  f825		       20 b3 f3 	      jsr	randomize
   2675  f828		       29 3f		      AND	#63
   2676  f82a		       18		      CLC
   2677  f82b		       69 28		      ADC	#40
   2678  f82d		       85 81		      STA	player1x
   2679  f82f							; complex statement detected
   2680  f82f		       20 b3 f3 	      jsr	randomize
   2681  f832		       29 1f		      AND	#31
   2682  f834		       18		      CLC
   2683  f835		       69 1e		      ADC	#30
   2684  f837		       85 86		      STA	player1y
   2685  f839							; complex statement detected
   2686  f839		       20 b3 f3 	      jsr	randomize
   2687  f83c		       29 1f		      AND	#31
   2688  f83e		       18		      CLC
   2689  f83f		       69 1e		      ADC	#30
   2690  f841		       85 88		      STA	missile1y
   2691  f843							; complex statement detected
   2692  f843		       a9 46		      LDA	#$46
   2693  f845		       48		      PHA
   2694  f846		       20 b3 f3 	      jsr	randomize
   2695  f849		       29 02		      AND	#2
   2696  f84b		       ba		      TSX
   2697  f84c		       e8		      INX
   2698  f84d		       9a		      TXS
   2699  f84e		       18		      CLC
   2700  f84f		       75 00		      ADC	$00,x
   2701  f851		       85 09		      STA	COLUBK
   2702  f853		       c6 e3		      DEC	p
   2703  f855				   .skipL096
   2704  f855				   .L097		;  if collision(player0,player1) then player1x  =   ( rand  &	63 )   +  40  :  player1y  =   ( rand  &  31 )	 +  30	:  missile1y  =   ( rand  &  31 )   +  30  :  COLUBK  =  $46  +   ( rand  &  2 )   :  j  =  j  -  1  :	rem if player and monster collide monster changes position
   2705  f855
   2706  f855		       24 07		      bit	CXPPMM
   2707  f857		       10 30		      BPL	.skipL097
   2708  f859				   .condpart48
   2709  f859							; complex statement detected
   2710  f859		       20 b3 f3 	      jsr	randomize
   2711  f85c		       29 3f		      AND	#63
   2712  f85e		       18		      CLC
   2713  f85f		       69 28		      ADC	#40
   2714  f861		       85 81		      STA	player1x
   2715  f863							; complex statement detected
   2716  f863		       20 b3 f3 	      jsr	randomize
   2717  f866		       29 1f		      AND	#31
   2718  f868		       18		      CLC
   2719  f869		       69 1e		      ADC	#30
   2720  f86b		       85 86		      STA	player1y
   2721  f86d							; complex statement detected
   2722  f86d		       20 b3 f3 	      jsr	randomize
   2723  f870		       29 1f		      AND	#31
   2724  f872		       18		      CLC
   2725  f873		       69 1e		      ADC	#30
   2726  f875		       85 88		      STA	missile1y
   2727  f877							; complex statement detected
   2728  f877		       a9 46		      LDA	#$46
   2729  f879		       48		      PHA
   2730  f87a		       20 b3 f3 	      jsr	randomize
   2731  f87d		       29 02		      AND	#2
   2732  f87f		       ba		      TSX
   2733  f880		       e8		      INX
   2734  f881		       9a		      TXS
   2735  f882		       18		      CLC
   2736  f883		       75 00		      ADC	$00,x
   2737  f885		       85 09		      STA	COLUBK
   2738  f887		       c6 dd		      DEC	j
   2739  f889				   .skipL097
   2740  f889				   .
   2741  f889							; 
   2742  f889
   2743  f889				   .L098		;  rem ---------------------------------------------------------------------------------
   2744  f889
   2745  f889				   .L099		;  p0x  =  0  :  rem player movement sprite left & right
   2746  f889
   2747  f889		       a9 00		      LDA	#0
   2748  f88b		       85 d9		      STA	p0x
   2749  f88d				   .L0100		;  if joy0left then p0x  =  255
   2750  f88d
   2751  f88d		       2c 80 02 	      bit	SWCHA
   2752  f890		       70 04		      BVS	.skipL0100
   2753  f892				   .condpart49
   2754  f892		       a9 ff		      LDA	#255
   2755  f894		       85 d9		      STA	p0x
   2756  f896				   .skipL0100
   2757  f896				   .L0101		;  if joy0right then p0x  =  1
   2758  f896
   2759  f896		       2c 80 02 	      bit	SWCHA
   2760  f899		       30 04		      BMI	.skipL0101
   2761  f89b				   .condpart50
   2762  f89b		       a9 01		      LDA	#1
   2763  f89d		       85 d9		      STA	p0x
   2764  f89f				   .skipL0101
   2765  f89f				   .L0102		;  player0x  =  player0x  +  p0x
   2766  f89f
   2767  f89f		       a5 80		      LDA	player0x
   2768  f8a1		       18		      CLC
   2769  f8a2		       65 d9		      ADC	p0x
   2770  f8a4		       85 80		      STA	player0x
   2771  f8a6				   .
   2772  f8a6							; 
   2773  f8a6
   2774  f8a6				   .L0103		;  p0y  =  0  :  rem player movement sprite up & down
   2775  f8a6
   2776  f8a6		       a9 00		      LDA	#0
   2777  f8a8		       85 d7		      STA	p0y
   2778  f8aa				   .L0104		;  if joy0up then p0y	=  255
   2779  f8aa
   2780  f8aa		       a9 10		      lda	#$10
   2781  f8ac		       2c 80 02 	      bit	SWCHA
   2782  f8af		       d0 04		      BNE	.skipL0104
   2783  f8b1				   .condpart51
   2784  f8b1		       a9 ff		      LDA	#255
   2785  f8b3		       85 d7		      STA	p0y
   2786  f8b5				   .skipL0104
   2787  f8b5				   .L0105		;  if joy0down then p0y  =  1
   2788  f8b5
   2789  f8b5		       a9 20		      lda	#$20
   2790  f8b7		       2c 80 02 	      bit	SWCHA
   2791  f8ba		       d0 04		      BNE	.skipL0105
   2792  f8bc				   .condpart52
   2793  f8bc		       a9 01		      LDA	#1
   2794  f8be		       85 d7		      STA	p0y
   2795  f8c0				   .skipL0105
   2796  f8c0				   .L0106		;  player0y  =  player0y  +  p0y
   2797  f8c0
   2798  f8c0		       a5 85		      LDA	player0y
   2799  f8c2		       18		      CLC
   2800  f8c3		       65 d7		      ADC	p0y
   2801  f8c5		       85 85		      STA	player0y
   2802  f8c7				   .
   2803  f8c7							; 
   2804  f8c7
   2805  f8c7				   .L0107		;  rem ---------------------------------------------------------------------------------
   2806  f8c7
   2807  f8c7				   .L0108		;  rem This section sets a value for the last direction the joystick was pushed
   2808  f8c7
   2809  f8c7				   .L0109		;  rem
   2810  f8c7
   2811  f8c7				   .L0110		;  rem  This determines the direction the bullet will be fired later, and also
   2812  f8c7
   2813  f8c7				   .L0111		;  rem  allows you to keep firing the bullet in the same direction after you
   2814  f8c7
   2815  f8c7				   .L0112		;  rem  have stopped moving.
   2816  f8c7
   2817  f8c7				   .L0113		;  rem
   2818  f8c7
   2819  f8c7				   .L0114		;  rem  Each time you move, each of the eight possible directions of the joystick is
   2820  f8c7
   2821  f8c7				   .L0115		;  rem  marked as on or off with a bit variable.
   2822  f8c7
   2823  f8c7				   .L0116		;  rem ---------------------------------------------------------------------------------
   2824  f8c7
   2825  f8c7				   .
   2826  f8c7							; 
   2827  f8c7
   2828  f8c7				   .L0117		;  if joy0up then c{1} = 1 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   2829  f8c7
   2830  f8c7		       a9 10		      lda	#$10
   2831  f8c9		       2c 80 02 	      bit	SWCHA
   2832  f8cc		       d0 30		      BNE	.skipL0117
   2833  f8ce				   .condpart53
   2834  f8ce		       a5 d6		      LDA	c
   2835  f8d0		       09 02		      ORA	#2
   2836  f8d2		       85 d6		      STA	c
   2837  f8d4		       a5 d6		      LDA	c
   2838  f8d6		       29 fb		      AND	#251
   2839  f8d8		       85 d6		      STA	c
   2840  f8da		       a5 d6		      LDA	c
   2841  f8dc		       29 f7		      AND	#247
   2842  f8de		       85 d6		      STA	c
   2843  f8e0		       a5 d6		      LDA	c
   2844  f8e2		       29 ef		      AND	#239
   2845  f8e4		       85 d6		      STA	c
   2846  f8e6		       a5 d6		      LDA	c
   2847  f8e8		       29 df		      AND	#223
   2848  f8ea		       85 d6		      STA	c
   2849  f8ec		       a5 d6		      LDA	c
   2850  f8ee		       29 bf		      AND	#191
   2851  f8f0		       85 d6		      STA	c
   2852  f8f2		       a5 d6		      LDA	c
   2853  f8f4		       29 7f		      AND	#127
   2854  f8f6		       85 d6		      STA	c
   2855  f8f8		       a5 d6		      LDA	c
   2856  f8fa		       29 fe		      AND	#254
   2857  f8fc		       85 d6		      STA	c
   2858  f8fe				   .skipL0117
   2859  f8fe				   .L0118		;  if joy0down then c{1} = 0 : c{2} = 1 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   2860  f8fe
   2861  f8fe		       a9 20		      lda	#$20
   2862  f900		       2c 80 02 	      bit	SWCHA
   2863  f903		       d0 30		      BNE	.skipL0118
   2864  f905				   .condpart54
   2865  f905		       a5 d6		      LDA	c
   2866  f907		       29 fd		      AND	#253
   2867  f909		       85 d6		      STA	c
   2868  f90b		       a5 d6		      LDA	c
   2869  f90d		       09 04		      ORA	#4
   2870  f90f		       85 d6		      STA	c
   2871  f911		       a5 d6		      LDA	c
   2872  f913		       29 f7		      AND	#247
   2873  f915		       85 d6		      STA	c
   2874  f917		       a5 d6		      LDA	c
   2875  f919		       29 ef		      AND	#239
   2876  f91b		       85 d6		      STA	c
   2877  f91d		       a5 d6		      LDA	c
   2878  f91f		       29 df		      AND	#223
   2879  f921		       85 d6		      STA	c
   2880  f923		       a5 d6		      LDA	c
   2881  f925		       29 bf		      AND	#191
   2882  f927		       85 d6		      STA	c
   2883  f929		       a5 d6		      LDA	c
   2884  f92b		       29 7f		      AND	#127
   2885  f92d		       85 d6		      STA	c
   2886  f92f		       a5 d6		      LDA	c
   2887  f931		       29 fe		      AND	#254
   2888  f933		       85 d6		      STA	c
   2889  f935				   .skipL0118
   2890  f935				   .L0119		;  if joy0left then c{1} = 0 : c{2} = 0 : c{3} = 1 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   2891  f935
   2892  f935		       2c 80 02 	      bit	SWCHA
   2893  f938		       70 30		      BVS	.skipL0119
   2894  f93a				   .condpart55
   2895  f93a		       a5 d6		      LDA	c
   2896  f93c		       29 fd		      AND	#253
   2897  f93e		       85 d6		      STA	c
   2898  f940		       a5 d6		      LDA	c
   2899  f942		       29 fb		      AND	#251
   2900  f944		       85 d6		      STA	c
   2901  f946		       a5 d6		      LDA	c
   2902  f948		       09 08		      ORA	#8
   2903  f94a		       85 d6		      STA	c
   2904  f94c		       a5 d6		      LDA	c
   2905  f94e		       29 ef		      AND	#239
   2906  f950		       85 d6		      STA	c
   2907  f952		       a5 d6		      LDA	c
   2908  f954		       29 df		      AND	#223
   2909  f956		       85 d6		      STA	c
   2910  f958		       a5 d6		      LDA	c
   2911  f95a		       29 bf		      AND	#191
   2912  f95c		       85 d6		      STA	c
   2913  f95e		       a5 d6		      LDA	c
   2914  f960		       29 7f		      AND	#127
   2915  f962		       85 d6		      STA	c
   2916  f964		       a5 d6		      LDA	c
   2917  f966		       29 fe		      AND	#254
   2918  f968		       85 d6		      STA	c
   2919  f96a				   .skipL0119
   2920  f96a				   .L0120		;  if joy0right then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 1 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   2921  f96a
   2922  f96a		       2c 80 02 	      bit	SWCHA
   2923  f96d		       30 30		      BMI	.skipL0120
   2924  f96f				   .condpart56
   2925  f96f		       a5 d6		      LDA	c
   2926  f971		       29 fd		      AND	#253
   2927  f973		       85 d6		      STA	c
   2928  f975		       a5 d6		      LDA	c
   2929  f977		       29 fb		      AND	#251
   2930  f979		       85 d6		      STA	c
   2931  f97b		       a5 d6		      LDA	c
   2932  f97d		       29 f7		      AND	#247
   2933  f97f		       85 d6		      STA	c
   2934  f981		       a5 d6		      LDA	c
   2935  f983		       09 10		      ORA	#16
   2936  f985		       85 d6		      STA	c
   2937  f987		       a5 d6		      LDA	c
   2938  f989		       29 df		      AND	#223
   2939  f98b		       85 d6		      STA	c
   2940  f98d		       a5 d6		      LDA	c
   2941  f98f		       29 bf		      AND	#191
   2942  f991		       85 d6		      STA	c
   2943  f993		       a5 d6		      LDA	c
   2944  f995		       29 7f		      AND	#127
   2945  f997		       85 d6		      STA	c
   2946  f999		       a5 d6		      LDA	c
   2947  f99b		       29 fe		      AND	#254
   2948  f99d		       85 d6		      STA	c
   2949  f99f				   .skipL0120
   2950  f99f				   .L0121		;  if joy0up  &&  joy0left then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 1 : c{6} = 0 : c{7} = 0 : c{0} = 0
   2951  f99f
   2952  f99f		       a9 10		      lda	#$10
   2953  f9a1		       2c 80 02 	      bit	SWCHA
   2954  f9a4		       d0 35		      BNE	.skipL0121
   2955  f9a6				   .condpart57
   2956  f9a6		       2c 80 02 	      bit	SWCHA
   2957  f9a9		       70 30		      BVS	.skip57then
   2958  f9ab				   .condpart58
   2959  f9ab		       a5 d6		      LDA	c
   2960  f9ad		       29 fd		      AND	#253
   2961  f9af		       85 d6		      STA	c
   2962  f9b1		       a5 d6		      LDA	c
   2963  f9b3		       29 fb		      AND	#251
   2964  f9b5		       85 d6		      STA	c
   2965  f9b7		       a5 d6		      LDA	c
   2966  f9b9		       29 f7		      AND	#247
   2967  f9bb		       85 d6		      STA	c
   2968  f9bd		       a5 d6		      LDA	c
   2969  f9bf		       29 ef		      AND	#239
   2970  f9c1		       85 d6		      STA	c
   2971  f9c3		       a5 d6		      LDA	c
   2972  f9c5		       09 20		      ORA	#32
   2973  f9c7		       85 d6		      STA	c
   2974  f9c9		       a5 d6		      LDA	c
   2975  f9cb		       29 bf		      AND	#191
   2976  f9cd		       85 d6		      STA	c
   2977  f9cf		       a5 d6		      LDA	c
   2978  f9d1		       29 7f		      AND	#127
   2979  f9d3		       85 d6		      STA	c
   2980  f9d5		       a5 d6		      LDA	c
   2981  f9d7		       29 fe		      AND	#254
   2982  f9d9		       85 d6		      STA	c
   2983  f9db				   .skip57then
   2984  f9db				   .skipL0121
   2985  f9db				   .L0122		;  if joy0up  &&  joy0right then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 1 : c{7} = 0 : c{0} = 0
   2986  f9db
   2987  f9db		       a9 10		      lda	#$10
   2988  f9dd		       2c 80 02 	      bit	SWCHA
   2989  f9e0		       d0 35		      BNE	.skipL0122
   2990  f9e2				   .condpart59
   2991  f9e2		       2c 80 02 	      bit	SWCHA
   2992  f9e5		       30 30		      BMI	.skip59then
   2993  f9e7				   .condpart60
   2994  f9e7		       a5 d6		      LDA	c
   2995  f9e9		       29 fd		      AND	#253
   2996  f9eb		       85 d6		      STA	c
   2997  f9ed		       a5 d6		      LDA	c
   2998  f9ef		       29 fb		      AND	#251
   2999  f9f1		       85 d6		      STA	c
   3000  f9f3		       a5 d6		      LDA	c
   3001  f9f5		       29 f7		      AND	#247
   3002  f9f7		       85 d6		      STA	c
   3003  f9f9		       a5 d6		      LDA	c
   3004  f9fb		       29 ef		      AND	#239
   3005  f9fd		       85 d6		      STA	c
   3006  f9ff		       a5 d6		      LDA	c
   3007  fa01		       29 df		      AND	#223
   3008  fa03		       85 d6		      STA	c
   3009  fa05		       a5 d6		      LDA	c
   3010  fa07		       09 40		      ORA	#64
   3011  fa09		       85 d6		      STA	c
   3012  fa0b		       a5 d6		      LDA	c
   3013  fa0d		       29 7f		      AND	#127
   3014  fa0f		       85 d6		      STA	c
   3015  fa11		       a5 d6		      LDA	c
   3016  fa13		       29 fe		      AND	#254
   3017  fa15		       85 d6		      STA	c
   3018  fa17				   .skip59then
   3019  fa17				   .skipL0122
   3020  fa17				   .L0123		;  if joy0down  &&  joy0left then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 1 : c{0} = 0
   3021  fa17
   3022  fa17		       a9 20		      lda	#$20
   3023  fa19		       2c 80 02 	      bit	SWCHA
   3024  fa1c		       d0 35		      BNE	.skipL0123
   3025  fa1e				   .condpart61
   3026  fa1e		       2c 80 02 	      bit	SWCHA
   3027  fa21		       70 30		      BVS	.skip61then
   3028  fa23				   .condpart62
   3029  fa23		       a5 d6		      LDA	c
   3030  fa25		       29 fd		      AND	#253
   3031  fa27		       85 d6		      STA	c
   3032  fa29		       a5 d6		      LDA	c
   3033  fa2b		       29 fb		      AND	#251
   3034  fa2d		       85 d6		      STA	c
   3035  fa2f		       a5 d6		      LDA	c
   3036  fa31		       29 f7		      AND	#247
   3037  fa33		       85 d6		      STA	c
   3038  fa35		       a5 d6		      LDA	c
   3039  fa37		       29 ef		      AND	#239
   3040  fa39		       85 d6		      STA	c
   3041  fa3b		       a5 d6		      LDA	c
   3042  fa3d		       29 df		      AND	#223
   3043  fa3f		       85 d6		      STA	c
   3044  fa41		       a5 d6		      LDA	c
   3045  fa43		       29 bf		      AND	#191
   3046  fa45		       85 d6		      STA	c
   3047  fa47		       a5 d6		      LDA	c
   3048  fa49		       09 80		      ORA	#128
   3049  fa4b		       85 d6		      STA	c
   3050  fa4d		       a5 d6		      LDA	c
   3051  fa4f		       29 fe		      AND	#254
   3052  fa51		       85 d6		      STA	c
   3053  fa53				   .skip61then
   3054  fa53				   .skipL0123
   3055  fa53				   .L0124		;  if joy0down  &&  joy0right then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 1
   3056  fa53
   3057  fa53		       a9 20		      lda	#$20
   3058  fa55		       2c 80 02 	      bit	SWCHA
   3059  fa58		       d0 35		      BNE	.skipL0124
   3060  fa5a				   .condpart63
   3061  fa5a		       2c 80 02 	      bit	SWCHA
   3062  fa5d		       30 30		      BMI	.skip63then
   3063  fa5f				   .condpart64
   3064  fa5f		       a5 d6		      LDA	c
   3065  fa61		       29 fd		      AND	#253
   3066  fa63		       85 d6		      STA	c
   3067  fa65		       a5 d6		      LDA	c
   3068  fa67		       29 fb		      AND	#251
   3069  fa69		       85 d6		      STA	c
   3070  fa6b		       a5 d6		      LDA	c
   3071  fa6d		       29 f7		      AND	#247
   3072  fa6f		       85 d6		      STA	c
   3073  fa71		       a5 d6		      LDA	c
   3074  fa73		       29 ef		      AND	#239
   3075  fa75		       85 d6		      STA	c
   3076  fa77		       a5 d6		      LDA	c
   3077  fa79		       29 df		      AND	#223
   3078  fa7b		       85 d6		      STA	c
   3079  fa7d		       a5 d6		      LDA	c
   3080  fa7f		       29 bf		      AND	#191
   3081  fa81		       85 d6		      STA	c
   3082  fa83		       a5 d6		      LDA	c
   3083  fa85		       29 7f		      AND	#127
   3084  fa87		       85 d6		      STA	c
   3085  fa89		       a5 d6		      LDA	c
   3086  fa8b		       09 01		      ORA	#1
   3087  fa8d		       85 d6		      STA	c
   3088  fa8f				   .skip63then
   3089  fa8f				   .skipL0124
   3090  fa8f				   .
   3091  fa8f							; 
   3092  fa8f
   3093  fa8f				   .L0125		;  rem ------------------------------------------------------------------
   3094  fa8f
   3095  fa8f				   .L0126		;  rem  Increase 20 to a larger number to make the bullets travel farther
   3096  fa8f
   3097  fa8f				   .L0127		;  rem ------------------------------------------------------------------
   3098  fa8f
   3099  fa8f				   .L0128		;  e = e + 1
   3100  fa8f
   3101  fa8f		       e6 d8		      INC	e
   3102  fa91				   .L0129		;  if e > 50 then e = 0
   3103  fa91
   3104  fa91		       a9 32		      LDA	#50
   3105  fa93		       c5 d8		      CMP	e
   3106  fa95		       b0 04		      BCS	.skipL0129
   3107  fa97				   .condpart65
   3108  fa97		       a9 00		      LDA	#0
   3109  fa99		       85 d8		      STA	e
   3110  fa9b				   .skipL0129
   3111  fa9b				   .L0130		;  rem ------------------------------------------------------------------
   3112  fa9b
   3113  fa9b				   .L0131		;  rem  if you let go of the fire button, the missile shot is turned off,
   3114  fa9b
   3115  fa9b				   .L0132		;  rem  and the gunshot travel length variable (e) is reset to 0.
   3116  fa9b
   3117  fa9b				   .L0133		;  rem ------------------------------------------------------------------
   3118  fa9b
   3119  fa9b				   .L0134		;  if !joy0fire then missile0x = 0 : missile0y = 0 : e = 0
   3120  fa9b
   3121  fa9b		       24 0c		      bit	INPT4
   3122  fa9d		       10 08		      BPL	.skipL0134
   3123  fa9f				   .condpart66
   3124  fa9f		       a9 00		      LDA	#0
   3125  faa1		       85 82		      STA	missile0x
   3126  faa3		       85 91		      STA	missile0y
   3127  faa5		       85 d8		      STA	e
   3128  faa7				   .skipL0134
   3129  faa7				   .
   3130  faa7							; 
   3131  faa7
   3132  faa7				   .L0135		;  rem ------------------------------------------------------------------
   3133  faa7
   3134  faa7				   .L0136		;  rem  Fire the Missile
   3135  faa7
   3136  faa7				   .L0137		;  rem    This code is what actually fires the missile.
   3137  faa7
   3138  faa7				   .L0138		;  rem  
   3139  faa7
   3140  faa7				   .L0139		;  rem  It checks for a combination of pressing the fire button and
   3141  faa7
   3142  faa7				   .L0140		;  rem    the direction the joystick was most recently moved in to
   3143  faa7
   3144  faa7				   .L0141		;  rem    determine which direction to fire the missile.
   3145  faa7
   3146  faa7				   .L0142		;  rem
   3147  faa7
   3148  faa7				   .L0143		;  rem  the E variable determines the length of the shot
   3149  faa7
   3150  faa7				   .L0144		;  rem ------------------------------------------------------------------
   3151  faa7
   3152  faa7				   .
   3153  faa7							; 
   3154  faa7
   3155  faa7				   .L0145		;  rem diagonal shots
   3156  faa7
   3157  faa7				   .L0146		;  if joy0fire  &&  c{0} then missile0x = player0x + 7 + e : missile0y = player0y - 3 + e
   3158  faa7
   3159  faa7		       24 0c		      bit	INPT4
   3160  faa9		       30 19		      BMI	.skipL0146
   3161  faab				   .condpart67
   3162  faab		       a5 d6		      LDA	c
   3163  faad		       4a		      LSR
   3164  faae		       90 14		      BCC	.skip67then
   3165  fab0				   .condpart68
   3166  fab0							; complex statement detected
   3167  fab0		       a5 80		      LDA	player0x
   3168  fab2		       18		      CLC
   3169  fab3		       69 07		      ADC	#7
   3170  fab5		       18		      CLC
   3171  fab6		       65 d8		      ADC	e
   3172  fab8		       85 82		      STA	missile0x
   3173  faba							; complex statement detected
   3174  faba		       a5 85		      LDA	player0y
   3175  fabc		       38		      SEC
   3176  fabd		       e9 03		      SBC	#3
   3177  fabf		       18		      CLC
   3178  fac0		       65 d8		      ADC	e
   3179  fac2		       85 91		      STA	missile0y
   3180  fac4				   .skip67then
   3181  fac4				   .skipL0146
   3182  fac4				   .L0147		;  if joy0fire  &&  c{5} then missile0x = player0x - e : missile0y = player0y - 7 - e
   3183  fac4
   3184  fac4		       24 0c		      bit	INPT4
   3185  fac6		       30 17		      BMI	.skipL0147
   3186  fac8				   .condpart69
   3187  fac8		       a5 d6		      LDA	c
   3188  faca		       29 20		      AND	#32
   3189  facc		       f0 11		      BEQ	.skip69then
   3190  face				   .condpart70
   3191  face		       a5 80		      LDA	player0x
   3192  fad0		       38		      SEC
   3193  fad1		       e5 d8		      SBC	e
   3194  fad3		       85 82		      STA	missile0x
   3195  fad5							; complex statement detected
   3196  fad5		       a5 85		      LDA	player0y
   3197  fad7		       38		      SEC
   3198  fad8		       e9 07		      SBC	#7
   3199  fada		       38		      SEC
   3200  fadb		       e5 d8		      SBC	e
   3201  fadd		       85 91		      STA	missile0y
   3202  fadf				   .skip69then
   3203  fadf				   .skipL0147
   3204  fadf				   .L0148		;  if joy0fire  &&  c{7} then missile0x = player0x - e : missile0y = player0y + 1 + e
   3205  fadf
   3206  fadf		       24 0c		      bit	INPT4
   3207  fae1		       30 15		      BMI	.skipL0148
   3208  fae3				   .condpart71
   3209  fae3		       24 d6		      BIT	c
   3210  fae5		       10 11		      BPL	.skip71then
   3211  fae7				   .condpart72
   3212  fae7		       a5 80		      LDA	player0x
   3213  fae9		       38		      SEC
   3214  faea		       e5 d8		      SBC	e
   3215  faec		       85 82		      STA	missile0x
   3216  faee							; complex statement detected
   3217  faee		       a5 85		      LDA	player0y
   3218  faf0		       18		      CLC
   3219  faf1		       69 01		      ADC	#1
   3220  faf3		       18		      CLC
   3221  faf4		       65 d8		      ADC	e
   3222  faf6		       85 91		      STA	missile0y
   3223  faf8				   .skip71then
   3224  faf8				   .skipL0148
   3225  faf8				   .L0149		;  if joy0fire  &&  c{6} then missile0x = player0x + 7 + e : missile0y = player0y - 7 - e
   3226  faf8
   3227  faf8		       24 0c		      bit	INPT4
   3228  fafa		       30 18		      BMI	.skipL0149
   3229  fafc				   .condpart73
   3230  fafc		       24 d6		      BIT	c
   3231  fafe		       50 14		      BVC	.skip73then
   3232  fb00				   .condpart74
   3233  fb00							; complex statement detected
   3234  fb00		       a5 80		      LDA	player0x
   3235  fb02		       18		      CLC
   3236  fb03		       69 07		      ADC	#7
   3237  fb05		       18		      CLC
   3238  fb06		       65 d8		      ADC	e
   3239  fb08		       85 82		      STA	missile0x
   3240  fb0a							; complex statement detected
   3241  fb0a		       a5 85		      LDA	player0y
   3242  fb0c		       38		      SEC
   3243  fb0d		       e9 07		      SBC	#7
   3244  fb0f		       38		      SEC
   3245  fb10		       e5 d8		      SBC	e
   3246  fb12		       85 91		      STA	missile0y
   3247  fb14				   .skip73then
   3248  fb14				   .skipL0149
   3249  fb14				   .
   3250  fb14							; 
   3251  fb14
   3252  fb14				   .L0150		;  rem left and right shots
   3253  fb14
   3254  fb14				   .L0151		;  if joy0fire  &&  c{3} then missile0x = player0x - e : missile0y = player0y - 5
   3255  fb14
   3256  fb14		       24 0c		      bit	INPT4
   3257  fb16		       30 14		      BMI	.skipL0151
   3258  fb18				   .condpart75
   3259  fb18		       a5 d6		      LDA	c
   3260  fb1a		       29 08		      AND	#8
   3261  fb1c		       f0 0e		      BEQ	.skip75then
   3262  fb1e				   .condpart76
   3263  fb1e		       a5 80		      LDA	player0x
   3264  fb20		       38		      SEC
   3265  fb21		       e5 d8		      SBC	e
   3266  fb23		       85 82		      STA	missile0x
   3267  fb25		       a5 85		      LDA	player0y
   3268  fb27		       38		      SEC
   3269  fb28		       e9 05		      SBC	#5
   3270  fb2a		       85 91		      STA	missile0y
   3271  fb2c				   .skip75then
   3272  fb2c				   .skipL0151
   3273  fb2c				   .L0152		;  if joy0fire  &&  c{4} then missile0x = player0x + 8 + e : missile0y = player0y - 5
   3274  fb2c
   3275  fb2c		       24 0c		      bit	INPT4
   3276  fb2e		       30 17		      BMI	.skipL0152
   3277  fb30				   .condpart77
   3278  fb30		       a5 d6		      LDA	c
   3279  fb32		       29 10		      AND	#16
   3280  fb34		       f0 11		      BEQ	.skip77then
   3281  fb36				   .condpart78
   3282  fb36							; complex statement detected
   3283  fb36		       a5 80		      LDA	player0x
   3284  fb38		       18		      CLC
   3285  fb39		       69 08		      ADC	#8
   3286  fb3b		       18		      CLC
   3287  fb3c		       65 d8		      ADC	e
   3288  fb3e		       85 82		      STA	missile0x
   3289  fb40		       a5 85		      LDA	player0y
   3290  fb42		       38		      SEC
   3291  fb43		       e9 05		      SBC	#5
   3292  fb45		       85 91		      STA	missile0y
   3293  fb47				   .skip77then
   3294  fb47				   .skipL0152
   3295  fb47				   .
   3296  fb47							; 
   3297  fb47
   3298  fb47				   .L0153		;  rem up and down shots
   3299  fb47
   3300  fb47				   .L0154		;  if joy0fire  &&  c{1} then missile0x = player0x + 5 : missile0y = player0y - 10 - e
   3301  fb47
   3302  fb47		       24 0c		      bit	INPT4
   3303  fb49		       30 17		      BMI	.skipL0154
   3304  fb4b				   .condpart79
   3305  fb4b		       a5 d6		      LDA	c
   3306  fb4d		       29 02		      AND	#2
   3307  fb4f		       f0 11		      BEQ	.skip79then
   3308  fb51				   .condpart80
   3309  fb51		       a5 80		      LDA	player0x
   3310  fb53		       18		      CLC
   3311  fb54		       69 05		      ADC	#5
   3312  fb56		       85 82		      STA	missile0x
   3313  fb58							; complex statement detected
   3314  fb58		       a5 85		      LDA	player0y
   3315  fb5a		       38		      SEC
   3316  fb5b		       e9 0a		      SBC	#10
   3317  fb5d		       38		      SEC
   3318  fb5e		       e5 d8		      SBC	e
   3319  fb60		       85 91		      STA	missile0y
   3320  fb62				   .skip79then
   3321  fb62				   .skipL0154
   3322  fb62				   .L0155		;  if joy0fire  &&  c{2} then missile0x = player0x + 5 : missile0y = player0y + 3 + e
   3323  fb62
   3324  fb62		       24 0c		      bit	INPT4
   3325  fb64		       30 17		      BMI	.skipL0155
   3326  fb66				   .condpart81
   3327  fb66		       a5 d6		      LDA	c
   3328  fb68		       29 04		      AND	#4
   3329  fb6a		       f0 11		      BEQ	.skip81then
   3330  fb6c				   .condpart82
   3331  fb6c		       a5 80		      LDA	player0x
   3332  fb6e		       18		      CLC
   3333  fb6f		       69 05		      ADC	#5
   3334  fb71		       85 82		      STA	missile0x
   3335  fb73							; complex statement detected
   3336  fb73		       a5 85		      LDA	player0y
   3337  fb75		       18		      CLC
   3338  fb76		       69 03		      ADC	#3
   3339  fb78		       18		      CLC
   3340  fb79		       65 d8		      ADC	e
   3341  fb7b		       85 91		      STA	missile0y
   3342  fb7d				   .skip81then
   3343  fb7d				   .skipL0155
   3344  fb7d				   .
   3345  fb7d							; 
   3346  fb7d
   3347  fb7d				   .L0156		;  rem ------------------------------------------------------------------
   3348  fb7d
   3349  fb7d				   .L0157		;  rem This stops the animation and shows a still sprite when you're 
   3350  fb7d
   3351  fb7d				   .L0158		;  rem not moving.
   3352  fb7d
   3353  fb7d				   .L0159		;  rem ------------------------------------------------------------------
   3354  fb7d
   3355  fb7d				   .L0160		;  if !joy0up	&&  !joy0down  &&  !joy0left  &&  !joy0right then y = 30
   3356  fb7d
   3357  fb7d		       a9 10		      lda	#$10
   3358  fb7f		       2c 80 02 	      bit	SWCHA
   3359  fb82		       f0 15		      BEQ	.skipL0160
   3360  fb84				   .condpart83
   3361  fb84		       a9 20		      lda	#$20
   3362  fb86		       2c 80 02 	      bit	SWCHA
   3363  fb89		       f0 0e		      BEQ	.skip83then
   3364  fb8b				   .condpart84
   3365  fb8b		       2c 80 02 	      bit	SWCHA
   3366  fb8e		       50 09		      BVC	.skip84then
   3367  fb90				   .condpart85
   3368  fb90		       2c 80 02 	      bit	SWCHA
   3369  fb93		       10 04		      BPL	.skip85then
   3370  fb95				   .condpart86
   3371  fb95		       a9 1e		      LDA	#30
   3372  fb97		       85 ec		      STA	y
   3373  fb99				   .skip85then
   3374  fb99				   .skip84then
   3375  fb99				   .skip83then
   3376  fb99				   .skipL0160
   3377  fb99				   .
   3378  fb99							; 
   3379  fb99
   3380  fb99				   .L0161		;  rem ------------------------------------------------------------------
   3381  fb99
   3382  fb99				   .L0162		;  rem monster movement logic
   3383  fb99
   3384  fb99				   .L0163		;  z  =  z  +	1  :  rem Counter for movement timing
   3385  fb99
   3386  fb99		       e6 ed		      INC	z
   3387  fb9b				   .
   3388  fb9b							; 
   3389  fb9b
   3390  fb9b				   .L0164		;  if z  >  40 then player1x  =  player1x  +  p1x
   3391  fb9b
   3392  fb9b		       a9 28		      LDA	#40
   3393  fb9d		       c5 ed		      CMP	z
   3394  fb9f		       b0 07		      BCS	.skipL0164
   3395  fba1				   .condpart87
   3396  fba1		       a5 81		      LDA	player1x
   3397  fba3		       18		      CLC
   3398  fba4		       65 db		      ADC	p1x
   3399  fba6		       85 81		      STA	player1x
   3400  fba8				   .skipL0164
   3401  fba8				   .L0165		;  if z  >  80 then player1y  =  player1y  +  p1y  :  z  =  0	:  rem Reset movement counter
   3402  fba8
   3403  fba8		       a9 50		      LDA	#80
   3404  fbaa		       c5 ed		      CMP	z
   3405  fbac		       b0 0b		      BCS	.skipL0165
   3406  fbae				   .condpart88
   3407  fbae		       a5 86		      LDA	player1y
   3408  fbb0		       18		      CLC
   3409  fbb1		       65 da		      ADC	p1y
   3410  fbb3		       85 86		      STA	player1y
   3411  fbb5		       a9 00		      LDA	#0
   3412  fbb7		       85 ed		      STA	z
   3413  fbb9				   .skipL0165
   3414  fbb9				   .
   3415  fbb9							; 
   3416  fbb9
   3417  fbb9				   .L0166		;  rem If Player 1 collides with the playfield, move back and reverse direction
   3418  fbb9
   3419  fbb9				   .L0167		;  if collision(player1,playfield) then player1x  =  player1x	-  p1x	:  player1y  =	player1y  -  p1y  :  p1x  =   - p1x  :	p1y  =	 - p1y
   3420  fbb9
   3421  fbb9		       24 03		      bit	CXP1FB
   3422  fbbb		       10 1c		      BPL	.skipL0167
   3423  fbbd				   .condpart89
   3424  fbbd		       a5 81		      LDA	player1x
   3425  fbbf		       38		      SEC
   3426  fbc0		       e5 db		      SBC	p1x
   3427  fbc2		       85 81		      STA	player1x
   3428  fbc4		       a5 86		      LDA	player1y
   3429  fbc6		       38		      SEC
   3430  fbc7		       e5 da		      SBC	p1y
   3431  fbc9		       85 86		      STA	player1y
   3432  fbcb		       a9 00		      LDA	#0
   3433  fbcd		       38		      SEC
   3434  fbce		       e5 db		      SBC	p1x
   3435  fbd0		       85 db		      STA	p1x
   3436  fbd2		       a9 00		      LDA	#0
   3437  fbd4		       38		      SEC
   3438  fbd5		       e5 da		      SBC	p1y
   3439  fbd7		       85 da		      STA	p1y
   3440  fbd9				   .skipL0167
   3441  fbd9				   .
   3442  fbd9							; 
   3443  fbd9
   3444  fbd9				   .L0168		;  rem Keep Player 1 inside the screen boundaries
   3445  fbd9
   3446  fbd9				   .L0169		;  if player1x  >  120 then player1x  =  120  :  p1x  =   - 1
   3447  fbd9
   3448  fbd9		       a9 78		      LDA	#120
   3449  fbdb		       c5 81		      CMP	player1x
   3450  fbdd		       b0 08		      BCS	.skipL0169
   3451  fbdf				   .condpart90
   3452  fbdf		       a9 78		      LDA	#120
   3453  fbe1		       85 81		      STA	player1x
   3454  fbe3		       a9 ff		      LDA	#255
   3455  fbe5		       85 db		      STA	p1x
   3456  fbe7				   .skipL0169
   3457  fbe7				   .L0170		;  if player1x  <  10 then player1x  =  10  :	p1x  =	1
   3458  fbe7
   3459  fbe7		       a5 81		      LDA	player1x
   3460  fbe9		       c9 0a		      CMP	#10
   3461  fbeb		       b0 08		      BCS	.skipL0170
   3462  fbed				   .condpart91
   3463  fbed		       a9 0a		      LDA	#10
   3464  fbef		       85 81		      STA	player1x
   3465  fbf1		       a9 01		      LDA	#1
   3466  fbf3		       85 db		      STA	p1x
   3467  fbf5				   .skipL0170
   3468  fbf5				   .L0171		;  if player1y  >  80 then player1y  =  80  :	p1y  =	 - 1
   3469  fbf5
   3470  fbf5		       a9 50		      LDA	#80
   3471  fbf7		       c5 86		      CMP	player1y
   3472  fbf9		       b0 08		      BCS	.skipL0171
   3473  fbfb				   .condpart92
   3474  fbfb		       a9 50		      LDA	#80
   3475  fbfd		       85 86		      STA	player1y
   3476  fbff		       a9 ff		      LDA	#255
   3477  fc01		       85 da		      STA	p1y
   3478  fc03				   .skipL0171
   3479  fc03				   .L0172		;  if player1y  <  10 then player1y  =  10  :	p1y  =	1
   3480  fc03
   3481  fc03		       a5 86		      LDA	player1y
   3482  fc05		       c9 0a		      CMP	#10
   3483  fc07		       b0 08		      BCS	.skipL0172
   3484  fc09				   .condpart93
   3485  fc09		       a9 0a		      LDA	#10
   3486  fc0b		       85 86		      STA	player1y
   3487  fc0d		       a9 01		      LDA	#1
   3488  fc0f		       85 da		      STA	p1y
   3489  fc11				   .skipL0172
   3490  fc11				   .
   3491  fc11							; 
   3492  fc11
   3493  fc11				   .L0173		;  rem ------------------------------------------------------------------
   3494  fc11
   3495  fc11				   .L0174		;  rem monster missile logic
   3496  fc11
   3497  fc11				   .L0175		;  if	( rand	&  3 )	 =  0  &&  missile1x  =  0 then missile1x  =  player1x	:  missile1y  =  player1y
   3498  fc11
   3499  fc11							; complex condition detected
   3500  fc11							; complex statement detected
   3501  fc11		       20 b3 f3 	      jsr	randomize
   3502  fc14		       29 03		      AND	#3
   3503  fc16							; todo: this LDA is spurious and should be prevented ->	LDA  1,x
   3504  fc16		       c9 00		      CMP	#0
   3505  fc18		       d0 0e		      BNE	.skipL0175
   3506  fc1a				   .condpart94
   3507  fc1a		       a5 83		      LDA	missile1x
   3508  fc1c		       c9 00		      CMP	#0
   3509  fc1e		       d0 08		      BNE	.skip94then
   3510  fc20				   .condpart95
   3511  fc20		       a5 81		      LDA	player1x
   3512  fc22		       85 83		      STA	missile1x
   3513  fc24		       a5 86		      LDA	player1y
   3514  fc26		       85 88		      STA	missile1y
   3515  fc28				   .skip94then
   3516  fc28				   .skipL0175
   3517  fc28				   .L0176		;  if missile1x  >  0 then missile1x  =  missile1x  +	 ( rand  &  3 )   -  1	:  missile1y  =  missile1y  +	( rand	&  3 )	 -  1
   3518  fc28
   3519  fc28		       a9 00		      LDA	#0
   3520  fc2a		       c5 83		      CMP	missile1x
   3521  fc2c		       b0 26		      BCS	.skipL0176
   3522  fc2e				   .condpart96
   3523  fc2e							; complex statement detected
   3524  fc2e		       a5 83		      LDA	missile1x
   3525  fc30		       48		      PHA
   3526  fc31		       20 b3 f3 	      jsr	randomize
   3527  fc34		       29 03		      AND	#3
   3528  fc36		       ba		      TSX
   3529  fc37		       e8		      INX
   3530  fc38		       9a		      TXS
   3531  fc39		       18		      CLC
   3532  fc3a		       75 00		      ADC	$00,x
   3533  fc3c		       38		      SEC
   3534  fc3d		       e9 01		      SBC	#1
   3535  fc3f		       85 83		      STA	missile1x
   3536  fc41							; complex statement detected
   3537  fc41		       a5 88		      LDA	missile1y
   3538  fc43		       48		      PHA
   3539  fc44		       20 b3 f3 	      jsr	randomize
   3540  fc47		       29 03		      AND	#3
   3541  fc49		       ba		      TSX
   3542  fc4a		       e8		      INX
   3543  fc4b		       9a		      TXS
   3544  fc4c		       18		      CLC
   3545  fc4d		       75 00		      ADC	$00,x
   3546  fc4f		       38		      SEC
   3547  fc50		       e9 01		      SBC	#1
   3548  fc52		       85 88		      STA	missile1y
   3549  fc54				   .skipL0176
   3550  fc54				   .L0177		;  if missile1x  >  120 then missile1x  =  120  :  missile1x  =  missile1x  -	1
   3551  fc54
   3552  fc54		       a9 78		      LDA	#120
   3553  fc56		       c5 83		      CMP	missile1x
   3554  fc58		       b0 06		      BCS	.skipL0177
   3555  fc5a				   .condpart97
   3556  fc5a		       a9 78		      LDA	#120
   3557  fc5c		       85 83		      STA	missile1x
   3558  fc5e		       c6 83		      DEC	missile1x
   3559  fc60				   .skipL0177
   3560  fc60				   .L0178		;  if missile1x  <  10 then missile1x	=  10  :  missile1x  =	missile1x  +  1
   3561  fc60
   3562  fc60		       a5 83		      LDA	missile1x
   3563  fc62		       c9 0a		      CMP	#10
   3564  fc64		       b0 06		      BCS	.skipL0178
   3565  fc66				   .condpart98
   3566  fc66		       a9 0a		      LDA	#10
   3567  fc68		       85 83		      STA	missile1x
   3568  fc6a		       e6 83		      INC	missile1x
   3569  fc6c				   .skipL0178
   3570  fc6c				   .L0179		;  if missile1y  >  80 then missile1y	=  180	:  missile1y  =  missile1y  -  1
   3571  fc6c
   3572  fc6c		       a9 50		      LDA	#80
   3573  fc6e		       c5 88		      CMP	missile1y
   3574  fc70		       b0 06		      BCS	.skipL0179
   3575  fc72				   .condpart99
   3576  fc72		       a9 b4		      LDA	#180
   3577  fc74		       85 88		      STA	missile1y
   3578  fc76		       c6 88		      DEC	missile1y
   3579  fc78				   .skipL0179
   3580  fc78				   .L0180		;  if missile1y  <  10 then missile1y	=  0  :  missile1y  =  missile1y  +  1
   3581  fc78
   3582  fc78		       a5 88		      LDA	missile1y
   3583  fc7a		       c9 0a		      CMP	#10
   3584  fc7c		       b0 06		      BCS	.skipL0180
   3585  fc7e				   .condpart100
   3586  fc7e		       a9 00		      LDA	#0
   3587  fc80		       85 88		      STA	missile1y
   3588  fc82		       e6 88		      INC	missile1y
   3589  fc84				   .skipL0180
   3590  fc84				   .L0181		;  if collision(missile1,playfield) then missile1x  =	missile1x  -   ( rand  &  3 )	+  1  :  missile1y  =  missile1y  -   ( rand  &  3 )   +  1
   3591  fc84
   3592  fc84		       24 05		      bit	CXM1FB
   3593  fc86		       10 2a		      BPL	.skipL0181
   3594  fc88				   .condpart101
   3595  fc88							; complex statement detected
   3596  fc88		       a5 83		      LDA	missile1x
   3597  fc8a		       48		      PHA
   3598  fc8b		       20 b3 f3 	      jsr	randomize
   3599  fc8e		       29 03		      AND	#3
   3600  fc90		       a8		      TAY
   3601  fc91		       68		      PLA
   3602  fc92		       ba		      TSX
   3603  fc93		       94 00		      STY	$00,x
   3604  fc95		       38		      SEC
   3605  fc96		       f5 00		      SBC	$00,x
   3606  fc98		       18		      CLC
   3607  fc99		       69 01		      ADC	#1
   3608  fc9b		       85 83		      STA	missile1x
   3609  fc9d							; complex statement detected
   3610  fc9d		       a5 88		      LDA	missile1y
   3611  fc9f		       48		      PHA
   3612  fca0		       20 b3 f3 	      jsr	randomize
   3613  fca3		       29 03		      AND	#3
   3614  fca5		       a8		      TAY
   3615  fca6		       68		      PLA
   3616  fca7		       ba		      TSX
   3617  fca8		       94 00		      STY	$00,x
   3618  fcaa		       38		      SEC
   3619  fcab		       f5 00		      SBC	$00,x
   3620  fcad		       18		      CLC
   3621  fcae		       69 01		      ADC	#1
   3622  fcb0		       85 88		      STA	missile1y
   3623  fcb2				   .skipL0181
   3624  fcb2				   .L0182		;  if missile1x  =  player1x  &&  missile1y  =  player1y then missile1x  =  0	:  missile1y  =  0
   3625  fcb2
   3626  fcb2		       a5 83		      LDA	missile1x
   3627  fcb4		       c5 81		      CMP	player1x
   3628  fcb6		       d0 0c		      BNE	.skipL0182
   3629  fcb8				   .condpart102
   3630  fcb8		       a5 88		      LDA	missile1y
   3631  fcba		       c5 86		      CMP	player1y
   3632  fcbc		       d0 06		      BNE	.skip102then
   3633  fcbe				   .condpart103
   3634  fcbe		       a9 00		      LDA	#0
   3635  fcc0		       85 83		      STA	missile1x
   3636  fcc2		       85 88		      STA	missile1y
   3637  fcc4				   .skip102then
   3638  fcc4				   .skipL0182
   3639  fcc4				   .
   3640  fcc4							; 
   3641  fcc4
   3642  fcc4				   .L0183		;  drawscreen
   3643  fcc4
   3644  fcc4		       20 bd f3 	      jsr	drawscreen
   3645  fcc7				   .
   3646  fcc7							; 
   3647  fcc7
   3648  fcc7				   .L0184		;  rem ---------------------------------------------------------------------------------
   3649  fcc7
   3650  fcc7				   .L0185		;  if collision(player0,playfield) then gosub knock_player_back  :  rem if player collides with playfield knockback
   3651  fcc7
   3652  fcc7		       24 02		      bit	CXP0FB
   3653  fcc9		       10 03		      BPL	.skipL0185
   3654  fccb				   .condpart104
   3655  fccb		       20 d1 fc 	      jsr	.knock_player_back
   3656  fcce				   .skipL0185
   3657  fcce				   .
   3658  fcce							; 
   3659  fcce
   3660  fcce				   .L0186		;  goto main
   3661  fcce
   3662  fcce		       4c 30 f5 	      jmp	.main
   3663  fcd1
   3664  fcd1				   .
   3665  fcd1							; 
   3666  fcd1
   3667  fcd1				   .L0187		;  rem knockback function
   3668  fcd1
   3669  fcd1				   .knock_player_back
   3670  fcd1							; knock_player_back
   3671  fcd1
   3672  fcd1				   .L0188		;  player0x  =  player0x  -  p0x
   3673  fcd1
   3674  fcd1		       a5 80		      LDA	player0x
   3675  fcd3		       38		      SEC
   3676  fcd4		       e5 d9		      SBC	p0x
   3677  fcd6		       85 80		      STA	player0x
   3678  fcd8				   .L0189		;  player0y  =  player0y  -  p0y
   3679  fcd8
   3680  fcd8		       a5 85		      LDA	player0y
   3681  fcda		       38		      SEC
   3682  fcdb		       e5 d7		      SBC	p0y
   3683  fcdd		       85 85		      STA	player0y
   3684  fcdf				   .L0190		;  return
   3685  fcdf
   3686  fcdf		       60		      RTS
   3687  fce0				   .
   3688  fce0							; 
   3689  fce0
   3690  fce0				   .win
   3691  fce0							; win
   3692  fce0
   3693  fce0				   .L0191		;  COLUPF  =  $1C  +	( rand	&  3 )	 :  rem Set random yellow shades for the playfield
   3694  fce0
   3695  fce0							; complex statement detected
   3696  fce0		       a9 1c		      LDA	#$1C
   3697  fce2		       48		      PHA
   3698  fce3		       20 b3 f3 	      jsr	randomize
   3699  fce6		       29 03		      AND	#3
   3700  fce8		       ba		      TSX
   3701  fce9		       e8		      INX
   3702  fcea		       9a		      TXS
   3703  fceb		       18		      CLC
   3704  fcec		       75 00		      ADC	$00,x
   3705  fcee		       85 08		      STA	COLUPF
   3706  fcf0				   .
   3707  fcf0							; 
   3708  fcf0
   3709  fcf0				   .L0192		;  playfield:
   3710  fcf0
   3711  fcf0				  -	      ifconst	pfres
   3712  fcf0				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3713  fcf0					      else
   3714  fcf0		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3715  fcf2					      endif
   3716  fcf2		       4c 21 fd 	      jmp	pflabel4
   3717  fcf5				   PF_data4
   3718  fcf5		       ff ff		      .byte.b	%11111111, %11111111
   3719  fcf7					      if	(pfwidth>2)
   3720  fcf7		       ff ff		      .byte.b	%11111111, %11111111
   3721  fcf9					      endif
   3722  fcf9		       80 00		      .byte.b	%10000000, %00000000
   3723  fcfb					      if	(pfwidth>2)
   3724  fcfb		       00 80		      .byte.b	%00000000, %10000000
   3725  fcfd					      endif
   3726  fcfd		       b0 db		      .byte.b	%10110000, %11011011
   3727  fcff					      if	(pfwidth>2)
   3728  fcff		       e0 b6		      .byte.b	%11100000, %10110110
   3729  fd01					      endif
   3730  fd01		       b0 db		      .byte.b	%10110000, %11011011
   3731  fd03					      if	(pfwidth>2)
   3732  fd03		       30 b6		      .byte.b	%00110000, %10110110
   3733  fd05					      endif
   3734  fd05		       b0 db		      .byte.b	%10110000, %11011011
   3735  fd07					      if	(pfwidth>2)
   3736  fd07		       18 b6		      .byte.b	%00011000, %10110110
   3737  fd09					      endif
   3738  fd09		       b0 db		      .byte.b	%10110000, %11011011
   3739  fd0b					      if	(pfwidth>2)
   3740  fd0b		       0c b6		      .byte.b	%00001100, %10110110
   3741  fd0d					      endif
   3742  fd0d		       b0 db		      .byte.b	%10110000, %11011011
   3743  fd0f					      if	(pfwidth>2)
   3744  fd0f		       06 b6		      .byte.b	%00000110, %10110110
   3745  fd11					      endif
   3746  fd11		       b6 db		      .byte.b	%10110110, %11011011
   3747  fd13					      if	(pfwidth>2)
   3748  fd13		       03 86		      .byte.b	%00000011, %10000110
   3749  fd15					      endif
   3750  fd15		       b6 db		      .byte.b	%10110110, %11011011
   3751  fd17					      if	(pfwidth>2)
   3752  fd17		       01 b7		      .byte.b	%00000001, %10110111
   3753  fd19					      endif
   3754  fd19		       b9 db		      .byte.b	%10111001, %11011011
   3755  fd1b					      if	(pfwidth>2)
   3756  fd1b		       00 b7		      .byte.b	%00000000, %10110111
   3757  fd1d					      endif
   3758  fd1d		       ff ff		      .byte.b	%11111111, %11111111
   3759  fd1f					      if	(pfwidth>2)
   3760  fd1f		       ff ff		      .byte.b	%11111111, %11111111
   3761  fd21					      endif
   3762  fd21				   pflabel4
   3763  fd21		       bd f5 fc 	      lda	PF_data4,x
   3764  fd24		       95 a4		      sta	playfield,x
   3765  fd26		       ca		      dex
   3766  fd27		       10 f8		      bpl	pflabel4
   3767  fd29				   .L0193		;  drawscreen
   3768  fd29
   3769  fd29		       20 bd f3 	      jsr	drawscreen
   3770  fd2c				   .L0194		;  goto win
   3771  fd2c
   3772  fd2c		       4c e0 fc 	      jmp	.win
   3773  fd2f
   3774  fd2f				   .
   3775  fd2f							; 
   3776  fd2f
   3777  fd2f				   .lose
   3778  fd2f							; lose
   3779  fd2f
   3780  fd2f				   .L0195		;  COLUPF  =  $4C  +	( rand	&  3 )	 :  rem Set random red shades for the playfield
   3781  fd2f
   3782  fd2f							; complex statement detected
   3783  fd2f		       a9 4c		      LDA	#$4C
   3784  fd31		       48		      PHA
   3785  fd32		       20 b3 f3 	      jsr	randomize
   3786  fd35		       29 03		      AND	#3
   3787  fd37		       ba		      TSX
   3788  fd38		       e8		      INX
   3789  fd39		       9a		      TXS
   3790  fd3a		       18		      CLC
   3791  fd3b		       75 00		      ADC	$00,x
   3792  fd3d		       85 08		      STA	COLUPF
   3793  fd3f				   .
   3794  fd3f							; 
   3795  fd3f
   3796  fd3f				   .L0196		;  playfield:
   3797  fd3f
   3798  fd3f				  -	      ifconst	pfres
   3799  fd3f				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3800  fd3f					      else
   3801  fd3f		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3802  fd41					      endif
   3803  fd41		       4c 70 fd 	      jmp	pflabel5
   3804  fd44				   PF_data5
   3805  fd44		       ff ff		      .byte.b	%11111111, %11111111
   3806  fd46					      if	(pfwidth>2)
   3807  fd46		       ff ff		      .byte.b	%11111111, %11111111
   3808  fd48					      endif
   3809  fd48		       80 00		      .byte.b	%10000000, %00000000
   3810  fd4a					      if	(pfwidth>2)
   3811  fd4a		       00 80		      .byte.b	%00000000, %10000000
   3812  fd4c					      endif
   3813  fd4c		       bc 7d		      .byte.b	%10111100, %01111101
   3814  fd4e					      if	(pfwidth>2)
   3815  fd4e		       90 80		      .byte.b	%10010000, %10000000
   3816  fd50					      endif
   3817  fd50		       a0 11		      .byte.b	%10100000, %00010001
   3818  fd52					      if	(pfwidth>2)
   3819  fd52		       f0 80		      .byte.b	%11110000, %10000000
   3820  fd54					      endif
   3821  fd54		       bc 11		      .byte.b	%10111100, %00010001
   3822  fd56					      if	(pfwidth>2)
   3823  fd56		       10 80		      .byte.b	%00010000, %10000000
   3824  fd58					      endif
   3825  fd58		       80 c0		      .byte.b	%10000000, %11000000
   3826  fd5a					      if	(pfwidth>2)
   3827  fd5a		       e7 bf		      .byte.b	%11100111, %10111111
   3828  fd5c					      endif
   3829  fd5c		       a0 5f		      .byte.b	%10100000, %01011111
   3830  fd5e					      if	(pfwidth>2)
   3831  fd5e		       00 83		      .byte.b	%00000000, %10000011
   3832  fd60					      endif
   3833  fd60		       a0 d1		      .byte.b	%10100000, %11010001
   3834  fd62					      if	(pfwidth>2)
   3835  fd62		       f0 83		      .byte.b	%11110000, %10000011
   3836  fd64					      endif
   3837  fd64		       be 1f		      .byte.b	%10111110, %00011111
   3838  fd66					      if	(pfwidth>2)
   3839  fd66		       10 83		      .byte.b	%00010000, %10000011
   3840  fd68					      endif
   3841  fd68		       80 e0		      .byte.b	%10000000, %11100000
   3842  fd6a					      if	(pfwidth>2)
   3843  fd6a		       f0 83		      .byte.b	%11110000, %10000011
   3844  fd6c					      endif
   3845  fd6c		       ff ff		      .byte.b	%11111111, %11111111
   3846  fd6e					      if	(pfwidth>2)
   3847  fd6e		       ff ff		      .byte.b	%11111111, %11111111
   3848  fd70					      endif
   3849  fd70				   pflabel5
   3850  fd70		       bd 44 fd 	      lda	PF_data5,x
   3851  fd73		       95 a4		      sta	playfield,x
   3852  fd75		       ca		      dex
   3853  fd76		       10 f8		      bpl	pflabel5
   3854  fd78				   .L0197		;  drawscreen
   3855  fd78
   3856  fd78		       20 bd f3 	      jsr	drawscreen
   3857  fd7b				   .L0198		;  goto lose
   3858  fd7b
   3859  fd7b		       4c 2f fd 	      jmp	.lose
   3860  fd7e
   3861  fd7e				   .
   3862  fd7e							; 
   3863  fd7e
   3864  fd7e				   .
   3865  fd7e							; 
   3866  fd7e
   3867  fd7e				  -	      if	(<*) > (<(*+10))
   3868  fd7e				  -	      repeat	($100-<*)
   3869  fd7e				  -	      .byte	0
   3870  fd7e				  -	      repend
   3871  fd7e					      endif
   3872  fd7e				   player11then_0
   3873  fd7e		       1c		      .byte.b	%00011100
   3874  fd7f		       18		      .byte.b	%00011000
   3875  fd80		       18		      .byte.b	%00011000
   3876  fd81		       20		      .byte.b	%00100000
   3877  fd82		       18		      .byte.b	%00011000
   3878  fd83		       5f		      .byte.b	%01011111
   3879  fd84		       64		      .byte.b	%01100100
   3880  fd85		       10		      .byte.b	%00010000
   3881  fd86		       18		      .byte.b	%00011000
   3882  fd87		       18		      .byte.b	%00011000
   3883  fd88		       00		      .byte.b	%00000000
   3884  fd89				  -	      if	(<*) > (<(*+10))
   3885  fd89				  -	      repeat	($100-<*)
   3886  fd89				  -	      .byte	0
   3887  fd89				  -	      repend
   3888  fd89					      endif
   3889  fd89				   player13then_0
   3890  fd89		       38		      .byte.b	%00111000
   3891  fd8a		       18		      .byte.b	%00011000
   3892  fd8b		       18		      .byte.b	%00011000
   3893  fd8c		       04		      .byte.b	%00000100
   3894  fd8d		       18		      .byte.b	%00011000
   3895  fd8e		       fa		      .byte.b	%11111010
   3896  fd8f		       26		      .byte.b	%00100110
   3897  fd90		       08		      .byte.b	%00001000
   3898  fd91		       18		      .byte.b	%00011000
   3899  fd92		       18		      .byte.b	%00011000
   3900  fd93		       00		      .byte.b	%00000000
   3901  fd94				  -	      if	(<*) > (<(*+10))
   3902  fd94				  -	      repeat	($100-<*)
   3903  fd94				  -	      .byte	0
   3904  fd94				  -	      repend
   3905  fd94					      endif
   3906  fd94				   player15then_0
   3907  fd94		       c2		      .byte.b	%11000010
   3908  fd95		       46		      .byte.b	%01000110
   3909  fd96		       6c		      .byte.b	%01101100
   3910  fd97		       38		      .byte.b	%00111000
   3911  fd98		       14		      .byte.b	%00010100
   3912  fd99		       3c		      .byte.b	%00111100
   3913  fd9a		       24		      .byte.b	%00100100
   3914  fd9b		       08		      .byte.b	%00001000
   3915  fd9c		       18		      .byte.b	%00011000
   3916  fd9d		       18		      .byte.b	%00011000
   3917  fd9e		       00		      .byte.b	%00000000
   3918  fd9f				  -	      if	(<*) > (<(*+10))
   3919  fd9f				  -	      repeat	($100-<*)
   3920  fd9f				  -	      .byte	0
   3921  fd9f				  -	      repend
   3922  fd9f					      endif
   3923  fd9f				   player17then_0
   3924  fd9f		       38		      .byte.b	%00111000
   3925  fda0		       18		      .byte.b	%00011000
   3926  fda1		       18		      .byte.b	%00011000
   3927  fda2		       04		      .byte.b	%00000100
   3928  fda3		       5a		      .byte.b	%01011010
   3929  fda4		       3e		      .byte.b	%00111110
   3930  fda5		       24		      .byte.b	%00100100
   3931  fda6		       08		      .byte.b	%00001000
   3932  fda7		       18		      .byte.b	%00011000
   3933  fda8		       18		      .byte.b	%00011000
   3934  fda9		       00		      .byte.b	%00000000
   3935  fdaa				  -	      if	(<*) > (<(*+10))
   3936  fdaa				  -	      repeat	($100-<*)
   3937  fdaa				  -	      .byte	0
   3938  fdaa				  -	      repend
   3939  fdaa					      endif
   3940  fdaa				   player19then_0
   3941  fdaa		       1c		      .byte.b	%00011100
   3942  fdab		       18		      .byte.b	%00011000
   3943  fdac		       18		      .byte.b	%00011000
   3944  fdad		       20		      .byte.b	%00100000
   3945  fdae		       18		      .byte.b	%00011000
   3946  fdaf		       5f		      .byte.b	%01011111
   3947  fdb0		       64		      .byte.b	%01100100
   3948  fdb1		       10		      .byte.b	%00010000
   3949  fdb2		       18		      .byte.b	%00011000
   3950  fdb3		       18		      .byte.b	%00011000
   3951  fdb4		       00		      .byte.b	%00000000
   3952  fdb5				  -	      if	(<*) > (<(*+10))
   3953  fdb5				  -	      repeat	($100-<*)
   3954  fdb5				  -	      .byte	0
   3955  fdb5				  -	      repend
   3956  fdb5					      endif
   3957  fdb5				   player21then_0
   3958  fdb5		       43		      .byte.b	%01000011
   3959  fdb6		       62		      .byte.b	%01100010
   3960  fdb7		       36		      .byte.b	%00110110
   3961  fdb8		       1c		      .byte.b	%00011100
   3962  fdb9		       28		      .byte.b	%00101000
   3963  fdba		       3c		      .byte.b	%00111100
   3964  fdbb		       24		      .byte.b	%00100100
   3965  fdbc		       10		      .byte.b	%00010000
   3966  fdbd		       18		      .byte.b	%00011000
   3967  fdbe		       18		      .byte.b	%00011000
   3968  fdbf		       00		      .byte.b	%00000000
   3969  fdc0				  -	      if	(<*) > (<(*+10))
   3970  fdc0				  -	      repeat	($100-<*)
   3971  fdc0				  -	      .byte	0
   3972  fdc0				  -	      repend
   3973  fdc0					      endif
   3974  fdc0				   player23then_0
   3975  fdc0		       1c		      .byte.b	%00011100
   3976  fdc1		       18		      .byte.b	%00011000
   3977  fdc2		       18		      .byte.b	%00011000
   3978  fdc3		       20		      .byte.b	%00100000
   3979  fdc4		       5a		      .byte.b	%01011010
   3980  fdc5		       7c		      .byte.b	%01111100
   3981  fdc6		       24		      .byte.b	%00100100
   3982  fdc7		       10		      .byte.b	%00010000
   3983  fdc8		       18		      .byte.b	%00011000
   3984  fdc9		       18		      .byte.b	%00011000
   3985  fdca		       00		      .byte.b	%00000000
   3986  fdcb				  -	      if	(<*) > (<(*+23))
   3987  fdcb				  -	      repeat	($100-<*)
   3988  fdcb				  -	      .byte	0
   3989  fdcb				  -	      repend
   3990  fdcb					      endif
   3991  fdcb				   player26then_1
   3992  fdcb		       18		      .byte.b	%00011000
   3993  fdcc		       18		      .byte.b	%00011000
   3994  fdcd		       1c		      .byte.b	%00011100
   3995  fdce		       3e		      .byte.b	%00111110
   3996  fdcf		       7f		      .byte.b	%01111111
   3997  fdd0		       ff		      .byte.b	%11111111
   3998  fdd1		       db		      .byte.b	%11011011
   3999  fdd2		       db		      .byte.b	%11011011
   4000  fdd3		       ff		      .byte.b	%11111111
   4001  fdd4		       7e		      .byte.b	%01111110
   4002  fdd5		       3c		      .byte.b	%00111100
   4003  fdd6		       3c		      .byte.b	%00111100
   4004  fdd7		       7e		      .byte.b	%01111110
   4005  fdd8		       7e		      .byte.b	%01111110
   4006  fdd9		       ff		      .byte.b	%11111111
   4007  fdda		       6e		      .byte.b	%01101110
   4008  fddb		       24		      .byte.b	%00100100
   4009  fddc		       24		      .byte.b	%00100100
   4010  fddd		       18		      .byte.b	%00011000
   4011  fdde		       18		      .byte.b	%00011000
   4012  fddf		       18		      .byte.b	%00011000
   4013  fde0		       10		      .byte.b	%00010000
   4014  fde1		       10		      .byte.b	%00010000
   4015  fde2		       00		      .byte.b	%00000000
   4016  fde3				  -	      if	(<*) > (<(*+23))
   4017  fde3				  -	      repeat	($100-<*)
   4018  fde3				  -	      .byte	0
   4019  fde3				  -	      repend
   4020  fde3					      endif
   4021  fde3				   player28then_1
   4022  fde3		       18		      .byte.b	%00011000
   4023  fde4		       18		      .byte.b	%00011000
   4024  fde5		       1c		      .byte.b	%00011100
   4025  fde6		       3e		      .byte.b	%00111110
   4026  fde7		       7f		      .byte.b	%01111111
   4027  fde8		       ff		      .byte.b	%11111111
   4028  fde9		       db		      .byte.b	%11011011
   4029  fdea		       db		      .byte.b	%11011011
   4030  fdeb		       ff		      .byte.b	%11111111
   4031  fdec		       7e		      .byte.b	%01111110
   4032  fded		       3c		      .byte.b	%00111100
   4033  fdee		       3c		      .byte.b	%00111100
   4034  fdef		       7e		      .byte.b	%01111110
   4035  fdf0		       6e		      .byte.b	%01101110
   4036  fdf1		       df		      .byte.b	%11011111
   4037  fdf2		       6e		      .byte.b	%01101110
   4038  fdf3		       24		      .byte.b	%00100100
   4039  fdf4		       24		      .byte.b	%00100100
   4040  fdf5		       18		      .byte.b	%00011000
   4041  fdf6		       18		      .byte.b	%00011000
   4042  fdf7		       18		      .byte.b	%00011000
   4043  fdf8		       10		      .byte.b	%00010000
   4044  fdf9		       10		      .byte.b	%00010000
   4045  fdfa		       00		      .byte.b	%00000000
   4046  fdfb					      if	(<*) > (<(*+23))
   4047  fdfb					      repeat	($100-<*)
   4048  fdfb		       00		      .byte.b	0
   4047  fdfb					      repend
   4048  fdfc		       00		      .byte.b	0
   4047  fdfc					      repend
   4048  fdfd		       00		      .byte.b	0
   4047  fdfd					      repend
   4048  fdfe		       00		      .byte.b	0
   4047  fdfe					      repend
   4048  fdff		       00		      .byte.b	0
   4049  fe00					      repend
   4050  fe00					      endif
   4051  fe00				   player30then_1
   4052  fe00		       18		      .byte.b	%00011000
   4053  fe01		       18		      .byte.b	%00011000
   4054  fe02		       1c		      .byte.b	%00011100
   4055  fe03		       3e		      .byte.b	%00111110
   4056  fe04		       7f		      .byte.b	%01111111
   4057  fe05		       ff		      .byte.b	%11111111
   4058  fe06		       db		      .byte.b	%11011011
   4059  fe07		       db		      .byte.b	%11011011
   4060  fe08		       ff		      .byte.b	%11111111
   4061  fe09		       7e		      .byte.b	%01111110
   4062  fe0a		       3c		      .byte.b	%00111100
   4063  fe0b		       3c		      .byte.b	%00111100
   4064  fe0c		       7e		      .byte.b	%01111110
   4065  fe0d		       7e		      .byte.b	%01111110
   4066  fe0e		       bf		      .byte.b	%10111111
   4067  fe0f		       6e		      .byte.b	%01101110
   4068  fe10		       24		      .byte.b	%00100100
   4069  fe11		       24		      .byte.b	%00100100
   4070  fe12		       18		      .byte.b	%00011000
   4071  fe13		       18		      .byte.b	%00011000
   4072  fe14		       18		      .byte.b	%00011000
   4073  fe15		       18		      .byte.b	%00011000
   4074  fe16		       18		      .byte.b	%00011000
   4075  fe17		       00		      .byte.b	%00000000
   4076  fe18				  -	      if	(<*) > (<(*+23))
   4077  fe18				  -	      repeat	($100-<*)
   4078  fe18				  -	      .byte	0
   4079  fe18				  -	      repend
   4080  fe18					      endif
   4081  fe18				   player32then_1
   4082  fe18		       18		      .byte.b	%00011000
   4083  fe19		       18		      .byte.b	%00011000
   4084  fe1a		       18		      .byte.b	%00011000
   4085  fe1b		       18		      .byte.b	%00011000
   4086  fe1c		       3c		      .byte.b	%00111100
   4087  fe1d		       3c		      .byte.b	%00111100
   4088  fe1e		       18		      .byte.b	%00011000
   4089  fe1f		       18		      .byte.b	%00011000
   4090  fe20		       18		      .byte.b	%00011000
   4091  fe21		       3c		      .byte.b	%00111100
   4092  fe22		       7e		      .byte.b	%01111110
   4093  fe23		       66		      .byte.b	%01100110
   4094  fe24		       3c		      .byte.b	%00111100
   4095  fe25		       18		      .byte.b	%00011000
   4096  fe26		       18		      .byte.b	%00011000
   4097  fe27		       24		      .byte.b	%00100100
   4098  fe28		       24		      .byte.b	%00100100
   4099  fe29		       24		      .byte.b	%00100100
   4100  fe2a		       66		      .byte.b	%01100110
   4101  fe2b		       66		      .byte.b	%01100110
   4102  fe2c		       24		      .byte.b	%00100100
   4103  fe2d		       24		      .byte.b	%00100100
   4104  fe2e		       42		      .byte.b	%01000010
   4105  fe2f		       00		      .byte.b	%00000000
   4106  fe30				  -	      if	(<*) > (<(*+23))
   4107  fe30				  -	      repeat	($100-<*)
   4108  fe30				  -	      .byte	0
   4109  fe30				  -	      repend
   4110  fe30					      endif
   4111  fe30				   player34then_1
   4112  fe30		       18		      .byte.b	%00011000
   4113  fe31		       18		      .byte.b	%00011000
   4114  fe32		       18		      .byte.b	%00011000
   4115  fe33		       18		      .byte.b	%00011000
   4116  fe34		       3c		      .byte.b	%00111100
   4117  fe35		       3c		      .byte.b	%00111100
   4118  fe36		       18		      .byte.b	%00011000
   4119  fe37		       18		      .byte.b	%00011000
   4120  fe38		       18		      .byte.b	%00011000
   4121  fe39		       3c		      .byte.b	%00111100
   4122  fe3a		       7e		      .byte.b	%01111110
   4123  fe3b		       66		      .byte.b	%01100110
   4124  fe3c		       3c		      .byte.b	%00111100
   4125  fe3d		       18		      .byte.b	%00011000
   4126  fe3e		       18		      .byte.b	%00011000
   4127  fe3f		       24		      .byte.b	%00100100
   4128  fe40		       24		      .byte.b	%00100100
   4129  fe41		       24		      .byte.b	%00100100
   4130  fe42		       66		      .byte.b	%01100110
   4131  fe43		       66		      .byte.b	%01100110
   4132  fe44		       04		      .byte.b	%00000100
   4133  fe45		       08		      .byte.b	%00001000
   4134  fe46		       10		      .byte.b	%00010000
   4135  fe47		       00		      .byte.b	%00000000
   4136  fe48				  -	      if	(<*) > (<(*+23))
   4137  fe48				  -	      repeat	($100-<*)
   4138  fe48				  -	      .byte	0
   4139  fe48				  -	      repend
   4140  fe48					      endif
   4141  fe48				   player36then_1
   4142  fe48		       18		      .byte.b	%00011000
   4143  fe49		       18		      .byte.b	%00011000
   4144  fe4a		       18		      .byte.b	%00011000
   4145  fe4b		       18		      .byte.b	%00011000
   4146  fe4c		       3c		      .byte.b	%00111100
   4147  fe4d		       3c		      .byte.b	%00111100
   4148  fe4e		       18		      .byte.b	%00011000
   4149  fe4f		       18		      .byte.b	%00011000
   4150  fe50		       18		      .byte.b	%00011000
   4151  fe51		       3c		      .byte.b	%00111100
   4152  fe52		       7e		      .byte.b	%01111110
   4153  fe53		       66		      .byte.b	%01100110
   4154  fe54		       3c		      .byte.b	%00111100
   4155  fe55		       18		      .byte.b	%00011000
   4156  fe56		       18		      .byte.b	%00011000
   4157  fe57		       24		      .byte.b	%00100100
   4158  fe58		       24		      .byte.b	%00100100
   4159  fe59		       24		      .byte.b	%00100100
   4160  fe5a		       66		      .byte.b	%01100110
   4161  fe5b		       66		      .byte.b	%01100110
   4162  fe5c		       20		      .byte.b	%00100000
   4163  fe5d		       10		      .byte.b	%00010000
   4164  fe5e		       08		      .byte.b	%00001000
   4165  fe5f		       00		      .byte.b	%00000000
   4166  fe60				  -	      if	(<*) > (<(*+23))
   4167  fe60				  -	      repeat	($100-<*)
   4168  fe60				  -	      .byte	0
   4169  fe60				  -	      repend
   4170  fe60					      endif
   4171  fe60				   player38then_1
   4172  fe60		       18		      .byte.b	%00011000
   4173  fe61		       3c		      .byte.b	%00111100
   4174  fe62		       7e		      .byte.b	%01111110
   4175  fe63		       e7		      .byte.b	%11100111
   4176  fe64		       db		      .byte.b	%11011011
   4177  fe65		       c3		      .byte.b	%11000011
   4178  fe66		       7e		      .byte.b	%01111110
   4179  fe67		       24		      .byte.b	%00100100
   4180  fe68		       24		      .byte.b	%00100100
   4181  fe69		       3c		      .byte.b	%00111100
   4182  fe6a		       7e		      .byte.b	%01111110
   4183  fe6b		       7e		      .byte.b	%01111110
   4184  fe6c		       66		      .byte.b	%01100110
   4185  fe6d		       24		      .byte.b	%00100100
   4186  fe6e		       24		      .byte.b	%00100100
   4187  fe6f		       42		      .byte.b	%01000010
   4188  fe70		       18		      .byte.b	%00011000
   4189  fe71		       18		      .byte.b	%00011000
   4190  fe72		       18		      .byte.b	%00011000
   4191  fe73		       10		      .byte.b	%00010000
   4192  fe74		       10		      .byte.b	%00010000
   4193  fe75		       10		      .byte.b	%00010000
   4194  fe76		       08		      .byte.b	%00001000
   4195  fe77		       00		      .byte.b	%00000000
   4196  fe78				  -	      if	(<*) > (<(*+23))
   4197  fe78				  -	      repeat	($100-<*)
   4198  fe78				  -	      .byte	0
   4199  fe78				  -	      repend
   4200  fe78					      endif
   4201  fe78				   player40then_1
   4202  fe78		       18		      .byte.b	%00011000
   4203  fe79		       3c		      .byte.b	%00111100
   4204  fe7a		       7e		      .byte.b	%01111110
   4205  fe7b		       e7		      .byte.b	%11100111
   4206  fe7c		       db		      .byte.b	%11011011
   4207  fe7d		       c3		      .byte.b	%11000011
   4208  fe7e		       7e		      .byte.b	%01111110
   4209  fe7f		       24		      .byte.b	%00100100
   4210  fe80		       24		      .byte.b	%00100100
   4211  fe81		       3c		      .byte.b	%00111100
   4212  fe82		       7e		      .byte.b	%01111110
   4213  fe83		       7e		      .byte.b	%01111110
   4214  fe84		       66		      .byte.b	%01100110
   4215  fe85		       24		      .byte.b	%00100100
   4216  fe86		       24		      .byte.b	%00100100
   4217  fe87		       42		      .byte.b	%01000010
   4218  fe88		       18		      .byte.b	%00011000
   4219  fe89		       18		      .byte.b	%00011000
   4220  fe8a		       18		      .byte.b	%00011000
   4221  fe8b		       10		      .byte.b	%00010000
   4222  fe8c		       10		      .byte.b	%00010000
   4223  fe8d		       10		      .byte.b	%00010000
   4224  fe8e		       08		      .byte.b	%00001000
   4225  fe8f		       00		      .byte.b	%00000000
   4226  fe90				  -	      if	(<*) > (<(*+23))
   4227  fe90				  -	      repeat	($100-<*)
   4228  fe90				  -	      .byte	0
   4229  fe90				  -	      repend
   4230  fe90					      endif
   4231  fe90				   player42then_1
   4232  fe90		       18		      .byte.b	%00011000
   4233  fe91		       3c		      .byte.b	%00111100
   4234  fe92		       7e		      .byte.b	%01111110
   4235  fe93		       e7		      .byte.b	%11100111
   4236  fe94		       db		      .byte.b	%11011011
   4237  fe95		       c3		      .byte.b	%11000011
   4238  fe96		       7e		      .byte.b	%01111110
   4239  fe97		       24		      .byte.b	%00100100
   4240  fe98		       66		      .byte.b	%01100110
   4241  fe99		       7e		      .byte.b	%01111110
   4242  fe9a		       ff		      .byte.b	%11111111
   4243  fe9b		       ff		      .byte.b	%11111111
   4244  fe9c		       7e		      .byte.b	%01111110
   4245  fe9d		       66		      .byte.b	%01100110
   4246  fe9e		       24		      .byte.b	%00100100
   4247  fe9f		       24		      .byte.b	%00100100
   4248  fea0		       24		      .byte.b	%00100100
   4249  fea1		       18		      .byte.b	%00011000
   4250  fea2		       18		      .byte.b	%00011000
   4251  fea3		       18		      .byte.b	%00011000
   4252  fea4		       18		      .byte.b	%00011000
   4253  fea5		       10		      .byte.b	%00010000
   4254  fea6		       10		      .byte.b	%00010000
   4255  fea7		       08		      .byte.b	%00001000
   4256  fea8					      if	ECHOFIRST
      244 bytes of ROM space left
   4257  fea8					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   4258  fea8					      endif
   4259  fea8		       00 01	   ECHOFIRST  =	1
   4260  fea8
   4261  fea8
   4262  fea8
   4263  fea8							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4264  fea8
   4265  fea8							; feel free to modify the score graphics - just keep each digit 8 high
   4266  fea8							; and keep the conditional compilation stuff intact
   4267  fea8				  -	      ifconst	ROM2k
   4268  fea8				  -	      ORG	$F7AC-8
   4269  fea8					      else
   4270  fea8				  -	      ifconst	bankswitch
   4271  fea8				  -	      if	bankswitch == 8
   4272  fea8				  -	      ORG	$2F94-bscode_length
   4273  fea8				  -	      RORG	$FF94-bscode_length
   4274  fea8				  -	      endif
   4275  fea8				  -	      if	bankswitch == 16
   4276  fea8				  -	      ORG	$4F94-bscode_length
   4277  fea8				  -	      RORG	$FF94-bscode_length
   4278  fea8				  -	      endif
   4279  fea8				  -	      if	bankswitch == 32
   4280  fea8				  -	      ORG	$8F94-bscode_length
   4281  fea8				  -	      RORG	$FF94-bscode_length
   4282  fea8				  -	      endif
   4283  fea8				  -	      if	bankswitch == 64
   4284  fea8				  -	      ORG	$10F80-bscode_length
   4285  fea8				  -	      RORG	$1FF80-bscode_length
   4286  fea8				  -	      endif
   4287  fea8					      else
   4288  ff9c					      ORG	$FF9C
   4289  ff9c					      endif
   4290  ff9c					      endif
   4291  ff9c
   4292  ff9c							; font equates
   4293  ff9c		       00 01	   .21stcentury =	1
   4294  ff9c		       00 02	   alarmclock =	2
   4295  ff9c		       00 03	   handwritten =	3
   4296  ff9c		       00 04	   interrupted =	4
   4297  ff9c		       00 05	   retroputer =	5
   4298  ff9c		       00 06	   whimsey    =	6
   4299  ff9c		       00 07	   tiny       =	7
   4300  ff9c		       00 08	   hex	      =	8
   4301  ff9c
   4302  ff9c				  -	      ifconst	font
   4303  ff9c				  -	      if	font == hex
   4304  ff9c				  -	      ORG	. - 48
   4305  ff9c				  -	      endif
   4306  ff9c					      endif
   4307  ff9c
   4308  ff9c				   scoretable
   4309  ff9c
   4310  ff9c				  -	      ifconst	font
   4311  ff9c				  -	      if	font == .21stcentury
   4312  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   4313  ff9c				  -	      endif
   4314  ff9c				  -	      if	font == alarmclock
   4315  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   4316  ff9c				  -	      endif
   4317  ff9c				  -	      if	font == handwritten
   4318  ff9c				  -	      include	"score_graphics.asm.handwritten"
   4319  ff9c				  -	      endif
   4320  ff9c				  -	      if	font == interrupted
   4321  ff9c				  -	      include	"score_graphics.asm.interrupted"
   4322  ff9c				  -	      endif
   4323  ff9c				  -	      if	font == retroputer
   4324  ff9c				  -	      include	"score_graphics.asm.retroputer"
   4325  ff9c				  -	      endif
   4326  ff9c				  -	      if	font == whimsey
   4327  ff9c				  -	      include	"score_graphics.asm.whimsey"
   4328  ff9c				  -	      endif
   4329  ff9c				  -	      if	font == tiny
   4330  ff9c				  -	      include	"score_graphics.asm.tiny"
   4331  ff9c				  -	      endif
   4332  ff9c				  -	      if	font == hex
   4333  ff9c				  -	      include	"score_graphics.asm.hex"
   4334  ff9c				  -	      endif
   4335  ff9c					      else		; default font
   4336  ff9c
   4337  ff9c		       3c		      .byte.b	%00111100
   4338  ff9d		       66		      .byte.b	%01100110
   4339  ff9e		       66		      .byte.b	%01100110
   4340  ff9f		       66		      .byte.b	%01100110
   4341  ffa0		       66		      .byte.b	%01100110
   4342  ffa1		       66		      .byte.b	%01100110
   4343  ffa2		       66		      .byte.b	%01100110
   4344  ffa3		       3c		      .byte.b	%00111100
   4345  ffa4
   4346  ffa4		       7e		      .byte.b	%01111110
   4347  ffa5		       18		      .byte.b	%00011000
   4348  ffa6		       18		      .byte.b	%00011000
   4349  ffa7		       18		      .byte.b	%00011000
   4350  ffa8		       18		      .byte.b	%00011000
   4351  ffa9		       38		      .byte.b	%00111000
   4352  ffaa		       18		      .byte.b	%00011000
   4353  ffab		       08		      .byte.b	%00001000
   4354  ffac
   4355  ffac		       7e		      .byte.b	%01111110
   4356  ffad		       60		      .byte.b	%01100000
   4357  ffae		       60		      .byte.b	%01100000
   4358  ffaf		       3c		      .byte.b	%00111100
   4359  ffb0		       06		      .byte.b	%00000110
   4360  ffb1		       06		      .byte.b	%00000110
   4361  ffb2		       46		      .byte.b	%01000110
   4362  ffb3		       3c		      .byte.b	%00111100
   4363  ffb4
   4364  ffb4		       3c		      .byte.b	%00111100
   4365  ffb5		       46		      .byte.b	%01000110
   4366  ffb6		       06		      .byte.b	%00000110
   4367  ffb7		       06		      .byte.b	%00000110
   4368  ffb8		       1c		      .byte.b	%00011100
   4369  ffb9		       06		      .byte.b	%00000110
   4370  ffba		       46		      .byte.b	%01000110
   4371  ffbb		       3c		      .byte.b	%00111100
   4372  ffbc
   4373  ffbc		       0c		      .byte.b	%00001100
   4374  ffbd		       0c		      .byte.b	%00001100
   4375  ffbe		       7e		      .byte.b	%01111110
   4376  ffbf		       4c		      .byte.b	%01001100
   4377  ffc0		       4c		      .byte.b	%01001100
   4378  ffc1		       2c		      .byte.b	%00101100
   4379  ffc2		       1c		      .byte.b	%00011100
   4380  ffc3		       0c		      .byte.b	%00001100
   4381  ffc4
   4382  ffc4		       3c		      .byte.b	%00111100
   4383  ffc5		       46		      .byte.b	%01000110
   4384  ffc6		       06		      .byte.b	%00000110
   4385  ffc7		       06		      .byte.b	%00000110
   4386  ffc8		       3c		      .byte.b	%00111100
   4387  ffc9		       60		      .byte.b	%01100000
   4388  ffca		       60		      .byte.b	%01100000
   4389  ffcb		       7e		      .byte.b	%01111110
   4390  ffcc
   4391  ffcc		       3c		      .byte.b	%00111100
   4392  ffcd		       66		      .byte.b	%01100110
   4393  ffce		       66		      .byte.b	%01100110
   4394  ffcf		       66		      .byte.b	%01100110
   4395  ffd0		       7c		      .byte.b	%01111100
   4396  ffd1		       60		      .byte.b	%01100000
   4397  ffd2		       62		      .byte.b	%01100010
   4398  ffd3		       3c		      .byte.b	%00111100
   4399  ffd4
   4400  ffd4		       30		      .byte.b	%00110000
   4401  ffd5		       30		      .byte.b	%00110000
   4402  ffd6		       30		      .byte.b	%00110000
   4403  ffd7		       18		      .byte.b	%00011000
   4404  ffd8		       0c		      .byte.b	%00001100
   4405  ffd9		       06		      .byte.b	%00000110
   4406  ffda		       42		      .byte.b	%01000010
   4407  ffdb		       3e		      .byte.b	%00111110
   4408  ffdc
   4409  ffdc		       3c		      .byte.b	%00111100
   4410  ffdd		       66		      .byte.b	%01100110
   4411  ffde		       66		      .byte.b	%01100110
   4412  ffdf		       66		      .byte.b	%01100110
   4413  ffe0		       3c		      .byte.b	%00111100
   4414  ffe1		       66		      .byte.b	%01100110
   4415  ffe2		       66		      .byte.b	%01100110
   4416  ffe3		       3c		      .byte.b	%00111100
   4417  ffe4
   4418  ffe4		       3c		      .byte.b	%00111100
   4419  ffe5		       46		      .byte.b	%01000110
   4420  ffe6		       06		      .byte.b	%00000110
   4421  ffe7		       3e		      .byte.b	%00111110
   4422  ffe8		       66		      .byte.b	%01100110
   4423  ffe9		       66		      .byte.b	%01100110
   4424  ffea		       66		      .byte.b	%01100110
   4425  ffeb		       3c		      .byte.b	%00111100
   4426  ffec
   4427  ffec					      ifnconst	DPC_kernel_options
   4428  ffec
   4429  ffec		       00		      .byte.b	%00000000
   4430  ffed		       00		      .byte.b	%00000000
   4431  ffee		       00		      .byte.b	%00000000
   4432  ffef		       00		      .byte.b	%00000000
   4433  fff0		       00		      .byte.b	%00000000
   4434  fff1		       00		      .byte.b	%00000000
   4435  fff2		       00		      .byte.b	%00000000
   4436  fff3		       00		      .byte.b	%00000000
   4437  fff4
   4438  fff4					      endif
   4439  fff4
   4440  fff4					      endif
   4441  fff4
   4442  fff4				  -	      ifconst	ROM2k
   4443  fff4				  -	      ORG	$F7FC
   4444  fff4					      else
   4445  fff4				  -	      ifconst	bankswitch
   4446  fff4				  -	      if	bankswitch == 8
   4447  fff4				  -	      ORG	$2FF4-bscode_length
   4448  fff4				  -	      RORG	$FFF4-bscode_length
   4449  fff4				  -	      endif
   4450  fff4				  -	      if	bankswitch == 16
   4451  fff4				  -	      ORG	$4FF4-bscode_length
   4452  fff4				  -	      RORG	$FFF4-bscode_length
   4453  fff4				  -	      endif
   4454  fff4				  -	      if	bankswitch == 32
   4455  fff4				  -	      ORG	$8FF4-bscode_length
   4456  fff4				  -	      RORG	$FFF4-bscode_length
   4457  fff4				  -	      endif
   4458  fff4				  -	      if	bankswitch == 64
   4459  fff4				  -	      ORG	$10FE0-bscode_length
   4460  fff4				  -	      RORG	$1FFE0-bscode_length
   4461  fff4				  -	      endif
   4462  fff4					      else
   4463  fffc					      ORG	$FFFC
   4464  fffc					      endif
   4465  fffc					      endif
   4466  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4467  fffc
   4468  fffc				  -	      ifconst	bankswitch
   4469  fffc				  -	      if	bankswitch == 8
   4470  fffc				  -	      ORG	$2FFC
   4471  fffc				  -	      RORG	$FFFC
   4472  fffc				  -	      endif
   4473  fffc				  -	      if	bankswitch == 16
   4474  fffc				  -	      ORG	$4FFC
   4475  fffc				  -	      RORG	$FFFC
   4476  fffc				  -	      endif
   4477  fffc				  -	      if	bankswitch == 32
   4478  fffc				  -	      ORG	$8FFC
   4479  fffc				  -	      RORG	$FFFC
   4480  fffc				  -	      endif
   4481  fffc				  -	      if	bankswitch == 64
   4482  fffc				  -	      ORG	$10FF0
   4483  fffc				  -	      RORG	$1FFF0
   4484  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   4485  fffc				  -	      ORG	$10FF8
   4486  fffc				  -	      RORG	$1FFF8
   4487  fffc				  -	      ifconst	superchip
   4488  fffc				  -	      .byte	"E","F","S","C"
   4489  fffc				  -	      else
   4490  fffc				  -	      .byte	"E","F","E","F"
   4491  fffc				  -	      endif
   4492  fffc				  -	      ORG	$10FFC
   4493  fffc				  -	      RORG	$1FFFC
   4494  fffc				  -	      endif
   4495  fffc					      else
   4496  fffc				  -	      ifconst	ROM2k
   4497  fffc				  -	      ORG	$F7FC
   4498  fffc					      else
   4499  fffc					      ORG	$FFFC
   4500  fffc					      endif
   4501  fffc					      endif
   4502  fffc		       00 f0		      .word.w	(start & $ffff)
   4503  fffe		       00 f0		      .word.w	(start & $ffff)
