------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm LEVEL 1 PASS 2
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 00	    missile1dist =	0
      4  10000 ????
      5  10000 ????		00 d4	    explosion_timer =	a
      6  10000 ????		00 01	    pfscore    =	1
      7  10000 ????		00 e3	    monsterHealth =	p
      8  10000 ????		00 dd	    playerHealth =	j
      9  10000 ????		00 e8	    winflag    =	u
     10  10000 ????		00 00	    moved      =	0
     11  10000 ????		00 e1	    playerSprite =	n
     12  10000 ????		00 e0	    monsterSprite =	m
     13  10000 ????		00 db	    p1x        =	h
     14  10000 ????		00 da	    p1y        =	g
     15  10000 ????		00 d9	    p0x        =	f
     16  10000 ????		00 d7	    p0y        =	d
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????				       ifnconst	pfres
    231  10000 ????		00 a4	    playfield  =	playfieldbase
    232  10000 ????			   -	       else
    233  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 00	    missile1dist =	0
      4  10000 ????
      5  10000 ????		00 d4	    explosion_timer =	a
      6  10000 ????		00 01	    pfscore    =	1
      7  10000 ????		00 e3	    monsterHealth =	p
      8  10000 ????		00 dd	    playerHealth =	j
      9  10000 ????		00 e8	    winflag    =	u
     10  10000 ????		00 00	    moved      =	0
     11  10000 ????		00 e1	    playerSprite =	n
     12  10000 ????		00 e0	    monsterSprite =	m
     13  10000 ????		00 db	    p1x        =	h
     14  10000 ????		00 da	    p1y        =	g
     15  10000 ????		00 d9	    p0x        =	f
     16  10000 ????		00 d7	    p0y        =	d
------- FILE c:\Users\Admin\Desktop\shadow-over-space\main.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b				  -	      ifconst	pfres
     61  f01b				  -	      lda	#(96/pfres)
     62  f01b					      else
     63  f01b		       a9 08		      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 63 f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069					      ifnconst	pfres
    146  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    147  f06b				  -	      else
    148  f06b				  -	      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079					      ifnconst	pfres
    165  f079		       a9 0a		      lda	#10
    166  f07b				  -	      else
    167  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092				  -	      ifconst	pfres
    193  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    194  f092				  -	      sty	PF1L	;3
    195  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f092				  -	      sty	PF2L	;3
    197  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    198  f092				  -	      sty	PF1R	; 3 too early?
    199  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f092				  -	      sty	PF2R	;3
    201  f092					      else
    202  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    203  f094		       84 0e		      sty	PF1L	;3
    204  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f098		       84 0f		      sty	PF2L	;3
    206  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f09c		       84 0e		      sty	PF1R	; 3 too early?
    208  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a0		       84 0f		      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc				  -	      ifconst	pfres
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    251  f0bc				  -	      sta	PF1L	;3
    252  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0bc				  -	      sta	PF2L	;3
    254  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    255  f0bc				  -	      sta	PF1R	; 3 too early?
    256  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0bc				  -	      sta	PF2R	;3
    258  f0bc					      else
    259  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0be		       85 0e		      sta	PF1L	;3
    261  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0c2		       85 0f		      sta	PF2L	;3
    263  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    265  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0ca		       85 0f		      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8					      ifnconst	no_blank_lines
    279  f0d8					      ifnconst	playercolors
    280  f0d8		       a5 90		      lda	missile0height	;3
    281  f0da		       c7 91		      dcp	missile0y	;5
    282  f0dc		       e5 f6		      sbc	stack1
    283  f0de		       85 1d		      sta	ENAM0	;3
    284  f0e0				  -	      else
    285  f0e0				  -	      lda	(player0color),y
    286  f0e0				  -	      sta	player0colorstore
    287  f0e0				  -	      sleep	6
    288  f0e0					      endif
    289  f0e0		       c6 9c		      dec	temp1
    290  f0e2		       d0 ab		      bne	continuekernel
    291  f0e4				  -	      else
    292  f0e4				  -	      dec	temp1
    293  f0e4				  -	      beq	altkernel2
    294  f0e4				  -	      ifconst	readpaddle
    295  f0e4				  -	      ldy	currentpaddle
    296  f0e4				  -	      lda	INPT0,y
    297  f0e4				  -	      bpl	noreadpaddle
    298  f0e4				  -	      inc	paddle
    299  f0e4				  -	      jmp	continuekernel2
    300  f0e4				  -noreadpaddle
    301  f0e4				  -	      sleep	2
    302  f0e4				  -	      jmp	continuekernel
    303  f0e4				  -	      else
    304  f0e4				  -	      ifnconst	playercolors
    305  f0e4				  -	      ifconst	PFcolors
    306  f0e4				  -	      txa
    307  f0e4				  -	      tay
    308  f0e4				  -	      lda	(pfcolortable),y
    309  f0e4				  -	      ifnconst	backgroundchange
    310  f0e4				  -	      sta	COLUPF
    311  f0e4				  -	      else
    312  f0e4				  -	      sta	COLUBK
    313  f0e4				  -	      endif
    314  f0e4				  -	      jmp	continuekernel
    315  f0e4				  -	      else
    316  f0e4				  -	      ifconst	kernelmacrodef
    317  f0e4				  -	      kernelmacro
    318  f0e4				  -	      else
    319  f0e4				  -	      sleep	12
    320  f0e4				  -	      endif
    321  f0e4				  -	      endif
    322  f0e4				  -	      else
    323  f0e4				  -	      lda	(player0color),y
    324  f0e4				  -	      sta	player0colorstore
    325  f0e4				  -	      sleep	4
    326  f0e4				  -	      endif
    327  f0e4				  -	      jmp	continuekernel
    328  f0e4				  -	      endif
    329  f0e4				  -altkernel2
    330  f0e4				  -	      txa
    331  f0e4				  -	      ifnconst	vertical_reflect
    332  f0e4				  -	      sbx	#256-pfwidth
    333  f0e4				  -	      else
    334  f0e4				  -	      sbx	#256-pfwidth/2
    335  f0e4				  -	      endif
    336  f0e4				  -	      bmi	lastkernelline
    337  f0e4				  -	      ifconst	pfrowheight
    338  f0e4				  -	      lda	#pfrowheight
    339  f0e4				  -	      else
    340  f0e4				  -	      ifnconst	pfres
    341  f0e4				  -	      lda	#8
    342  f0e4				  -	      else
    343  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    344  f0e4				  -	      endif
    345  f0e4				  -	      endif
    346  f0e4				  -	      sta	temp1
    347  f0e4				  -	      jmp	continuekernel
    348  f0e4					      endif
    349  f0e4
    350  f0e4				   altkernel
    351  f0e4
    352  f0e4				  -	      ifconst	PFmaskvalue
    353  f0e4				  -	      lda	#PFmaskvalue
    354  f0e4					      else
    355  f0e4		       a9 00		      lda	#0
    356  f0e6					      endif
    357  f0e6		       85 0e		      sta	PF1L
    358  f0e8		       85 0f		      sta	PF2
    359  f0ea
    360  f0ea
    361  f0ea							;sleep 3
    362  f0ea
    363  f0ea							;28 cycles to fix things
    364  f0ea							;minus 11=17
    365  f0ea
    366  f0ea							; lax temp4
    367  f0ea							; clc
    368  f0ea		       8a		      txa
    369  f0eb					      ifnconst	vertical_reflect
    370  f0eb		       cb fc		      sbx	#256-pfwidth
    371  f0ed				  -	      else
    372  f0ed				  -	      sbx	#256-pfwidth/2
    373  f0ed					      endif
    374  f0ed
    375  f0ed		       30 12		      bmi	lastkernelline
    376  f0ef
    377  f0ef				  -	      ifconst	PFcolorandheight
    378  f0ef				  -	      ifconst	pfres
    379  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ef				  -	      else
    381  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ef				  -	      endif
    383  f0ef				  -	      ifnconst	backgroundchange
    384  f0ef				  -	      sty	COLUPF
    385  f0ef				  -	      else
    386  f0ef				  -	      sty	COLUBK
    387  f0ef				  -	      endif
    388  f0ef				  -	      ifconst	pfres
    389  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ef				  -	      else
    391  f0ef				  -	      lda	playfieldcolorandheight-88,x
    392  f0ef				  -	      endif
    393  f0ef				  -	      sta.w	temp1
    394  f0ef					      endif
    395  f0ef				  -	      ifconst	PFheights
    396  f0ef				  -	      lsr
    397  f0ef				  -	      lsr
    398  f0ef				  -	      tay
    399  f0ef				  -	      lda	(pfheighttable),y
    400  f0ef				  -	      sta.w	temp1
    401  f0ef					      endif
    402  f0ef				  -	      ifconst	PFcolors
    403  f0ef				  -	      tay
    404  f0ef				  -	      lda	(pfcolortable),y
    405  f0ef				  -	      ifnconst	backgroundchange
    406  f0ef				  -	      sta	COLUPF
    407  f0ef				  -	      else
    408  f0ef				  -	      sta	COLUBK
    409  f0ef				  -	      endif
    410  f0ef				  -	      ifconst	pfrowheight
    411  f0ef				  -	      lda	#pfrowheight
    412  f0ef				  -	      else
    413  f0ef				  -	      ifnconst	pfres
    414  f0ef				  -	      lda	#8
    415  f0ef				  -	      else
    416  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    417  f0ef				  -	      endif
    418  f0ef				  -	      endif
    419  f0ef				  -	      sta	temp1
    420  f0ef					      endif
    421  f0ef					      ifnconst	PFcolorandheight
    422  f0ef					      ifnconst	PFcolors
    423  f0ef					      ifnconst	PFheights
    424  f0ef					      ifnconst	no_blank_lines
    425  f0ef							; read paddle 0
    426  f0ef							; lo-res paddle read
    427  f0ef							; bit INPT0
    428  f0ef							; bmi paddleskipread
    429  f0ef							; inc paddle0
    430  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    432  f0f4				  -	      ifconst	pfrowheight
    433  f0f4				  -	      lda	#pfrowheight
    434  f0f4					      else
    435  f0f4					      ifnconst	pfres
    436  f0f4		       a9 08		      lda	#8
    437  f0f6				  -	      else
    438  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f0f6					      endif
    440  f0f6					      endif
    441  f0f6		       85 9c		      sta	temp1
    442  f0f8					      endif
    443  f0f8					      endif
    444  f0f8					      endif
    445  f0f8					      endif
    446  f0f8
    447  f0f8
    448  f0f8		       a5 92		      lda	ballheight
    449  f0fa		       c7 89		      dcp	bally
    450  f0fc		       e5 9f		      sbc	temp4
    451  f0fe
    452  f0fe
    453  f0fe		       4c a6 f0 	      jmp	goback
    454  f101
    455  f101
    456  f101					      ifnconst	no_blank_lines
    457  f101				   lastkernelline
    458  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    460  f106				  -	      else
    461  f106				  -	      ldy	#124
    462  f106				  -	      lda	(pfcolortable),y
    463  f106				  -	      sta	COLUPF
    464  f106					      endif
    465  f106
    466  f106				  -	      ifconst	PFheights
    467  f106				  -	      ldx	#1
    468  f106				  -			;sleep 4
    469  f106				  -	      sleep	3	; this was over 1 cycle
    470  f106					      else
    471  f106		       a6 ef		      ldx	playfieldpos
    472  f108							;sleep 3
      0  f108					      sleep	2	; this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    474  f109					      endif
    475  f109
    476  f109		       4c 27 f1 	      jmp	enterlastkernel
    477  f10c
    478  f10c				  -	      else
    479  f10c				  -lastkernelline
    480  f10c				  -
    481  f10c				  -	      ifconst	PFheights
    482  f10c				  -	      ldx	#1
    483  f10c				  -			;sleep 5
    484  f10c				  -	      sleep	4	; this was over 1 cycle
    485  f10c				  -	      else
    486  f10c				  -	      ldx	playfieldpos
    487  f10c				  -			;sleep 4
    488  f10c				  -	      sleep	3	; this was over 1 cycle
    489  f10c				  -	      endif
    490  f10c				  -
    491  f10c				  -	      cpx	#0
    492  f10c				  -	      bne	.enterfromNBL
    493  f10c				  -	      jmp	no_blank_lines_bailout
    494  f10c					      endif
    495  f10c
    496  f10c				  -	      if	((<*)>$d5)
    497  f10c				  -	      align	256
    498  f10c					      endif
    499  f10c							; this is a kludge to prevent page wrapping - fix!!!
    500  f10c
    501  f10c				   .skipDrawlastP1
    502  f10c		       a9 00		      lda	#0
    503  f10e		       a8		      tay		; added so we don't cross a page
    504  f10f		       4c 39 f1 	      jmp	.continuelastP1
    505  f112
    506  f112				   .endkerloop		; enter at cycle 59??
    507  f112
    508  f112		       ea		      nop
    509  f113
    510  f113				   .enterfromNBL
    511  f113				  -	      ifconst	pfres
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    513  f113				  -	      sty	PF1L	;3
    514  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f113				  -	      sty	PF2L	;3
    516  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    517  f113				  -	      sty	PF1R	; possibly too early?
    518  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f113				  -	      sty	PF2R	;3
    520  f113					      else
    521  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    522  f116		       84 0e		      sty	PF1L	;3
    523  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f11b		       84 0f		      sty	PF2L	;3
    525  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    526  f120		       84 0e		      sty	PF1R	; possibly too early?
    527  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f125		       84 0f		      sty	PF2R	;3
    529  f127					      endif
    530  f127
    531  f127				   enterlastkernel
    532  f127		       a5 92		      lda	ballheight
    533  f129
    534  f129							; tya
    535  f129		       c7 89		      dcp	bally
    536  f12b							; sleep 4
    537  f12b
    538  f12b							; sbc stack3
    539  f12b		       2a		      rol
    540  f12c		       2a		      rol
    541  f12d		       85 1f		      sta	ENABL
    542  f12f
    543  f12f		       a5 8f		      lda	player1height	;3
    544  f131		       c7 86		      dcp	player1y	;5
    545  f133		       90 d7		      bcc	.skipDrawlastP1
    546  f135		       a4 86		      ldy	player1y	;3
    547  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f139							; so it doesn't cross a page boundary!
    549  f139
    550  f139				   .continuelastP1
    551  f139		       85 1c		      sta	GRP1	;3
    552  f13b
    553  f13b					      ifnconst	player1colors
    554  f13b		       a5 87		      lda	missile1height	;3
    555  f13d		       c7 88		      dcp	missile1y	;5
    556  f13f				  -	      else
    557  f13f				  -	      lda	(player1color),y
    558  f13f				  -	      sta	COLUP1
    559  f13f					      endif
    560  f13f
    561  f13f		       ca		      dex
    562  f140							;dec temp4 ; might try putting this above PF writes
    563  f140		       f0 36		      beq	endkernel
    564  f142
    565  f142
    566  f142				  -	      ifconst	pfres
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    568  f142				  -	      sty	PF1L	;3
    569  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f142				  -	      sty	PF2L	;3
    571  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    572  f142				  -	      sty	PF1R	; possibly too early?
    573  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f142				  -	      sty	PF2R	;3
    575  f142					      else
    576  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    577  f145		       84 0e		      sty	PF1L	;3
    578  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f14a		       84 0f		      sty	PF2L	;3
    580  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    581  f14f		       84 0e		      sty	PF1R	; possibly too early?
    582  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f154		       84 0f		      sty	PF2R	;3
    584  f156					      endif
    585  f156
    586  f156					      ifnconst	player1colors
    587  f156		       2a		      rol		;2
    588  f157		       2a		      rol		;2
    589  f158		       85 1e		      sta	ENAM1	;3
    590  f15a				  -	      else
    591  f15a				  -	      ifnconst	playercolors
    592  f15a				  -	      sleep	7
    593  f15a				  -	      else
    594  f15a				  -	      lda.w	player0colorstore
    595  f15a				  -	      sta	COLUP0
    596  f15a				  -	      endif
    597  f15a					      endif
    598  f15a
    599  f15a		       ad 8e 00 	      lda.w	player0height
    600  f15d		       c7 85		      dcp	player0y
    601  f15f		       90 11		      bcc	.skipDrawlastP0
    602  f161		       a4 85		      ldy	player0y
    603  f163		       b1 8a		      lda	(player0pointer),y
    604  f165				   .continuelastP0
    605  f165		       85 1b		      sta	GRP0
    606  f167
    607  f167
    608  f167
    609  f167					      ifnconst	no_blank_lines
    610  f167		       a5 90		      lda	missile0height	;3
    611  f169		       c7 91		      dcp	missile0y	;5
    612  f16b		       e5 f6		      sbc	stack1
    613  f16d		       85 1d		      sta	ENAM0	;3
    614  f16f		       4c 12 f1 	      jmp	.endkerloop
    615  f172				  -	      else
    616  f172				  -	      ifconst	readpaddle
    617  f172				  -	      ldy	currentpaddle
    618  f172				  -	      lda	INPT0,y
    619  f172				  -	      bpl	noreadpaddle2
    620  f172				  -	      inc	paddle
    621  f172				  -	      jmp	.endkerloop
    622  f172				  -noreadpaddle2
    623  f172				  -	      sleep	4
    624  f172				  -	      jmp	.endkerloop
    625  f172				  -	      else		; no_blank_lines and no paddle reading
    626  f172				  -	      pla
    627  f172				  -	      pha		; 14 cycles in 4 bytes
    628  f172				  -	      pla
    629  f172				  -	      pha
    630  f172				  -			; sleep 14
    631  f172				  -	      jmp	.endkerloop
    632  f172				  -	      endif
    633  f172					      endif
    634  f172
    635  f172
    636  f172							; ifconst donepaddleskip
    637  f172							;paddleskipread
    638  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f172							; plus we get a lo-res paddle read
    640  f172							; bmi donepaddleskip
    641  f172							; endif
    642  f172
    643  f172				   .skipDrawlastP0
    644  f172		       a9 00		      lda	#0
    645  f174		       a8		      tay
    646  f175		       4c 65 f1 	      jmp	.continuelastP0
    647  f178
    648  f178				  -	      ifconst	no_blank_lines
    649  f178				  -no_blank_lines_bailout
    650  f178				  -	      ldx	#0
    651  f178					      endif
    652  f178
    653  f178				   endkernel
    654  f178							; 6 digit score routine
    655  f178		       86 0e		      stx	PF1
    656  f17a		       86 0f		      stx	PF2
    657  f17c		       86 0d		      stx	PF0
    658  f17e		       18		      clc
    659  f17f
    660  f17f				  -	      ifconst	pfrowheight
    661  f17f				  -	      lda	#pfrowheight+2
    662  f17f					      else
    663  f17f					      ifnconst	pfres
    664  f17f		       a9 0a		      lda	#10
    665  f181				  -	      else
    666  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    667  f181					      endif
    668  f181					      endif
    669  f181
    670  f181		       e5 ef		      sbc	playfieldpos
    671  f183		       85 ef		      sta	playfieldpos
    672  f185		       8a		      txa
    673  f186
    674  f186				  -	      ifconst	shakescreen
    675  f186				  -	      bit	shakescreen
    676  f186				  -	      bmi	noshakescreen2
    677  f186				  -	      ldx	#$3D
    678  f186				  -noshakescreen2
    679  f186					      endif
    680  f186
    681  f186		       95 02		      sta	WSYNC,x
    682  f188
    683  f188							; STA WSYNC ;first one, need one more
    684  f188		       85 0b		      sta	REFP0
    685  f18a		       85 0c		      sta	REFP1
    686  f18c		       85 1b		      STA	GRP0
    687  f18e		       85 1c		      STA	GRP1
    688  f190							; STA PF1
    689  f190							; STA PF2
    690  f190		       85 2b		      sta	HMCLR
    691  f192		       85 1d		      sta	ENAM0
    692  f194		       85 1e		      sta	ENAM1
    693  f196		       85 1f		      sta	ENABL
    694  f198
    695  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f19a		       85 85		      sta	player0y
    697  f19c		       a5 9e		      lda	temp3
    698  f19e		       85 86		      sta	player1y
    699  f1a0					      ifnconst	player1colors
    700  f1a0		       a5 a1		      lda	temp6
    701  f1a2		       85 88		      sta	missile1y
    702  f1a4					      endif
    703  f1a4					      ifnconst	playercolors
    704  f1a4					      ifnconst	readpaddle
    705  f1a4		       a5 a0		      lda	temp5
    706  f1a6		       85 91		      sta	missile0y
    707  f1a8					      endif
    708  f1a8					      endif
    709  f1a8		       a5 f7		      lda	stack2
    710  f1aa		       85 89		      sta	bally
    711  f1ac
    712  f1ac							; strangely, this isn't required any more. might have
    713  f1ac							; resulted from the no_blank_lines score bounce fix
    714  f1ac							;ifconst no_blank_lines
    715  f1ac							;sta WSYNC
    716  f1ac							;endif
    717  f1ac
    718  f1ac		       ad 84 02 	      lda	INTIM
    719  f1af		       18		      clc
    720  f1b0					      ifnconst	vblank_time
    721  f1b0		       69 8e		      adc	#43+12+87
    722  f1b2				  -	      else
    723  f1b2				  -	      adc	#vblank_time+12+87
    724  f1b2				  -
    725  f1b2					      endif
    726  f1b2							; sta WSYNC
    727  f1b2		       8d 96 02 	      sta	TIM64T
    728  f1b5
    729  f1b5				  -	      ifconst	minikernel
    730  f1b5				  -	      jsr	minikernel
    731  f1b5					      endif
    732  f1b5
    733  f1b5							; now reassign temp vars for score pointers
    734  f1b5
    735  f1b5							; score pointers contain:
    736  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1b5							; swap lo2->temp1
    738  f1b5							; swap lo4->temp3
    739  f1b5							; swap lo6->temp5
    740  f1b5					      ifnconst	noscore
    741  f1b5		       a5 97		      lda	scorepointers+1
    742  f1b7							; ldy temp1
    743  f1b7		       85 9c		      sta	temp1
    744  f1b9							; sty scorepointers+1
    745  f1b9
    746  f1b9		       a5 99		      lda	scorepointers+3
    747  f1bb							; ldy temp3
    748  f1bb		       85 9e		      sta	temp3
    749  f1bd							; sty scorepointers+3
    750  f1bd
    751  f1bd
    752  f1bd		       85 2b		      sta	HMCLR
    753  f1bf		       ba		      tsx
    754  f1c0		       86 f6		      stx	stack1
    755  f1c2		       a2 e0		      ldx	#$E0
    756  f1c4		       86 20		      stx	HMP0
    757  f1c6
    758  f1c6		       a5 a3		      LDA	scorecolor
    759  f1c8		       85 06		      STA	COLUP0
    760  f1ca		       85 07		      STA	COLUP1
    761  f1cc				  -	      ifconst	scorefade
    762  f1cc				  -	      STA	stack2
    763  f1cc					      endif
    764  f1cc					      ifconst	pfscore
    765  f1cc		       a5 f4		      lda	pfscorecolor
    766  f1ce		       85 08		      sta	COLUPF
    767  f1d0					      endif
    768  f1d0		       85 02		      sta	WSYNC
    769  f1d2		       a2 00		      ldx	#0
    770  f1d4		       86 1b		      STx	GRP0
    771  f1d6		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1d8
    773  f1d8		       a5 9b		      lda	scorepointers+5
    774  f1da							; ldy temp5
    775  f1da		       95 a0		      sta	temp5,x
    776  f1dc							; sty scorepointers+5
    777  f1dc		       a9 ff		      lda	#>scoretable
    778  f1de		       85 97		      sta	scorepointers+1
    779  f1e0		       85 99		      sta	scorepointers+3
    780  f1e2		       85 9b		      sta	scorepointers+5
    781  f1e4		       85 9d		      sta	temp2
    782  f1e6		       85 9f		      sta	temp4
    783  f1e8		       85 a1		      sta	temp6
    784  f1ea		       a0 07		      LDY	#7
    785  f1ec		       84 25		      STY	VDELP0
    786  f1ee		       85 10		      STA	RESP0
    787  f1f0		       85 11		      STA	RESP1
    788  f1f2
    789  f1f2
    790  f1f2		       a9 03		      LDA	#$03
    791  f1f4		       85 04		      STA	NUSIZ0
    792  f1f6		       85 05		      STA	NUSIZ1
    793  f1f8		       85 26		      STA	VDELP1
    794  f1fa		       a9 f0		      LDA	#$F0
    795  f1fc		       85 21		      STA	HMP1
    796  f1fe		       b1 96		      lda	(scorepointers),y
    797  f200		       85 1b		      sta	GRP0
    798  f202		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f204		       4c 10 f2 	      jmp	beginscore
    800  f207
    801  f207
    802  f207				  -	      if	((<*)>$d4)
    803  f207				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f207					      endif
    805  f207
    806  f207				   loop2
    807  f207		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f209		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f20b					      ifconst	pfscore
    810  f20b		       ad f2 00 	      lda.w	pfscore1
    811  f20e		       85 0e		      sta	PF1
    812  f210				  -	      else
    813  f210				  -	      ifconst	scorefade
    814  f210				  -	      sleep	2
    815  f210				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f210				  -	      else
    817  f210				  -	      sleep	7
    818  f210				  -	      endif
    819  f210					      endif
    820  f210							; cycle 0
    821  f210				   beginscore
    822  f210		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f212		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f214		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f216		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f218		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f21a		       9a		      txs
    828  f21b		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f21d				  -	      ifconst	scorefade
    830  f21d				  -	      lda	stack2
    831  f21d					      else
      0  f21d					      sleep	3
      1  f21d				   .CYCLES    SET	3
      2  f21d
      3  f21d				  -	      IF	.CYCLES < 2
      4  f21d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21d				  -	      ERR
      6  f21d					      ENDIF
      7  f21d
      8  f21d					      IF	.CYCLES & 1
      9  f21d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21d		       04 00		      nop	0
     11  f21f				  -	      ELSE
     12  f21f				  -	      bit	VSYNC
     13  f21f					      ENDIF
     14  f21f				   .CYCLES    SET	.CYCLES - 3
     15  f21f					      ENDIF
     16  f21f
     17  f21f				  -	      REPEAT	.CYCLES / 2
     18  f21f				  -	      nop
     19  f21f					      REPEND
    833  f21f					      endif
    834  f21f
    835  f21f					      ifconst	pfscore
    836  f21f		       a5 f3		      lda	pfscore2
    837  f221		       85 0e		      sta	PF1
    838  f223				  -	      else
    839  f223				  -	      ifconst	scorefade
    840  f223				  -	      sta	COLUP0
    841  f223				  -	      sta	COLUP1
    842  f223				  -	      else
    843  f223				  -	      sleep	6
    844  f223				  -	      endif
    845  f223					      endif
    846  f223
    847  f223		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f225		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f227		       ba		      tsx
    850  f228		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f22a		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f22c		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f22e		       88		      dey
    854  f22f		       10 d6		      bpl	loop2	;+2 60 180
    855  f231
    856  f231		       a6 f6		      ldx	stack1
    857  f233		       9a		      txs
    858  f234							; lda scorepointers+1
    859  f234		       a4 9c		      ldy	temp1
    860  f236							; sta temp1
    861  f236		       84 97		      sty	scorepointers+1
    862  f238
    863  f238		       a9 00		      LDA	#0
    864  f23a		       85 0e		      sta	PF1
    865  f23c		       85 1b		      STA	GRP0
    866  f23e		       85 1c		      STA	GRP1
    867  f240		       85 25		      STA	VDELP0
    868  f242		       85 26		      STA	VDELP1	;do we need these
    869  f244		       85 04		      STA	NUSIZ0
    870  f246		       85 05		      STA	NUSIZ1
    871  f248
    872  f248							; lda scorepointers+3
    873  f248		       a4 9e		      ldy	temp3
    874  f24a							; sta temp3
    875  f24a		       84 99		      sty	scorepointers+3
    876  f24c
    877  f24c							; lda scorepointers+5
    878  f24c		       a4 a0		      ldy	temp5
    879  f24e							; sta temp5
    880  f24e		       84 9b		      sty	scorepointers+5
    881  f250					      endif		;noscore
    882  f250				  -	      ifconst	readpaddle
    883  f250				  -	      lda	#%11000010
    884  f250					      else
    885  f250				  -	      ifconst	qtcontroller
    886  f250				  -	      lda	qtcontroller
    887  f250				  -	      lsr		; bit 0 in carry
    888  f250				  -	      lda	#4
    889  f250				  -	      ror		; carry into top of A
    890  f250					      else
    891  f250		       a9 02		      lda	#2
    892  f252					      endif		; qtcontroller
    893  f252					      endif		; readpaddle
    894  f252		       85 02		      sta	WSYNC
    895  f254		       85 01		      sta	VBLANK
      0  f256					      RETURN
      1  f256					      ifnconst	bankswitch
      2  f256		       60		      rts
      3  f257				  -	      else
      4  f257				  -	      jmp	BS_return
      5  f257					      endif
    897  f257				  -	      ifconst	shakescreen
    898  f257				  -doshakescreen
    899  f257				  -	      bit	shakescreen
    900  f257				  -	      bmi	noshakescreen
    901  f257				  -	      sta	WSYNC
    902  f257				  -noshakescreen
    903  f257				  -	      ldx	missile0height
    904  f257				  -	      inx
    905  f257				  -	      rts
    906  f257					      endif
    907  f257
    908  f257							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f257
    910  f257							; playfield drawing routines
    911  f257							; you get a 32x12 bitmapped display in a single color :)
    912  f257							; 0-31 and 0-11
    913  f257
    914  f257				   pfclear		; clears playfield - or fill with pattern
    915  f257				  -	      ifconst	pfres
    916  f257				  -	      ldx	#pfres*pfwidth-1
    917  f257					      else
    918  f257		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f259					      endif
    920  f259				   pfclear_loop
    921  f259					      ifnconst	superchip
    922  f259		       95 a4		      sta	playfield,x
    923  f25b				  -	      else
    924  f25b				  -	      sta	playfield-128,x
    925  f25b					      endif
    926  f25b		       ca		      dex
    927  f25c		       10 fb		      bpl	pfclear_loop
      0  f25e					      RETURN
      1  f25e					      ifnconst	bankswitch
      2  f25e		       60		      rts
      3  f25f				  -	      else
      4  f25f				  -	      jmp	BS_return
      5  f25f					      endif
    929  f25f
    930  f25f				   setuppointers
    931  f25f		       86 9d		      stx	temp2	; store on.off.flip value
    932  f261		       aa		      tax		; put x-value in x 
    933  f262		       4a		      lsr
    934  f263		       4a		      lsr
    935  f264		       4a		      lsr		; divide x pos by 8 
    936  f265		       85 9c		      sta	temp1
    937  f267		       98		      tya
    938  f268		       0a		      asl
    939  f269					      if	pfwidth=4
    940  f269		       0a		      asl		; multiply y pos by 4
    941  f26a					      endif		; else multiply by 2
    942  f26a		       18		      clc
    943  f26b		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f26d		       a8		      tay		; put the value in y
    945  f26e		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f270		       60		      rts
    947  f271
    948  f271				   pfread
    949  f271							;x=xvalue, y=yvalue
    950  f271		       20 5f f2 	      jsr	setuppointers
    951  f274		       bd d9 f2 	      lda	setbyte,x
    952  f277		       39 a4 00 	      and	playfield,y
    953  f27a		       5d d9 f2 	      eor	setbyte,x
    954  f27d							; beq readzero
    955  f27d							; lda #1
    956  f27d							; readzero
      0  f27d					      RETURN
      1  f27d					      ifnconst	bankswitch
      2  f27d		       60		      rts
      3  f27e				  -	      else
      4  f27e				  -	      jmp	BS_return
      5  f27e					      endif
    958  f27e
    959  f27e				   pfpixel
    960  f27e							;x=xvalue, y=yvalue, a=0,1,2
    961  f27e		       20 5f f2 	      jsr	setuppointers
    962  f281
    963  f281				  -	      ifconst	bankswitch
    964  f281				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f281				  -	      beq	pixelon_r	; if "on" go to on
    966  f281				  -	      lsr
    967  f281				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f281				  -	      lda	playfield,y	; if here, it's "flip"
    969  f281				  -	      eor	setbyte,x
    970  f281				  -	      ifconst	superchip
    971  f281				  -	      sta	playfield-128,y
    972  f281				  -	      else
    973  f281				  -	      sta	playfield,y
    974  f281				  -	      endif
    975  f281				  -	      RETURN
    976  f281				  -pixelon_r
    977  f281				  -	      lda	playfield,y
    978  f281				  -	      ora	setbyte,x
    979  f281				  -	      ifconst	superchip
    980  f281				  -	      sta	playfield-128,y
    981  f281				  -	      else
    982  f281				  -	      sta	playfield,y
    983  f281				  -	      endif
    984  f281				  -	      RETURN
    985  f281				  -pixeloff_r
    986  f281				  -	      lda	setbyte,x
    987  f281				  -	      eor	#$ff
    988  f281				  -	      and	playfield,y
    989  f281				  -	      ifconst	superchip
    990  f281				  -	      sta	playfield-128,y
    991  f281				  -	      else
    992  f281				  -	      sta	playfield,y
    993  f281				  -	      endif
    994  f281				  -	      RETURN
    995  f281				  -
    996  f281					      else
    997  f281		       4c b2 f2 	      jmp	plotpoint
    998  f284					      endif
    999  f284
   1000  f284				   pfhline
   1001  f284							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f284		       20 5f f2 	      jsr	setuppointers
   1003  f287		       4c 91 f2 	      jmp	noinc
   1004  f28a				   keepgoing
   1005  f28a		       e8		      inx
   1006  f28b		       8a		      txa
   1007  f28c		       29 07		      and	#7
   1008  f28e		       d0 01		      bne	noinc
   1009  f290		       c8		      iny
   1010  f291				   noinc
   1011  f291		       20 b2 f2 	      jsr	plotpoint
   1012  f294		       e4 9e		      cpx	temp3
   1013  f296		       30 f2		      bmi	keepgoing
      0  f298					      RETURN
      1  f298					      ifnconst	bankswitch
      2  f298		       60		      rts
      3  f299				  -	      else
      4  f299				  -	      jmp	BS_return
      5  f299					      endif
   1015  f299
   1016  f299				   pfvline
   1017  f299							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f299		       20 5f f2 	      jsr	setuppointers
   1019  f29c		       84 9c		      sty	temp1	; store memory location offset
   1020  f29e		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f2a0		       a5 9e		      lda	temp3
   1022  f2a2		       0a		      asl
   1023  f2a3					      if	pfwidth=4
   1024  f2a3		       0a		      asl		; multiply by 4
   1025  f2a4					      endif		; else multiply by 2
   1026  f2a4		       85 9e		      sta	temp3	; store it
   1027  f2a6							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2a6							; right now, temp1=y=starting memory location, temp3=final
   1029  f2a6							; x should equal original x value
   1030  f2a6				   keepgoingy
   1031  f2a6		       20 b2 f2 	      jsr	plotpoint
   1032  f2a9		       c8		      iny
   1033  f2aa		       c8		      iny
   1034  f2ab					      if	pfwidth=4
   1035  f2ab		       c8		      iny
   1036  f2ac		       c8		      iny
   1037  f2ad					      endif
   1038  f2ad		       c4 9e		      cpy	temp3
   1039  f2af		       30 f5		      bmi	keepgoingy
      0  f2b1					      RETURN
      1  f2b1					      ifnconst	bankswitch
      2  f2b1		       60		      rts
      3  f2b2				  -	      else
      4  f2b2				  -	      jmp	BS_return
      5  f2b2					      endif
   1041  f2b2
   1042  f2b2				   plotpoint
   1043  f2b2		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2b4		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2b6		       4a		      lsr
   1046  f2b7		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2b9		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2bc		       5d d9 f2 	      eor	setbyte,x
   1049  f2bf				  -	      ifconst	superchip
   1050  f2bf				  -	      sta	playfield-128,y
   1051  f2bf					      else
   1052  f2bf		       99 a4 00 	      sta	playfield,y
   1053  f2c2					      endif
   1054  f2c2		       60		      rts
   1055  f2c3				   pixelon
   1056  f2c3		       b9 a4 00 	      lda	playfield,y
   1057  f2c6		       1d d9 f2 	      ora	setbyte,x
   1058  f2c9				  -	      ifconst	superchip
   1059  f2c9				  -	      sta	playfield-128,y
   1060  f2c9					      else
   1061  f2c9		       99 a4 00 	      sta	playfield,y
   1062  f2cc					      endif
   1063  f2cc		       60		      rts
   1064  f2cd				   pixeloff
   1065  f2cd		       bd d9 f2 	      lda	setbyte,x
   1066  f2d0		       49 ff		      eor	#$ff
   1067  f2d2		       39 a4 00 	      and	playfield,y
   1068  f2d5				  -	      ifconst	superchip
   1069  f2d5				  -	      sta	playfield-128,y
   1070  f2d5					      else
   1071  f2d5		       99 a4 00 	      sta	playfield,y
   1072  f2d8					      endif
   1073  f2d8		       60		      rts
   1074  f2d9
   1075  f2d9				   setbyte
   1076  f2d9					      ifnconst	pfcenter
   1077  f2d9		       80		      .byte.b	$80
   1078  f2da		       40		      .byte.b	$40
   1079  f2db		       20		      .byte.b	$20
   1080  f2dc		       10		      .byte.b	$10
   1081  f2dd		       08		      .byte.b	$08
   1082  f2de		       04		      .byte.b	$04
   1083  f2df		       02		      .byte.b	$02
   1084  f2e0		       01		      .byte.b	$01
   1085  f2e1					      endif
   1086  f2e1		       01		      .byte.b	$01
   1087  f2e2		       02		      .byte.b	$02
   1088  f2e3		       04		      .byte.b	$04
   1089  f2e4		       08		      .byte.b	$08
   1090  f2e5		       10		      .byte.b	$10
   1091  f2e6		       20		      .byte.b	$20
   1092  f2e7		       40		      .byte.b	$40
   1093  f2e8		       80		      .byte.b	$80
   1094  f2e9		       80		      .byte.b	$80
   1095  f2ea		       40		      .byte.b	$40
   1096  f2eb		       20		      .byte.b	$20
   1097  f2ec		       10		      .byte.b	$10
   1098  f2ed		       08		      .byte.b	$08
   1099  f2ee		       04		      .byte.b	$04
   1100  f2ef		       02		      .byte.b	$02
   1101  f2f0		       01		      .byte.b	$01
   1102  f2f1		       01		      .byte.b	$01
   1103  f2f2		       02		      .byte.b	$02
   1104  f2f3		       04		      .byte.b	$04
   1105  f2f4		       08		      .byte.b	$08
   1106  f2f5		       10		      .byte.b	$10
   1107  f2f6		       20		      .byte.b	$20
   1108  f2f7		       40		      .byte.b	$40
   1109  f2f8		       80		      .byte.b	$80
   1110  f2f9							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f2f9
   1112  f2f9				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f2f9		       d0 13		      bne	notleft
   1114  f2fb							;left
   1115  f2fb				  -	      ifconst	pfres
   1116  f2fb				  -	      ldx	#pfres*4
   1117  f2fb					      else
   1118  f2fb		       a2 30		      ldx	#48
   1119  f2fd					      endif
   1120  f2fd				   leftloop
   1121  f2fd		       b5 a3		      lda	playfield-1,x
   1122  f2ff		       4a		      lsr
   1123  f300
   1124  f300				  -	      ifconst	superchip
   1125  f300				  -	      lda	playfield-2,x
   1126  f300				  -	      rol
   1127  f300				  -	      sta	playfield-130,x
   1128  f300				  -	      lda	playfield-3,x
   1129  f300				  -	      ror
   1130  f300				  -	      sta	playfield-131,x
   1131  f300				  -	      lda	playfield-4,x
   1132  f300				  -	      rol
   1133  f300				  -	      sta	playfield-132,x
   1134  f300				  -	      lda	playfield-1,x
   1135  f300				  -	      ror
   1136  f300				  -	      sta	playfield-129,x
   1137  f300					      else
   1138  f300		       36 a2		      rol	playfield-2,x
   1139  f302		       76 a1		      ror	playfield-3,x
   1140  f304		       36 a0		      rol	playfield-4,x
   1141  f306		       76 a3		      ror	playfield-1,x
   1142  f308					      endif
   1143  f308
   1144  f308		       8a		      txa
   1145  f309		       cb 04		      sbx	#4
   1146  f30b		       d0 f0		      bne	leftloop
      0  f30d					      RETURN
      1  f30d					      ifnconst	bankswitch
      2  f30d		       60		      rts
      3  f30e				  -	      else
      4  f30e				  -	      jmp	BS_return
      5  f30e					      endif
   1148  f30e
   1149  f30e				   notleft
   1150  f30e		       4a		      lsr
   1151  f30f		       90 13		      bcc	notright
   1152  f311							;right
   1153  f311
   1154  f311				  -	      ifconst	pfres
   1155  f311				  -	      ldx	#pfres*4
   1156  f311					      else
   1157  f311		       a2 30		      ldx	#48
   1158  f313					      endif
   1159  f313				   rightloop
   1160  f313		       b5 a0		      lda	playfield-4,x
   1161  f315		       4a		      lsr
   1162  f316				  -	      ifconst	superchip
   1163  f316				  -	      lda	playfield-3,x
   1164  f316				  -	      rol
   1165  f316				  -	      sta	playfield-131,x
   1166  f316				  -	      lda	playfield-2,x
   1167  f316				  -	      ror
   1168  f316				  -	      sta	playfield-130,x
   1169  f316				  -	      lda	playfield-1,x
   1170  f316				  -	      rol
   1171  f316				  -	      sta	playfield-129,x
   1172  f316				  -	      lda	playfield-4,x
   1173  f316				  -	      ror
   1174  f316				  -	      sta	playfield-132,x
   1175  f316					      else
   1176  f316		       36 a1		      rol	playfield-3,x
   1177  f318		       76 a2		      ror	playfield-2,x
   1178  f31a		       36 a3		      rol	playfield-1,x
   1179  f31c		       76 a0		      ror	playfield-4,x
   1180  f31e					      endif
   1181  f31e		       8a		      txa
   1182  f31f		       cb 04		      sbx	#4
   1183  f321		       d0 f0		      bne	rightloop
      0  f323					      RETURN
      1  f323					      ifnconst	bankswitch
      2  f323		       60		      rts
      3  f324				  -	      else
      4  f324				  -	      jmp	BS_return
      5  f324					      endif
   1185  f324
   1186  f324				   notright
   1187  f324		       4a		      lsr
   1188  f325		       90 49		      bcc	notup
   1189  f327							;up
   1190  f327		       4a		      lsr
   1191  f328		       90 02		      bcc	onedecup
   1192  f32a		       c6 ef		      dec	playfieldpos
   1193  f32c				   onedecup
   1194  f32c		       c6 ef		      dec	playfieldpos
   1195  f32e		       f0 02		      beq	shiftdown
   1196  f330		       10 3d		      bpl	noshiftdown2
   1197  f332				   shiftdown
   1198  f332				  -	      ifconst	pfrowheight
   1199  f332				  -	      lda	#pfrowheight
   1200  f332					      else
   1201  f332					      ifnconst	pfres
   1202  f332		       a9 08		      lda	#8
   1203  f334				  -	      else
   1204  f334				  -	      lda	#(96/pfres)	; try to come close to the real size
   1205  f334					      endif
   1206  f334					      endif
   1207  f334
   1208  f334		       85 ef		      sta	playfieldpos
   1209  f336		       a5 a7		      lda	playfield+3
   1210  f338		       85 9f		      sta	temp4
   1211  f33a		       a5 a6		      lda	playfield+2
   1212  f33c		       85 9e		      sta	temp3
   1213  f33e		       a5 a5		      lda	playfield+1
   1214  f340		       85 9d		      sta	temp2
   1215  f342		       a5 a4		      lda	playfield
   1216  f344		       85 9c		      sta	temp1
   1217  f346		       a2 00		      ldx	#0
   1218  f348				   up2
   1219  f348		       b5 a8		      lda	playfield+4,x
   1220  f34a				  -	      ifconst	superchip
   1221  f34a				  -	      sta	playfield-128,x
   1222  f34a				  -	      lda	playfield+5,x
   1223  f34a				  -	      sta	playfield-127,x
   1224  f34a				  -	      lda	playfield+6,x
   1225  f34a				  -	      sta	playfield-126,x
   1226  f34a				  -	      lda	playfield+7,x
   1227  f34a				  -	      sta	playfield-125,x
   1228  f34a					      else
   1229  f34a		       95 a4		      sta	playfield,x
   1230  f34c		       b5 a9		      lda	playfield+5,x
   1231  f34e		       95 a5		      sta	playfield+1,x
   1232  f350		       b5 aa		      lda	playfield+6,x
   1233  f352		       95 a6		      sta	playfield+2,x
   1234  f354		       b5 ab		      lda	playfield+7,x
   1235  f356		       95 a7		      sta	playfield+3,x
   1236  f358					      endif
   1237  f358		       8a		      txa
   1238  f359		       cb fc		      sbx	#252
   1239  f35b				  -	      ifconst	pfres
   1240  f35b				  -	      cpx	#(pfres-1)*4
   1241  f35b					      else
   1242  f35b		       e0 2c		      cpx	#44
   1243  f35d					      endif
   1244  f35d		       d0 e9		      bne	up2
   1245  f35f
   1246  f35f		       a5 9f		      lda	temp4
   1247  f361
   1248  f361				  -	      ifconst	superchip
   1249  f361				  -	      ifconst	pfres
   1250  f361				  -	      sta	playfield+pfres*4-129
   1251  f361				  -	      lda	temp3
   1252  f361				  -	      sta	playfield+pfres*4-130
   1253  f361				  -	      lda	temp2
   1254  f361				  -	      sta	playfield+pfres*4-131
   1255  f361				  -	      lda	temp1
   1256  f361				  -	      sta	playfield+pfres*4-132
   1257  f361				  -	      else
   1258  f361				  -	      sta	playfield+47-128
   1259  f361				  -	      lda	temp3
   1260  f361				  -	      sta	playfield+46-128
   1261  f361				  -	      lda	temp2
   1262  f361				  -	      sta	playfield+45-128
   1263  f361				  -	      lda	temp1
   1264  f361				  -	      sta	playfield+44-128
   1265  f361				  -	      endif
   1266  f361					      else
   1267  f361				  -	      ifconst	pfres
   1268  f361				  -	      sta	playfield+pfres*4-1
   1269  f361				  -	      lda	temp3
   1270  f361				  -	      sta	playfield+pfres*4-2
   1271  f361				  -	      lda	temp2
   1272  f361				  -	      sta	playfield+pfres*4-3
   1273  f361				  -	      lda	temp1
   1274  f361				  -	      sta	playfield+pfres*4-4
   1275  f361					      else
   1276  f361		       85 d3		      sta	playfield+47
   1277  f363		       a5 9e		      lda	temp3
   1278  f365		       85 d2		      sta	playfield+46
   1279  f367		       a5 9d		      lda	temp2
   1280  f369		       85 d1		      sta	playfield+45
   1281  f36b		       a5 9c		      lda	temp1
   1282  f36d		       85 d0		      sta	playfield+44
   1283  f36f					      endif
   1284  f36f					      endif
   1285  f36f				   noshiftdown2
      0  f36f					      RETURN
      1  f36f					      ifnconst	bankswitch
      2  f36f		       60		      rts
      3  f370				  -	      else
      4  f370				  -	      jmp	BS_return
      5  f370					      endif
   1287  f370
   1288  f370
   1289  f370				   notup
   1290  f370							;down
   1291  f370		       4a		      lsr
   1292  f371		       b0 02		      bcs	oneincup
   1293  f373		       e6 ef		      inc	playfieldpos
   1294  f375				   oneincup
   1295  f375		       e6 ef		      inc	playfieldpos
   1296  f377		       a5 ef		      lda	playfieldpos
   1297  f379
   1298  f379				  -	      ifconst	pfrowheight
   1299  f379				  -	      cmp	#pfrowheight+1
   1300  f379					      else
   1301  f379					      ifnconst	pfres
   1302  f379		       c9 09		      cmp	#9
   1303  f37b				  -	      else
   1304  f37b				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f37b					      endif
   1306  f37b					      endif
   1307  f37b
   1308  f37b		       90 3b		      bcc	noshiftdown
   1309  f37d		       a9 01		      lda	#1
   1310  f37f		       85 ef		      sta	playfieldpos
   1311  f381
   1312  f381				  -	      ifconst	pfres
   1313  f381				  -	      lda	playfield+pfres*4-1
   1314  f381				  -	      sta	temp4
   1315  f381				  -	      lda	playfield+pfres*4-2
   1316  f381				  -	      sta	temp3
   1317  f381				  -	      lda	playfield+pfres*4-3
   1318  f381				  -	      sta	temp2
   1319  f381				  -	      lda	playfield+pfres*4-4
   1320  f381					      else
   1321  f381		       a5 d3		      lda	playfield+47
   1322  f383		       85 9f		      sta	temp4
   1323  f385		       a5 d2		      lda	playfield+46
   1324  f387		       85 9e		      sta	temp3
   1325  f389		       a5 d1		      lda	playfield+45
   1326  f38b		       85 9d		      sta	temp2
   1327  f38d		       a5 d0		      lda	playfield+44
   1328  f38f					      endif
   1329  f38f
   1330  f38f		       85 9c		      sta	temp1
   1331  f391
   1332  f391				  -	      ifconst	pfres
   1333  f391				  -	      ldx	#(pfres-1)*4
   1334  f391					      else
   1335  f391		       a2 2c		      ldx	#44
   1336  f393					      endif
   1337  f393				   down2
   1338  f393		       b5 a3		      lda	playfield-1,x
   1339  f395				  -	      ifconst	superchip
   1340  f395				  -	      sta	playfield-125,x
   1341  f395				  -	      lda	playfield-2,x
   1342  f395				  -	      sta	playfield-126,x
   1343  f395				  -	      lda	playfield-3,x
   1344  f395				  -	      sta	playfield-127,x
   1345  f395				  -	      lda	playfield-4,x
   1346  f395				  -	      sta	playfield-128,x
   1347  f395					      else
   1348  f395		       95 a7		      sta	playfield+3,x
   1349  f397		       b5 a2		      lda	playfield-2,x
   1350  f399		       95 a6		      sta	playfield+2,x
   1351  f39b		       b5 a1		      lda	playfield-3,x
   1352  f39d		       95 a5		      sta	playfield+1,x
   1353  f39f		       b5 a0		      lda	playfield-4,x
   1354  f3a1		       95 a4		      sta	playfield,x
   1355  f3a3					      endif
   1356  f3a3		       8a		      txa
   1357  f3a4		       cb 04		      sbx	#4
   1358  f3a6		       d0 eb		      bne	down2
   1359  f3a8
   1360  f3a8		       a5 9f		      lda	temp4
   1361  f3aa				  -	      ifconst	superchip
   1362  f3aa				  -	      sta	playfield-125
   1363  f3aa				  -	      lda	temp3
   1364  f3aa				  -	      sta	playfield-126
   1365  f3aa				  -	      lda	temp2
   1366  f3aa				  -	      sta	playfield-127
   1367  f3aa				  -	      lda	temp1
   1368  f3aa				  -	      sta	playfield-128
   1369  f3aa					      else
   1370  f3aa		       85 a7		      sta	playfield+3
   1371  f3ac		       a5 9e		      lda	temp3
   1372  f3ae		       85 a6		      sta	playfield+2
   1373  f3b0		       a5 9d		      lda	temp2
   1374  f3b2		       85 a5		      sta	playfield+1
   1375  f3b4		       a5 9c		      lda	temp1
   1376  f3b6		       85 a4		      sta	playfield
   1377  f3b8					      endif
   1378  f3b8				   noshiftdown
      0  f3b8					      RETURN
      1  f3b8					      ifnconst	bankswitch
      2  f3b8		       60		      rts
      3  f3b9				  -	      else
      4  f3b9				  -	      jmp	BS_return
      5  f3b9					      endif
   1380  f3b9							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3b9
   1382  f3b9							;standard routines needed for pretty much all games
   1383  f3b9							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3b9							; repositioning code and score pointer setup moved to overscan
   1385  f3b9							; read switches, joysticks now compiler generated (more efficient)
   1386  f3b9
   1387  f3b9				   randomize
   1388  f3b9		       a5 a2		      lda	rand
   1389  f3bb		       4a		      lsr
   1390  f3bc				  -	      ifconst	rand16
   1391  f3bc				  -	      rol	rand16
   1392  f3bc					      endif
   1393  f3bc		       90 02		      bcc	noeor
   1394  f3be		       49 b4		      eor	#$B4
   1395  f3c0				   noeor
   1396  f3c0		       85 a2		      sta	rand
   1397  f3c2				  -	      ifconst	rand16
   1398  f3c2				  -	      eor	rand16
   1399  f3c2					      endif
      0  f3c2					      RETURN
      1  f3c2					      ifnconst	bankswitch
      2  f3c2		       60		      rts
      3  f3c3				  -	      else
      4  f3c3				  -	      jmp	BS_return
      5  f3c3					      endif
   1401  f3c3							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3c3
   1403  f3c3				   drawscreen
   1404  f3c3				  -	      ifconst	debugscore
   1405  f3c3				  -	      ldx	#14
   1406  f3c3				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3c3				  -
   1408  f3c3				  -	      ifconst	mincycles
   1409  f3c3				  -	      lda	mincycles
   1410  f3c3				  -	      cmp	INTIM
   1411  f3c3				  -	      lda	mincycles
   1412  f3c3				  -	      bcc	nochange
   1413  f3c3				  -	      lda	INTIM
   1414  f3c3				  -	      sta	mincycles
   1415  f3c3				  -nochange
   1416  f3c3				  -	      endif
   1417  f3c3				  -
   1418  f3c3				  -			; cmp #$2B
   1419  f3c3				  -			; bcs no_cycles_left
   1420  f3c3				  -	      bmi	cycles_left
   1421  f3c3				  -	      ldx	#64
   1422  f3c3				  -	      eor	#$ff	;make negative
   1423  f3c3				  -cycles_left
   1424  f3c3				  -	      stx	scorecolor
   1425  f3c3				  -	      and	#$7f	; clear sign bit
   1426  f3c3				  -	      tax
   1427  f3c3				  -	      lda	scorebcd,x
   1428  f3c3				  -	      sta	score+2
   1429  f3c3				  -	      lda	scorebcd1,x
   1430  f3c3				  -	      sta	score+1
   1431  f3c3				  -	      jmp	done_debugscore
   1432  f3c3				  -scorebcd
   1433  f3c3				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3c3				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3c3				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3c3				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3c3				  -scorebcd1
   1438  f3c3				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3c3				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3c3				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3c3				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3c3				  -done_debugscore
   1443  f3c3					      endif
   1444  f3c3
   1445  f3c3				  -	      ifconst	debugcycles
   1446  f3c3				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3c3				  -			; cmp #$2B
   1448  f3c3				  -			; BCC overscan
   1449  f3c3				  -	      bmi	overscan
   1450  f3c3				  -	      sta	COLUBK
   1451  f3c3				  -	      bcs	doneoverscan
   1452  f3c3					      endif
   1453  f3c3
   1454  f3c3				   overscan
   1455  f3c3				  -	      ifconst	interlaced
   1456  f3c3				  -	      PHP
   1457  f3c3				  -	      PLA
   1458  f3c3				  -	      EOR	#4	; flip interrupt bit
   1459  f3c3				  -	      PHA
   1460  f3c3				  -	      PLP
   1461  f3c3				  -	      AND	#4	; isolate the interrupt bit
   1462  f3c3				  -	      TAX		; save it for later
   1463  f3c3					      endif
   1464  f3c3
   1465  f3c3				   overscanloop
   1466  f3c3		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3c6		       30 fb		      bmi	overscanloop
   1468  f3c8				   doneoverscan
   1469  f3c8
   1470  f3c8							;do VSYNC
   1471  f3c8
   1472  f3c8				  -	      ifconst	interlaced
   1473  f3c8				  -	      CPX	#4
   1474  f3c8				  -	      BNE	oddframevsync
   1475  f3c8					      endif
   1476  f3c8
   1477  f3c8		       a9 02		      lda	#2
   1478  f3ca		       85 02		      sta	WSYNC
   1479  f3cc		       85 00		      sta	VSYNC
   1480  f3ce		       85 02		      STA	WSYNC
   1481  f3d0		       85 02		      STA	WSYNC
   1482  f3d2		       4a		      lsr
   1483  f3d3		       85 02		      STA	WSYNC
   1484  f3d5		       85 00		      STA	VSYNC
   1485  f3d7		       85 01		      sta	VBLANK
   1486  f3d9					      ifnconst	overscan_time
   1487  f3d9		       a9 a5		      lda	#37+128
   1488  f3db				  -	      else
   1489  f3db				  -	      lda	#overscan_time+128
   1490  f3db					      endif
   1491  f3db		       8d 96 02 	      sta	TIM64T
   1492  f3de
   1493  f3de				  -	      ifconst	interlaced
   1494  f3de				  -	      jmp	postsync
   1495  f3de				  -
   1496  f3de				  -oddframevsync
   1497  f3de				  -	      sta	WSYNC
   1498  f3de				  -
   1499  f3de				  -	      LDA	($80,X)	; 11 waste
   1500  f3de				  -	      LDA	($80,X)	; 11 waste
   1501  f3de				  -	      LDA	($80,X)	; 11 waste
   1502  f3de				  -
   1503  f3de				  -	      lda	#2
   1504  f3de				  -	      sta	VSYNC
   1505  f3de				  -	      sta	WSYNC
   1506  f3de				  -	      sta	WSYNC
   1507  f3de				  -	      sta	WSYNC
   1508  f3de				  -
   1509  f3de				  -	      LDA	($80,X)	; 11 waste
   1510  f3de				  -	      LDA	($80,X)	; 11 waste
   1511  f3de				  -	      LDA	($80,X)	; 11 waste
   1512  f3de				  -
   1513  f3de				  -	      lda	#0
   1514  f3de				  -	      sta	VSYNC
   1515  f3de				  -	      sta	VBLANK
   1516  f3de				  -	      ifnconst	overscan_time
   1517  f3de				  -	      lda	#37+128
   1518  f3de				  -	      else
   1519  f3de				  -	      lda	#overscan_time+128
   1520  f3de				  -	      endif
   1521  f3de				  -	      sta	TIM64T
   1522  f3de				  -
   1523  f3de				  -postsync
   1524  f3de					      endif
   1525  f3de
   1526  f3de				  -	      ifconst	legacy
   1527  f3de				  -	      if	legacy < 100
   1528  f3de				  -	      ldx	#4
   1529  f3de				  -adjustloop
   1530  f3de				  -	      lda	player0x,x
   1531  f3de				  -	      sec
   1532  f3de				  -	      sbc	#14	;?
   1533  f3de				  -	      sta	player0x,x
   1534  f3de				  -	      dex
   1535  f3de				  -	      bpl	adjustloop
   1536  f3de				  -	      endif
   1537  f3de					      endif
   1538  f3de				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3de				  -	      repeat	($fa-(<*))
   1540  f3de				  -	      nop
   1541  f3de				  -	      repend
   1542  f3de					      endif
   1543  f3de		       85 02		      sta	WSYNC
   1544  f3e0		       a2 04		      ldx	#4
      0  f3e2					      SLEEP	3
      1  f3e2				   .CYCLES    SET	3
      2  f3e2
      3  f3e2				  -	      IF	.CYCLES < 2
      4  f3e2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3e2				  -	      ERR
      6  f3e2					      ENDIF
      7  f3e2
      8  f3e2					      IF	.CYCLES & 1
      9  f3e2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3e2		       04 00		      nop	0
     11  f3e4				  -	      ELSE
     12  f3e4				  -	      bit	VSYNC
     13  f3e4					      ENDIF
     14  f3e4				   .CYCLES    SET	.CYCLES - 3
     15  f3e4					      ENDIF
     16  f3e4
     17  f3e4				  -	      REPEAT	.CYCLES / 2
     18  f3e4				  -	      nop
     19  f3e4					      REPEND
   1546  f3e4				   HorPosLoop		; 5
   1547  f3e4		       b5 80		      lda	player0x,X	;+4 9
   1548  f3e6		       38		      sec		;+2 11
   1549  f3e7				   DivideLoop
   1550  f3e7		       e9 0f		      sbc	#15
   1551  f3e9		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3eb		       95 9c		      sta	temp1,X	;+4 19
   1553  f3ed		       95 10		      sta	RESP0,X	;+4 23
   1554  f3ef		       85 02		      sta	WSYNC
   1555  f3f1		       ca		      dex
   1556  f3f2		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3f4							; 4
   1558  f3f4
   1559  f3f4		       a2 04		      ldx	#4
   1560  f3f6		       b4 9c		      ldy	temp1,X
   1561  f3f8		       b9 54 f3 	      lda	repostable-256,Y
   1562  f3fb		       95 20		      sta	HMP0,X	;+14 18
   1563  f3fd
   1564  f3fd		       ca		      dex
   1565  f3fe		       b4 9c		      ldy	temp1,X
   1566  f400		       b9 54 f3 	      lda	repostable-256,Y
   1567  f403		       95 20		      sta	HMP0,X	;+14 32
   1568  f405
   1569  f405		       ca		      dex
   1570  f406		       b4 9c		      ldy	temp1,X
   1571  f408		       b9 54 f3 	      lda	repostable-256,Y
   1572  f40b		       95 20		      sta	HMP0,X	;+14 46
   1573  f40d
   1574  f40d		       ca		      dex
   1575  f40e		       b4 9c		      ldy	temp1,X
   1576  f410		       b9 54 f3 	      lda	repostable-256,Y
   1577  f413		       95 20		      sta	HMP0,X	;+14 60
   1578  f415
   1579  f415		       ca		      dex
   1580  f416		       b4 9c		      ldy	temp1,X
   1581  f418		       b9 54 f3 	      lda	repostable-256,Y
   1582  f41b		       95 20		      sta	HMP0,X	;+14 74
   1583  f41d
   1584  f41d		       85 02		      sta	WSYNC
   1585  f41f
   1586  f41f		       85 2a		      sta	HMOVE	;+3 3
   1587  f421
   1588  f421
   1589  f421				  -	      ifconst	legacy
   1590  f421				  -	      if	legacy < 100
   1591  f421				  -	      ldx	#4
   1592  f421				  -adjustloop2
   1593  f421				  -	      lda	player0x,x
   1594  f421				  -	      clc
   1595  f421				  -	      adc	#14	;?
   1596  f421				  -	      sta	player0x,x
   1597  f421				  -	      dex
   1598  f421				  -	      bpl	adjustloop2
   1599  f421				  -	      endif
   1600  f421					      endif
   1601  f421
   1602  f421
   1603  f421
   1604  f421
   1605  f421							;set score pointers
   1606  f421		       a7 95		      lax	score+2
   1607  f423		       20 54 f4 	      jsr	scorepointerset
   1608  f426		       84 9b		      sty	scorepointers+5
   1609  f428		       86 98		      stx	scorepointers+2
   1610  f42a		       a7 94		      lax	score+1
   1611  f42c		       20 54 f4 	      jsr	scorepointerset
   1612  f42f		       84 9a		      sty	scorepointers+4
   1613  f431		       86 97		      stx	scorepointers+1
   1614  f433		       a7 93		      lax	score
   1615  f435		       20 54 f4 	      jsr	scorepointerset
   1616  f438		       84 99		      sty	scorepointers+3
   1617  f43a		       86 96		      stx	scorepointers
   1618  f43c
   1619  f43c				   vblk
   1620  f43c							; run possible vblank bB code
   1621  f43c				  -	      ifconst	vblank_bB_code
   1622  f43c				  -	      jsr	vblank_bB_code
   1623  f43c					      endif
   1624  f43c				   vblk2
   1625  f43c		       ad 84 02 	      LDA	INTIM
   1626  f43f		       30 fb		      bmi	vblk2
   1627  f441		       4c 34 f0 	      jmp	kernel
   1628  f444
   1629  f444
   1630  f444		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f44d		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f454				   repostable
   1633  f454
   1634  f454				   scorepointerset
   1635  f454		       29 0f		      and	#$0F
   1636  f456		       0a		      asl
   1637  f457		       0a		      asl
   1638  f458		       0a		      asl
   1639  f459		       69 9c		      adc	#<scoretable
   1640  f45b		       a8		      tay
   1641  f45c		       8a		      txa
   1642  f45d							; and #$F0
   1643  f45d							; lsr
   1644  f45d		       4b f0		      asr	#$F0
   1645  f45f		       69 9c		      adc	#<scoretable
   1646  f461		       aa		      tax
   1647  f462		       60		      rts
   1648  f463				   game
   1649  f463				   .L00 		;  rem ---------------------------------------------------------------------------------
   1650  f463
   1651  f463				   .L01 		;  rem Shadow Over Space an Atari Game by James Weeks 2025 
   1652  f463
   1653  f463				   .
   1654  f463							; 
   1655  f463
   1656  f463				   .L02 		;  rem ---------------------------------------------------------------------------------  
   1657  f463
   1658  f463				   .L03 		;  set romsize 4k  :  rem set rom size for cartridge and IDE
   1659  f463
   1660  f463				   .
   1661  f463							; 
   1662  f463
   1663  f463				   .L04 		;  rem variables
   1664  f463
   1665  f463				   .L05 		;  rem ----------------------------------------------------------------------------
   1666  f463
   1667  f463				   .L06 		;  c{1} = 0  : rem Turned on if the last location of the joystick was UP
   1668  f463
   1669  f463		       a5 d6		      LDA	c
   1670  f465		       29 fd		      AND	#253
   1671  f467		       85 d6		      STA	c
   1672  f469				   .L07 		;  c{2} = 0  : rem Turned on if the last location of the joystick was DOWN
   1673  f469
   1674  f469		       a5 d6		      LDA	c
   1675  f46b		       29 fb		      AND	#251
   1676  f46d		       85 d6		      STA	c
   1677  f46f				   .L08 		;  c{3} = 0  : rem Turned on if the last location of the joystick was LEFT
   1678  f46f
   1679  f46f		       a5 d6		      LDA	c
   1680  f471		       29 f7		      AND	#247
   1681  f473		       85 d6		      STA	c
   1682  f475				   .L09 		;  c{4} = 1  : rem Turned on if the last location of the joystick was RIGHT
   1683  f475
   1684  f475		       a5 d6		      LDA	c
   1685  f477		       09 10		      ORA	#16
   1686  f479		       85 d6		      STA	c
   1687  f47b				   .L010		;  c{5} = 0  : rem Turned on if the last location of the joystick was UP+LEFT
   1688  f47b
   1689  f47b		       a5 d6		      LDA	c
   1690  f47d		       29 df		      AND	#223
   1691  f47f		       85 d6		      STA	c
   1692  f481				   .L011		;  c{6} = 0  : rem Turned on if the last location of the joystick was UP+RIGHT
   1693  f481
   1694  f481		       a5 d6		      LDA	c
   1695  f483		       29 bf		      AND	#191
   1696  f485		       85 d6		      STA	c
   1697  f487				   .L012		;  c{7} = 0  : rem Turned on if the last location of the joystick was DOWN+LEFT
   1698  f487
   1699  f487		       a5 d6		      LDA	c
   1700  f489		       29 7f		      AND	#127
   1701  f48b		       85 d6		      STA	c
   1702  f48d				   .L013		;  c{0} = 0  : rem Turned on if the last location of the joystick was DOWN+RIGHT
   1703  f48d
   1704  f48d		       a5 d6		      LDA	c
   1705  f48f		       29 fe		      AND	#254
   1706  f491		       85 d6		      STA	c
   1707  f493				   .L014		;  rem ----------------------------------------------------------------------------
   1708  f493
   1709  f493				   .L015		;  e = 20  : rem Counter for limiting travel of fired missile
   1710  f493
   1711  f493		       a9 14		      LDA	#20
   1712  f495		       85 d8		      STA	e
   1713  f497				   .L016		;  w = 0  : rem Used to determine player reflection (REFP1)
   1714  f497
   1715  f497		       a9 00		      LDA	#0
   1716  f499		       85 ea		      STA	w
   1717  f49b				   .L017		;  rem ----------------------------------------------------------------------------
   1718  f49b
   1719  f49b				   .L018		;  f  =  50  :  rem variable for player horizontal position
   1720  f49b
   1721  f49b		       a9 32		      LDA	#50
   1722  f49d		       85 d9		      STA	f
   1723  f49f				   .L019		;  d  =  50  :  rem variable for player vertical position
   1724  f49f
   1725  f49f		       a9 32		      LDA	#50
   1726  f4a1		       85 d7		      STA	d
   1727  f4a3				   .L020		;  g  =  30  :  rem monster position vertical
   1728  f4a3
   1729  f4a3		       a9 1e		      LDA	#30
   1730  f4a5		       85 da		      STA	g
   1731  f4a7				   .L021		;  h  =  90  :  rem monster position horizontal
   1732  f4a7
   1733  f4a7		       a9 5a		      LDA	#90
   1734  f4a9		       85 db		      STA	h
   1735  f4ab				   .L022		;  m  =  0  :	rem counter for monster animation frames
   1736  f4ab
   1737  f4ab		       a9 00		      LDA	#0
   1738  f4ad		       85 e0		      STA	m
   1739  f4af				   .L023		;  n  =  0  :	rem counter for player animation frames
   1740  f4af
   1741  f4af		       a9 00		      LDA	#0
   1742  f4b1		       85 e1		      STA	n
   1743  f4b3				   .L024		;  z  =  0  :	rem Flag to simulate monster ai
   1744  f4b3
   1745  f4b3		       a9 00		      LDA	#0
   1746  f4b5		       85 ed		      STA	z
   1747  f4b7				   .L025		;  k  =  0  :	rem flag for monster missile
   1748  f4b7
   1749  f4b7		       a9 00		      LDA	#0
   1750  f4b9		       85 de		      STA	k
   1751  f4bb				   .L026		;  p  =  30  :  rem flag for monster health
   1752  f4bb
   1753  f4bb		       a9 1e		      LDA	#30
   1754  f4bd		       85 e3		      STA	p
   1755  f4bf				   .L027		;  j  =  4  :	rem flag for player health
   1756  f4bf
   1757  f4bf		       a9 04		      LDA	#4
   1758  f4c1		       85 dd		      STA	j
   1759  f4c3				   .L028		;  s  =  0  :	rem player sprite direction
   1760  f4c3
   1761  f4c3		       a9 00		      LDA	#0
   1762  f4c5		       85 e6		      STA	s
   1763  f4c7				   .L029		;  u  =  0  :	rem win or leveling flag
   1764  f4c7
   1765  f4c7		       a9 00		      LDA	#0
   1766  f4c9		       85 e8		      STA	u
   1767  f4cb				   .
   1768  f4cb							; 
   1769  f4cb
   1770  f4cb				   .L030		;  rem ---------------------------------------------------------------------------------
   1771  f4cb
   1772  f4cb				   .L031		;  dim p0y  =	d  :  rem player vertical position
   1773  f4cb
   1774  f4cb				   .L032		;  dim p0x  =	f  :  rem player horizontal position
   1775  f4cb
   1776  f4cb				   .L033		;  dim p1y  =	g  :  rem set p1y to g, monster vertical position
   1777  f4cb
   1778  f4cb				   .L034		;  dim p1x  =	h  :  rem set p1x to h, moster horizantal position
   1779  f4cb
   1780  f4cb				   .L035		;  dim monsterSprite  =  m  :	rem set variable m, counter fo monster animation frames
   1781  f4cb
   1782  f4cb				   .L036		;  dim playerSprite  =  n  :  rem set variable n, counter fo player animation frames
   1783  f4cb
   1784  f4cb				   .L037		;  dim moved  =  0  :	rem Flag to check if the player moved
   1785  f4cb
   1786  f4cb				   .L038		;  dim winflag  =  u  :  rem win or leveling flag
   1787  f4cb
   1788  f4cb				   .L039		;  dim playerHealth  =  j  :  rem player health
   1789  f4cb
   1790  f4cb				   .L040		;  dim monsterHealth  =  p  :	rem player health
   1791  f4cb
   1792  f4cb				   .L041		;  const pfscore  =  1  :  rem enables health bars
   1793  f4cb
   1794  f4cb				   .L042		;  dim explosion_timer  =  a  :  rem sound, explosion timer
   1795  f4cb
   1796  f4cb				   .L043		;  dim missile1dist  =  0
   1797  f4cb
   1798  f4cb				   .
   1799  f4cb							; 
   1800  f4cb
   1801  f4cb				   .
   1802  f4cb							; 
   1803  f4cb
   1804  f4cb				   .
   1805  f4cb							; 
   1806  f4cb
   1807  f4cb				   .L044		;  pfscorecolor  =  65  :  rem Set the health bar color to green
   1808  f4cb
   1809  f4cb		       a9 41		      LDA	#65
   1810  f4cd		       85 f4		      STA	pfscorecolor
   1811  f4cf				   .L045		;  scorecolor	=  00  :  rem set the score counter color
   1812  f4cf
   1813  f4cf		       a9 00		      LDA	#00
   1814  f4d1		       85 a3		      STA	scorecolor
   1815  f4d3				   .
   1816  f4d3							; 
   1817  f4d3
   1818  f4d3				   .L046		;  rem ---------------------------------------------------------------------------------
   1819  f4d3
   1820  f4d3				   .L047		;  player0x  =  p0x  :  rem set player position x
   1821  f4d3
   1822  f4d3		       a5 d9		      LDA	p0x
   1823  f4d5		       85 80		      STA	player0x
   1824  f4d7				   .L048		;  player0y  =  p0y  :  rem set player position y
   1825  f4d7
   1826  f4d7		       a5 d7		      LDA	p0y
   1827  f4d9		       85 85		      STA	player0y
   1828  f4db				   .L049		;  player1y  =  p1y  :  rem set monster position y
   1829  f4db
   1830  f4db		       a5 da		      LDA	p1y
   1831  f4dd		       85 86		      STA	player1y
   1832  f4df				   .L050		;  player1x  =  p1x  :  rem set monster position x
   1833  f4df
   1834  f4df		       a5 db		      LDA	p1x
   1835  f4e1		       85 81		      STA	player1x
   1836  f4e3				   .
   1837  f4e3							; 
   1838  f4e3
   1839  f4e3				   .L051		;  pfscore1  =  %10101010  :  rem Full health (4 pills)
   1840  f4e3
   1841  f4e3		       a9 aa		      LDA	#%10101010
   1842  f4e5		       85 f2		      STA	pfscore1
   1843  f4e7				   .L052		;  pfscore2  =  %10101010  :  rem monster health bar
   1844  f4e7
   1845  f4e7		       a9 aa		      LDA	#%10101010
   1846  f4e9		       85 f3		      STA	pfscore2
   1847  f4eb				   .
   1848  f4eb							; 
   1849  f4eb
   1850  f4eb				   .titlescreen
   1851  f4eb							; titlescreen
   1852  f4eb
   1853  f4eb				   .L053		;  rem ---------------------------------------------------------------------------------
   1854  f4eb
   1855  f4eb				   .L054		;  COLUPF =  $A0  +   ( rand  &  3 )	:  rem set the playfield color of title screen 
   1856  f4eb
   1857  f4eb							; complex statement detected
   1858  f4eb		       a9 a0		      LDA	#$A0
   1859  f4ed		       48		      PHA
   1860  f4ee		       20 b9 f3 	      jsr	randomize
   1861  f4f1		       29 03		      AND	#3
   1862  f4f3		       ba		      TSX
   1863  f4f4		       e8		      INX
   1864  f4f5		       9a		      TXS
   1865  f4f6		       18		      CLC
   1866  f4f7		       75 00		      ADC	$00,x
   1867  f4f9		       85 08		      STA	COLUPF
   1868  f4fb				   .
   1869  f4fb							; 
   1870  f4fb
   1871  f4fb				   .L055		;  rem the playfield command draws the X's on the screen.  Must use capital X, must be 32x11.
   1872  f4fb
   1873  f4fb				   .L056		;  playfield:
   1874  f4fb
   1875  f4fb				  -	      ifconst	pfres
   1876  f4fb				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   1877  f4fb					      else
   1878  f4fb		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   1879  f4fd					      endif
   1880  f4fd		       4c 2c f5 	      jmp	pflabel0
   1881  f500				   PF_data0
   1882  f500		       fd 6e		      .byte.b	%11111101, %01101110
   1883  f502					      if	(pfwidth>2)
   1884  f502		       74 fe		      .byte.b	%01110100, %11111110
   1885  f504					      endif
   1886  f504		       85 aa		      .byte.b	%10000101, %10101010
   1887  f506					      if	(pfwidth>2)
   1888  f506		       54 82		      .byte.b	%01010100, %10000010
   1889  f508					      endif
   1890  f508		       f7 ae		      .byte.b	%11110111, %10101110
   1891  f50a					      if	(pfwidth>2)
   1892  f50a		       54 82		      .byte.b	%01010100, %10000010
   1893  f50c					      endif
   1894  f50c		       15 aa		      .byte.b	%00010101, %10101010
   1895  f50e					      if	(pfwidth>2)
   1896  f50e		       55 82		      .byte.b	%01010101, %10000010
   1897  f510					      endif
   1898  f510		       f5 6a		      .byte.b	%11110101, %01101010
   1899  f512					      if	(pfwidth>2)
   1900  f512		       76 83		      .byte.b	%01110110, %10000011
   1901  f514					      endif
   1902  f514		       f7 ee		      .byte.b	%11110111, %11101110
   1903  f516					      if	(pfwidth>2)
   1904  f516		       bf 83		      .byte.b	%10111111, %10000011
   1905  f518					      endif
   1906  f518		       85 2a		      .byte.b	%10000101, %00101010
   1907  f51a					      if	(pfwidth>2)
   1908  f51a		       20 80		      .byte.b	%00100000, %10000000
   1909  f51c					      endif
   1910  f51c		       f7 2e		      .byte.b	%11110111, %00101110
   1911  f51e					      if	(pfwidth>2)
   1912  f51e		       3e 80		      .byte.b	%00111110, %10000000
   1913  f520					      endif
   1914  f520		       14 2a		      .byte.b	%00010100, %00101010
   1915  f522					      if	(pfwidth>2)
   1916  f522		       20 80		      .byte.b	%00100000, %10000000
   1917  f524					      endif
   1918  f524		       f4 ea		      .byte.b	%11110100, %11101010
   1919  f526					      if	(pfwidth>2)
   1920  f526		       bf 83		      .byte.b	%10111111, %10000011
   1921  f528					      endif
   1922  f528		       ff ff		      .byte.b	%11111111, %11111111
   1923  f52a					      if	(pfwidth>2)
   1924  f52a		       ff ff		      .byte.b	%11111111, %11111111
   1925  f52c					      endif
   1926  f52c				   pflabel0
   1927  f52c		       bd 00 f5 	      lda	PF_data0,x
   1928  f52f		       95 a4		      sta	playfield,x
   1929  f531		       ca		      dex
   1930  f532		       10 f8		      bpl	pflabel0
   1931  f534				   .
   1932  f534							; 
   1933  f534
   1934  f534				   .L057		;  drawscreen
   1935  f534
   1936  f534		       20 c3 f3 	      jsr	drawscreen
   1937  f537				   .
   1938  f537							; 
   1939  f537
   1940  f537				   .L058		;  if joy0fire then goto main	:  rem if you press fire on the joystick, you'll leave the title screen and start the main program below
   1941  f537
   1942  f537		       24 0c		      bit	INPT4
   1943  f539		       30 03		      BMI	.skipL058
   1944  f53b				   .condpart0
   1945  f53b		       4c 41 f5 	      jmp	.main
   1946  f53e				   .skipL058
   1947  f53e				   .
   1948  f53e							; 
   1949  f53e
   1950  f53e				   .L059		;  goto titlescreen  :  rem if the joystick button is not pressed, just loop back to the titlescreen again
   1951  f53e
   1952  f53e		       4c eb f4 	      jmp	.titlescreen
   1953  f541				   .
   1954  f541							; 
   1955  f541
   1956  f541				   .L060		;  rem ---------------------------------------------------------------------------------
   1957  f541
   1958  f541				   .main
   1959  f541							; main
   1960  f541
   1961  f541				   .
   1962  f541							; 
   1963  f541
   1964  f541				   .L061		;  playerSprite  =  playerSprite  +  1  :  rem Increase animation frame counter
   1965  f541
   1966  f541		       e6 e1		      INC	playerSprite
   1967  f543				   .L062		;  if playerSprite  >	30 then playerSprite  =  0  :  rem Reset animation cycle
   1968  f543
   1969  f543		       a9 1e		      LDA	#30
   1970  f545		       c5 e1		      CMP	playerSprite
   1971  f547		       b0 04		      BCS	.skipL062
   1972  f549				   .condpart1
   1973  f549		       a9 00		      LDA	#0
   1974  f54b		       85 e1		      STA	playerSprite
   1975  f54d				   .skipL062
   1976  f54d				   .
   1977  f54d							; 
   1978  f54d
   1979  f54d				   .L063		;  if joy0right then s  =  1  :  rem Set direction to right
   1980  f54d
   1981  f54d		       2c 80 02 	      bit	SWCHA
   1982  f550		       30 04		      BMI	.skipL063
   1983  f552				   .condpart2
   1984  f552		       a9 01		      LDA	#1
   1985  f554		       85 e6		      STA	s
   1986  f556				   .skipL063
   1987  f556				   .L064		;  if joy0left then s	=  0  :  rem Set direction to left
   1988  f556
   1989  f556		       2c 80 02 	      bit	SWCHA
   1990  f559		       70 04		      BVS	.skipL064
   1991  f55b				   .condpart3
   1992  f55b		       a9 00		      LDA	#0
   1993  f55d		       85 e6		      STA	s
   1994  f55f				   .skipL064
   1995  f55f				   .
   1996  f55f							; 
   1997  f55f
   1998  f55f				   .L065		;  rem idle player sprite	     
   1999  f55f
   2000  f55f				   .L066		;  if !joy0left  &&  !joy0right  &&  !joy0up  &&  !joy0down  &&  !joy0fire then player0:
   2001  f55f
   2002  f55f		       2c 80 02 	      bit	SWCHA
   2003  f562		       50 23		      BVC	.skipL066
   2004  f564				   .condpart4
   2005  f564		       2c 80 02 	      bit	SWCHA
   2006  f567		       10 1e		      BPL	.skip4then
   2007  f569				   .condpart5
   2008  f569		       a9 10		      lda	#$10
   2009  f56b		       2c 80 02 	      bit	SWCHA
   2010  f56e		       f0 17		      BEQ	.skip5then
   2011  f570				   .condpart6
   2012  f570		       a9 20		      lda	#$20
   2013  f572		       2c 80 02 	      bit	SWCHA
   2014  f575		       f0 10		      BEQ	.skip6then
   2015  f577				   .condpart7
   2016  f577		       24 0c		      bit	INPT4
   2017  f579		       10 0c		      BPL	.skip7then
   2018  f57b				   .condpart8
   2019  f57b		       a2 b2		      LDX	#<player8then_0
   2020  f57d		       86 8a		      STX	player0pointerlo
   2021  f57f		       a9 fd		      LDA	#>player8then_0
   2022  f581		       85 8b		      STA	player0pointerhi
   2023  f583		       a9 0a		      LDA	#10
   2024  f585		       85 8e		      STA	player0height
   2025  f587				   .skip7then
   2026  f587				   .skip6then
   2027  f587				   .skip5then
   2028  f587				   .skip4then
   2029  f587				   .skipL066
   2030  f587				   .
   2031  f587							; 
   2032  f587
   2033  f587				   .L067		;  rem  player sprite animation left
   2034  f587
   2035  f587				   .L068		;  if playerSprite  =	10  &&	joy0left then player0: 
   2036  f587
   2037  f587		       a5 e1		      LDA	playerSprite
   2038  f589		       c9 0a		      CMP	#10
   2039  f58b		       d0 11		      BNE	.skipL068
   2040  f58d				   .condpart9
   2041  f58d		       2c 80 02 	      bit	SWCHA
   2042  f590		       70 0c		      BVS	.skip9then
   2043  f592				   .condpart10
   2044  f592		       a2 bd		      LDX	#<player10then_0
   2045  f594		       86 8a		      STX	player0pointerlo
   2046  f596		       a9 fd		      LDA	#>player10then_0
   2047  f598		       85 8b		      STA	player0pointerhi
   2048  f59a		       a9 0a		      LDA	#10
   2049  f59c		       85 8e		      STA	player0height
   2050  f59e				   .skip9then
   2051  f59e				   .skipL068
   2052  f59e				   .
   2053  f59e							; 
   2054  f59e
   2055  f59e				   .L069		;  if playerSprite  =	20  &&	joy0left then player0: 
   2056  f59e
   2057  f59e		       a5 e1		      LDA	playerSprite
   2058  f5a0		       c9 14		      CMP	#20
   2059  f5a2		       d0 11		      BNE	.skipL069
   2060  f5a4				   .condpart11
   2061  f5a4		       2c 80 02 	      bit	SWCHA
   2062  f5a7		       70 0c		      BVS	.skip11then
   2063  f5a9				   .condpart12
   2064  f5a9		       a2 c8		      LDX	#<player12then_0
   2065  f5ab		       86 8a		      STX	player0pointerlo
   2066  f5ad		       a9 fd		      LDA	#>player12then_0
   2067  f5af		       85 8b		      STA	player0pointerhi
   2068  f5b1		       a9 0a		      LDA	#10
   2069  f5b3		       85 8e		      STA	player0height
   2070  f5b5				   .skip11then
   2071  f5b5				   .skipL069
   2072  f5b5				   .
   2073  f5b5							; 
   2074  f5b5
   2075  f5b5				   .
   2076  f5b5							; 
   2077  f5b5
   2078  f5b5				   .L070		;  if playerSprite  =	30  &&	joy0left then player0: 
   2079  f5b5
   2080  f5b5		       a5 e1		      LDA	playerSprite
   2081  f5b7		       c9 1e		      CMP	#30
   2082  f5b9		       d0 11		      BNE	.skipL070
   2083  f5bb				   .condpart13
   2084  f5bb		       2c 80 02 	      bit	SWCHA
   2085  f5be		       70 0c		      BVS	.skip13then
   2086  f5c0				   .condpart14
   2087  f5c0		       a2 d3		      LDX	#<player14then_0
   2088  f5c2		       86 8a		      STX	player0pointerlo
   2089  f5c4		       a9 fd		      LDA	#>player14then_0
   2090  f5c6		       85 8b		      STA	player0pointerhi
   2091  f5c8		       a9 0a		      LDA	#10
   2092  f5ca		       85 8e		      STA	player0height
   2093  f5cc				   .skip13then
   2094  f5cc				   .skipL070
   2095  f5cc				   .
   2096  f5cc							; 
   2097  f5cc
   2098  f5cc				   .L071		;  rem player sprtite animation left
   2099  f5cc
   2100  f5cc				   .L072		;  if playerSprite  =	10  &&	joy0right then player0: 
   2101  f5cc
   2102  f5cc		       a5 e1		      LDA	playerSprite
   2103  f5ce		       c9 0a		      CMP	#10
   2104  f5d0		       d0 11		      BNE	.skipL072
   2105  f5d2				   .condpart15
   2106  f5d2		       2c 80 02 	      bit	SWCHA
   2107  f5d5		       30 0c		      BMI	.skip15then
   2108  f5d7				   .condpart16
   2109  f5d7		       a2 de		      LDX	#<player16then_0
   2110  f5d9		       86 8a		      STX	player0pointerlo
   2111  f5db		       a9 fd		      LDA	#>player16then_0
   2112  f5dd		       85 8b		      STA	player0pointerhi
   2113  f5df		       a9 0a		      LDA	#10
   2114  f5e1		       85 8e		      STA	player0height
   2115  f5e3				   .skip15then
   2116  f5e3				   .skipL072
   2117  f5e3				   .
   2118  f5e3							; 
   2119  f5e3
   2120  f5e3				   .L073		;  if playerSprite  =	20  &&	joy0right then player0: 
   2121  f5e3
   2122  f5e3		       a5 e1		      LDA	playerSprite
   2123  f5e5		       c9 14		      CMP	#20
   2124  f5e7		       d0 11		      BNE	.skipL073
   2125  f5e9				   .condpart17
   2126  f5e9		       2c 80 02 	      bit	SWCHA
   2127  f5ec		       30 0c		      BMI	.skip17then
   2128  f5ee				   .condpart18
   2129  f5ee		       a2 e9		      LDX	#<player18then_0
   2130  f5f0		       86 8a		      STX	player0pointerlo
   2131  f5f2		       a9 fd		      LDA	#>player18then_0
   2132  f5f4		       85 8b		      STA	player0pointerhi
   2133  f5f6		       a9 0a		      LDA	#10
   2134  f5f8		       85 8e		      STA	player0height
   2135  f5fa				   .skip17then
   2136  f5fa				   .skipL073
   2137  f5fa				   .
   2138  f5fa							; 
   2139  f5fa
   2140  f5fa				   .L074		;  if playerSprite  =	30  &&	joy0right then player0: 
   2141  f5fa
   2142  f5fa		       a5 e1		      LDA	playerSprite
   2143  f5fc		       c9 1e		      CMP	#30
   2144  f5fe		       d0 11		      BNE	.skipL074
   2145  f600				   .condpart19
   2146  f600		       2c 80 02 	      bit	SWCHA
   2147  f603		       30 0c		      BMI	.skip19then
   2148  f605				   .condpart20
   2149  f605		       a2 f4		      LDX	#<player20then_0
   2150  f607		       86 8a		      STX	player0pointerlo
   2151  f609		       a9 fd		      LDA	#>player20then_0
   2152  f60b		       85 8b		      STA	player0pointerhi
   2153  f60d		       a9 0a		      LDA	#10
   2154  f60f		       85 8e		      STA	player0height
   2155  f611				   .skip19then
   2156  f611				   .skipL074
   2157  f611				   .
   2158  f611							; 
   2159  f611
   2160  f611				   .
   2161  f611							; 
   2162  f611
   2163  f611				   .L075		;  monsterSprite  =  monsterSprite  +	1  :  rem animation frames for monster
   2164  f611
   2165  f611		       e6 e0		      INC	monsterSprite
   2166  f613				   .L076		;  if monsterSprite  >  30 then monsterSprite	=  0  :  rem Reset animation cycle
   2167  f613
   2168  f613		       a9 1e		      LDA	#30
   2169  f615		       c5 e0		      CMP	monsterSprite
   2170  f617		       b0 04		      BCS	.skipL076
   2171  f619				   .condpart21
   2172  f619		       a9 00		      LDA	#0
   2173  f61b		       85 e0		      STA	monsterSprite
   2174  f61d				   .skipL076
   2175  f61d				   .
   2176  f61d							; 
   2177  f61d
   2178  f61d				   .L077		;  rem monster stage 1
   2179  f61d
   2180  f61d				   .L078		;  if monsterSprite  =  10  &&  winflag  =  0 then player1: 
   2181  f61d
   2182  f61d		       a5 e0		      LDA	monsterSprite
   2183  f61f		       c9 0a		      CMP	#10
   2184  f621		       d0 12		      BNE	.skipL078
   2185  f623				   .condpart22
   2186  f623		       a5 e8		      LDA	winflag
   2187  f625		       c9 00		      CMP	#0
   2188  f627		       d0 0c		      BNE	.skip22then
   2189  f629				   .condpart23
   2190  f629		       a2 00		      LDX	#<player23then_1
   2191  f62b		       86 8c		      STX	player1pointerlo
   2192  f62d		       a9 fe		      LDA	#>player23then_1
   2193  f62f		       85 8d		      STA	player1pointerhi
   2194  f631		       a9 17		      LDA	#23
   2195  f633		       85 8f		      STA	player1height
   2196  f635				   .skip22then
   2197  f635				   .skipL078
   2198  f635				   .
   2199  f635							; 
   2200  f635
   2201  f635				   .L079		;  if monsterSprite  =  20  &&  winflag  =  0 then player1:
   2202  f635
   2203  f635		       a5 e0		      LDA	monsterSprite
   2204  f637		       c9 14		      CMP	#20
   2205  f639		       d0 12		      BNE	.skipL079
   2206  f63b				   .condpart24
   2207  f63b		       a5 e8		      LDA	winflag
   2208  f63d		       c9 00		      CMP	#0
   2209  f63f		       d0 0c		      BNE	.skip24then
   2210  f641				   .condpart25
   2211  f641		       a2 18		      LDX	#<player25then_1
   2212  f643		       86 8c		      STX	player1pointerlo
   2213  f645		       a9 fe		      LDA	#>player25then_1
   2214  f647		       85 8d		      STA	player1pointerhi
   2215  f649		       a9 17		      LDA	#23
   2216  f64b		       85 8f		      STA	player1height
   2217  f64d				   .skip24then
   2218  f64d				   .skipL079
   2219  f64d				   .
   2220  f64d							; 
   2221  f64d
   2222  f64d				   .L080		;  if monsterSprite  =  30  &&  winflag  =  0 then player1:
   2223  f64d
   2224  f64d		       a5 e0		      LDA	monsterSprite
   2225  f64f		       c9 1e		      CMP	#30
   2226  f651		       d0 12		      BNE	.skipL080
   2227  f653				   .condpart26
   2228  f653		       a5 e8		      LDA	winflag
   2229  f655		       c9 00		      CMP	#0
   2230  f657		       d0 0c		      BNE	.skip26then
   2231  f659				   .condpart27
   2232  f659		       a2 30		      LDX	#<player27then_1
   2233  f65b		       86 8c		      STX	player1pointerlo
   2234  f65d		       a9 fe		      LDA	#>player27then_1
   2235  f65f		       85 8d		      STA	player1pointerhi
   2236  f661		       a9 17		      LDA	#23
   2237  f663		       85 8f		      STA	player1height
   2238  f665				   .skip26then
   2239  f665				   .skipL080
   2240  f665				   .L081		;  rem monster stage 2
   2241  f665
   2242  f665				   .L082		;  if monsterSprite  =  10  &&  winflag  =  1 then player1: 
   2243  f665
   2244  f665		       a5 e0		      LDA	monsterSprite
   2245  f667		       c9 0a		      CMP	#10
   2246  f669		       d0 12		      BNE	.skipL082
   2247  f66b				   .condpart28
   2248  f66b		       a5 e8		      LDA	winflag
   2249  f66d		       c9 01		      CMP	#1
   2250  f66f		       d0 0c		      BNE	.skip28then
   2251  f671				   .condpart29
   2252  f671		       a2 48		      LDX	#<player29then_1
   2253  f673		       86 8c		      STX	player1pointerlo
   2254  f675		       a9 fe		      LDA	#>player29then_1
   2255  f677		       85 8d		      STA	player1pointerhi
   2256  f679		       a9 17		      LDA	#23
   2257  f67b		       85 8f		      STA	player1height
   2258  f67d				   .skip28then
   2259  f67d				   .skipL082
   2260  f67d				   .
   2261  f67d							; 
   2262  f67d
   2263  f67d				   .L083		;  if monsterSprite  =  20  &&  winflag  =  1 then player1:
   2264  f67d
   2265  f67d		       a5 e0		      LDA	monsterSprite
   2266  f67f		       c9 14		      CMP	#20
   2267  f681		       d0 12		      BNE	.skipL083
   2268  f683				   .condpart30
   2269  f683		       a5 e8		      LDA	winflag
   2270  f685		       c9 01		      CMP	#1
   2271  f687		       d0 0c		      BNE	.skip30then
   2272  f689				   .condpart31
   2273  f689		       a2 60		      LDX	#<player31then_1
   2274  f68b		       86 8c		      STX	player1pointerlo
   2275  f68d		       a9 fe		      LDA	#>player31then_1
   2276  f68f		       85 8d		      STA	player1pointerhi
   2277  f691		       a9 17		      LDA	#23
   2278  f693		       85 8f		      STA	player1height
   2279  f695				   .skip30then
   2280  f695				   .skipL083
   2281  f695				   .
   2282  f695							; 
   2283  f695
   2284  f695				   .L084		;  if monsterSprite  =  30  &&  winflag  =  1 then player1:
   2285  f695
   2286  f695		       a5 e0		      LDA	monsterSprite
   2287  f697		       c9 1e		      CMP	#30
   2288  f699		       d0 12		      BNE	.skipL084
   2289  f69b				   .condpart32
   2290  f69b		       a5 e8		      LDA	winflag
   2291  f69d		       c9 01		      CMP	#1
   2292  f69f		       d0 0c		      BNE	.skip32then
   2293  f6a1				   .condpart33
   2294  f6a1		       a2 78		      LDX	#<player33then_1
   2295  f6a3		       86 8c		      STX	player1pointerlo
   2296  f6a5		       a9 fe		      LDA	#>player33then_1
   2297  f6a7		       85 8d		      STA	player1pointerhi
   2298  f6a9		       a9 17		      LDA	#23
   2299  f6ab		       85 8f		      STA	player1height
   2300  f6ad				   .skip32then
   2301  f6ad				   .skipL084
   2302  f6ad				   .
   2303  f6ad							; 
   2304  f6ad
   2305  f6ad				   .L085		;  rem monster stage 3
   2306  f6ad
   2307  f6ad				   .L086		;  if monsterSprite  =  10  &&  winflag  =  2 then player1: 
   2308  f6ad
   2309  f6ad		       a5 e0		      LDA	monsterSprite
   2310  f6af		       c9 0a		      CMP	#10
   2311  f6b1		       d0 12		      BNE	.skipL086
   2312  f6b3				   .condpart34
   2313  f6b3		       a5 e8		      LDA	winflag
   2314  f6b5		       c9 02		      CMP	#2
   2315  f6b7		       d0 0c		      BNE	.skip34then
   2316  f6b9				   .condpart35
   2317  f6b9		       a2 90		      LDX	#<player35then_1
   2318  f6bb		       86 8c		      STX	player1pointerlo
   2319  f6bd		       a9 fe		      LDA	#>player35then_1
   2320  f6bf		       85 8d		      STA	player1pointerhi
   2321  f6c1		       a9 17		      LDA	#23
   2322  f6c3		       85 8f		      STA	player1height
   2323  f6c5				   .skip34then
   2324  f6c5				   .skipL086
   2325  f6c5				   .
   2326  f6c5							; 
   2327  f6c5
   2328  f6c5				   .L087		;  if monsterSprite  =  20  &&  winflag  =  2 then player1:
   2329  f6c5
   2330  f6c5		       a5 e0		      LDA	monsterSprite
   2331  f6c7		       c9 14		      CMP	#20
   2332  f6c9		       d0 12		      BNE	.skipL087
   2333  f6cb				   .condpart36
   2334  f6cb		       a5 e8		      LDA	winflag
   2335  f6cd		       c9 02		      CMP	#2
   2336  f6cf		       d0 0c		      BNE	.skip36then
   2337  f6d1				   .condpart37
   2338  f6d1		       a2 a8		      LDX	#<player37then_1
   2339  f6d3		       86 8c		      STX	player1pointerlo
   2340  f6d5		       a9 fe		      LDA	#>player37then_1
   2341  f6d7		       85 8d		      STA	player1pointerhi
   2342  f6d9		       a9 17		      LDA	#23
   2343  f6db		       85 8f		      STA	player1height
   2344  f6dd				   .skip36then
   2345  f6dd				   .skipL087
   2346  f6dd				   .
   2347  f6dd							; 
   2348  f6dd
   2349  f6dd				   .L088		;  if monsterSprite  =  30  &&  winflag  =  2 then player1:
   2350  f6dd
   2351  f6dd		       a5 e0		      LDA	monsterSprite
   2352  f6df		       c9 1e		      CMP	#30
   2353  f6e1		       d0 12		      BNE	.skipL088
   2354  f6e3				   .condpart38
   2355  f6e3		       a5 e8		      LDA	winflag
   2356  f6e5		       c9 02		      CMP	#2
   2357  f6e7		       d0 0c		      BNE	.skip38then
   2358  f6e9				   .condpart39
   2359  f6e9		       a2 c0		      LDX	#<player39then_1
   2360  f6eb		       86 8c		      STX	player1pointerlo
   2361  f6ed		       a9 fe		      LDA	#>player39then_1
   2362  f6ef		       85 8d		      STA	player1pointerhi
   2363  f6f1		       a9 17		      LDA	#23
   2364  f6f3		       85 8f		      STA	player1height
   2365  f6f5				   .skip38then
   2366  f6f5				   .skipL088
   2367  f6f5				   .
   2368  f6f5							; 
   2369  f6f5
   2370  f6f5				   .
   2371  f6f5							; 
   2372  f6f5
   2373  f6f5				   .L089		;  rem ---------------------------------------------------------------------------------
   2374  f6f5
   2375  f6f5				   .L090		;  if winflag	=  0 then playfield:
   2376  f6f5
   2377  f6f5		       a5 e8		      LDA	winflag
   2378  f6f7		       c9 00		      CMP	#0
   2379  f6f9		       d0 39		      BNE	.skipL090
   2380  f6fb				   .condpart40
   2381  f6fb				  -	      ifconst	pfres
   2382  f6fb				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2383  f6fb					      else
   2384  f6fb		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2385  f6fd					      endif
   2386  f6fd		       4c 2c f7 	      jmp	pflabel1
   2387  f700				   PF_data1
   2388  f700		       ff ff		      .byte.b	%11111111, %11111111
   2389  f702					      if	(pfwidth>2)
   2390  f702		       ff ff		      .byte.b	%11111111, %11111111
   2391  f704					      endif
   2392  f704		       80 00		      .byte.b	%10000000, %00000000
   2393  f706					      if	(pfwidth>2)
   2394  f706		       00 80		      .byte.b	%00000000, %10000000
   2395  f708					      endif
   2396  f708		       80 00		      .byte.b	%10000000, %00000000
   2397  f70a					      if	(pfwidth>2)
   2398  f70a		       00 80		      .byte.b	%00000000, %10000000
   2399  f70c					      endif
   2400  f70c		       80 00		      .byte.b	%10000000, %00000000
   2401  f70e					      if	(pfwidth>2)
   2402  f70e		       00 80		      .byte.b	%00000000, %10000000
   2403  f710					      endif
   2404  f710		       80 00		      .byte.b	%10000000, %00000000
   2405  f712					      if	(pfwidth>2)
   2406  f712		       00 80		      .byte.b	%00000000, %10000000
   2407  f714					      endif
   2408  f714		       80 00		      .byte.b	%10000000, %00000000
   2409  f716					      if	(pfwidth>2)
   2410  f716		       00 80		      .byte.b	%00000000, %10000000
   2411  f718					      endif
   2412  f718		       80 00		      .byte.b	%10000000, %00000000
   2413  f71a					      if	(pfwidth>2)
   2414  f71a		       00 80		      .byte.b	%00000000, %10000000
   2415  f71c					      endif
   2416  f71c		       80 36		      .byte.b	%10000000, %00110110
   2417  f71e					      if	(pfwidth>2)
   2418  f71e		       00 80		      .byte.b	%00000000, %10000000
   2419  f720					      endif
   2420  f720		       90 36		      .byte.b	%10010000, %00110110
   2421  f722					      if	(pfwidth>2)
   2422  f722		       20 84		      .byte.b	%00100000, %10000100
   2423  f724					      endif
   2424  f724		       da 36		      .byte.b	%11011010, %00110110
   2425  f726					      if	(pfwidth>2)
   2426  f726		       a9 a6		      .byte.b	%10101001, %10100110
   2427  f728					      endif
   2428  f728		       ff ff		      .byte.b	%11111111, %11111111
   2429  f72a					      if	(pfwidth>2)
   2430  f72a		       ff ff		      .byte.b	%11111111, %11111111
   2431  f72c					      endif
   2432  f72c				   pflabel1
   2433  f72c		       bd 00 f7 	      lda	PF_data1,x
   2434  f72f		       95 a4		      sta	playfield,x
   2435  f731		       ca		      dex
   2436  f732		       10 f8		      bpl	pflabel1
   2437  f734				   .skipL090
   2438  f734				   .
   2439  f734							; 
   2440  f734
   2441  f734				   .
   2442  f734							; 
   2443  f734
   2444  f734				   .L091		;  if winflag	=  1 then playfield:
   2445  f734
   2446  f734		       a5 e8		      LDA	winflag
   2447  f736		       c9 01		      CMP	#1
   2448  f738		       d0 39		      BNE	.skipL091
   2449  f73a				   .condpart41
   2450  f73a				  -	      ifconst	pfres
   2451  f73a				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2452  f73a					      else
   2453  f73a		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2454  f73c					      endif
   2455  f73c		       4c 6b f7 	      jmp	pflabel2
   2456  f73f				   PF_data2
   2457  f73f		       ff ff		      .byte.b	%11111111, %11111111
   2458  f741					      if	(pfwidth>2)
   2459  f741		       ff ff		      .byte.b	%11111111, %11111111
   2460  f743					      endif
   2461  f743		       80 00		      .byte.b	%10000000, %00000000
   2462  f745					      if	(pfwidth>2)
   2463  f745		       00 80		      .byte.b	%00000000, %10000000
   2464  f747					      endif
   2465  f747		       80 00		      .byte.b	%10000000, %00000000
   2466  f749					      if	(pfwidth>2)
   2467  f749		       00 80		      .byte.b	%00000000, %10000000
   2468  f74b					      endif
   2469  f74b		       80 00		      .byte.b	%10000000, %00000000
   2470  f74d					      if	(pfwidth>2)
   2471  f74d		       00 80		      .byte.b	%00000000, %10000000
   2472  f74f					      endif
   2473  f74f		       80 00		      .byte.b	%10000000, %00000000
   2474  f751					      if	(pfwidth>2)
   2475  f751		       00 80		      .byte.b	%00000000, %10000000
   2476  f753					      endif
   2477  f753		       80 00		      .byte.b	%10000000, %00000000
   2478  f755					      if	(pfwidth>2)
   2479  f755		       00 80		      .byte.b	%00000000, %10000000
   2480  f757					      endif
   2481  f757		       80 00		      .byte.b	%10000000, %00000000
   2482  f759					      if	(pfwidth>2)
   2483  f759		       00 80		      .byte.b	%00000000, %10000000
   2484  f75b					      endif
   2485  f75b		       80 00		      .byte.b	%10000000, %00000000
   2486  f75d					      if	(pfwidth>2)
   2487  f75d		       00 80		      .byte.b	%00000000, %10000000
   2488  f75f					      endif
   2489  f75f		       81 02		      .byte.b	%10000001, %00000010
   2490  f761					      if	(pfwidth>2)
   2491  f761		       08 80		      .byte.b	%00001000, %10000000
   2492  f763					      endif
   2493  f763		       a9 52		      .byte.b	%10101001, %01010010
   2494  f765					      if	(pfwidth>2)
   2495  f765		       1c c0		      .byte.b	%00011100, %11000000
   2496  f767					      endif
   2497  f767		       ff ff		      .byte.b	%11111111, %11111111
   2498  f769					      if	(pfwidth>2)
   2499  f769		       ff ff		      .byte.b	%11111111, %11111111
   2500  f76b					      endif
   2501  f76b				   pflabel2
   2502  f76b		       bd 3f f7 	      lda	PF_data2,x
   2503  f76e		       95 a4		      sta	playfield,x
   2504  f770		       ca		      dex
   2505  f771		       10 f8		      bpl	pflabel2
   2506  f773				   .skipL091
   2507  f773				   .
   2508  f773							; 
   2509  f773
   2510  f773				   .L092		;  if winflag	=  2 then playfield:
   2511  f773
   2512  f773		       a5 e8		      LDA	winflag
   2513  f775		       c9 02		      CMP	#2
   2514  f777		       d0 39		      BNE	.skipL092
   2515  f779				   .condpart42
   2516  f779				  -	      ifconst	pfres
   2517  f779				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2518  f779					      else
   2519  f779		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2520  f77b					      endif
   2521  f77b		       4c aa f7 	      jmp	pflabel3
   2522  f77e				   PF_data3
   2523  f77e		       ff ff		      .byte.b	%11111111, %11111111
   2524  f780					      if	(pfwidth>2)
   2525  f780		       ff ff		      .byte.b	%11111111, %11111111
   2526  f782					      endif
   2527  f782		       80 00		      .byte.b	%10000000, %00000000
   2528  f784					      if	(pfwidth>2)
   2529  f784		       00 87		      .byte.b	%00000000, %10000111
   2530  f786					      endif
   2531  f786		       90 38		      .byte.b	%10010000, %00111000
   2532  f788					      if	(pfwidth>2)
   2533  f788		       00 84		      .byte.b	%00000000, %10000100
   2534  f78a					      endif
   2535  f78a		       80 44		      .byte.b	%10000000, %01000100
   2536  f78c					      if	(pfwidth>2)
   2537  f78c		       00 84		      .byte.b	%00000000, %10000100
   2538  f78e					      endif
   2539  f78e		       80 44		      .byte.b	%10000000, %01000100
   2540  f790					      if	(pfwidth>2)
   2541  f790		       00 80		      .byte.b	%00000000, %10000000
   2542  f792					      endif
   2543  f792		       80 38		      .byte.b	%10000000, %00111000
   2544  f794					      if	(pfwidth>2)
   2545  f794		       00 80		      .byte.b	%00000000, %10000000
   2546  f796					      endif
   2547  f796		       88 00		      .byte.b	%10001000, %00000000
   2548  f798					      if	(pfwidth>2)
   2549  f798		       00 80		      .byte.b	%00000000, %10000000
   2550  f79a					      endif
   2551  f79a		       98 00		      .byte.b	%10011000, %00000000
   2552  f79c					      if	(pfwidth>2)
   2553  f79c		       07 81		      .byte.b	%00000111, %10000001
   2554  f79e					      endif
   2555  f79e		       80 00		      .byte.b	%10000000, %00000000
   2556  f7a0					      if	(pfwidth>2)
   2557  f7a0		       07 81		      .byte.b	%00000111, %10000001
   2558  f7a2					      endif
   2559  f7a2		       80 00		      .byte.b	%10000000, %00000000
   2560  f7a4					      if	(pfwidth>2)
   2561  f7a4		       07 81		      .byte.b	%00000111, %10000001
   2562  f7a6					      endif
   2563  f7a6		       ff ff		      .byte.b	%11111111, %11111111
   2564  f7a8					      if	(pfwidth>2)
   2565  f7a8		       ff ff		      .byte.b	%11111111, %11111111
   2566  f7aa					      endif
   2567  f7aa				   pflabel3
   2568  f7aa		       bd 7e f7 	      lda	PF_data3,x
   2569  f7ad		       95 a4		      sta	playfield,x
   2570  f7af		       ca		      dex
   2571  f7b0		       10 f8		      bpl	pflabel3
   2572  f7b2				   .skipL092
   2573  f7b2				   .
   2574  f7b2							; 
   2575  f7b2
   2576  f7b2				   .
   2577  f7b2							; 
   2578  f7b2
   2579  f7b2				   .L093		;  rem ---------------------------------------------------------------------------------
   2580  f7b2
   2581  f7b2				   .L094		;  COLUP0 =  $70  +   ( rand  &  7 )	:  rem PLAYER COLUP0=<xx> sets the color of the player 0 sprite. Valid range is 0-254 , randomizes colors 
   2582  f7b2
   2583  f7b2							; complex statement detected
   2584  f7b2		       a9 70		      LDA	#$70
   2585  f7b4		       48		      PHA
   2586  f7b5		       20 b9 f3 	      jsr	randomize
   2587  f7b8		       29 07		      AND	#7
   2588  f7ba		       ba		      TSX
   2589  f7bb		       e8		      INX
   2590  f7bc		       9a		      TXS
   2591  f7bd		       18		      CLC
   2592  f7be		       75 00		      ADC	$00,x
   2593  f7c0		       85 06		      STA	COLUP0
   2594  f7c2				   .L095		;  COLUP1  =  $C0  +	( rand	&  7 )	 :  rem MONSTER COLUP0=<xx> sets the color of the player 0 sprite. Valid range is 0-254 , randomizes colors 
   2595  f7c2
   2596  f7c2							; complex statement detected
   2597  f7c2		       a9 c0		      LDA	#$C0
   2598  f7c4		       48		      PHA
   2599  f7c5		       20 b9 f3 	      jsr	randomize
   2600  f7c8		       29 07		      AND	#7
   2601  f7ca		       ba		      TSX
   2602  f7cb		       e8		      INX
   2603  f7cc		       9a		      TXS
   2604  f7cd		       18		      CLC
   2605  f7ce		       75 00		      ADC	$00,x
   2606  f7d0		       85 07		      STA	COLUP1
   2607  f7d2				   .L096		;  COLUPF  =  $A0  +	( rand	&  7 )	 :  rem PLAYFIELD You need to set a color for the playfield
   2608  f7d2
   2609  f7d2							; complex statement detected
   2610  f7d2		       a9 a0		      LDA	#$A0
   2611  f7d4		       48		      PHA
   2612  f7d5		       20 b9 f3 	      jsr	randomize
   2613  f7d8		       29 07		      AND	#7
   2614  f7da		       ba		      TSX
   2615  f7db		       e8		      INX
   2616  f7dc		       9a		      TXS
   2617  f7dd		       18		      CLC
   2618  f7de		       75 00		      ADC	$00,x
   2619  f7e0		       85 08		      STA	COLUPF
   2620  f7e2				   .L097		;  COLUBK  =  00  :  rem BACKGROUND BALCK Change the background color with COLUBK
   2621  f7e2
   2622  f7e2		       a9 00		      LDA	#00
   2623  f7e4		       85 09		      STA	COLUBK
   2624  f7e6				   .L098		;  rem ---------------------------------------------------------------------------------
   2625  f7e6
   2626  f7e6				   .
   2627  f7e6							; 
   2628  f7e6
   2629  f7e6				   .L099		;  if collision(missile1,player0) then player1x  =   ( rand  &  63 )	+  40  :  player0y  =	( rand	&  31 )   +  30  :  COLUBK  =  $46  +	( rand	&  2 )	 :  playerHealth  =  playerHealth  -  1  :  AUDV0  =  15  :  AUDC0  =  10  :  AUDF0  =	6  :  explosion_timer  =  30
   2630  f7e6
   2631  f7e6		       24 01		      bit	CXM1P
   2632  f7e8		       10 36		      BPL	.skipL099
   2633  f7ea				   .condpart43
   2634  f7ea							; complex statement detected
   2635  f7ea		       20 b9 f3 	      jsr	randomize
   2636  f7ed		       29 3f		      AND	#63
   2637  f7ef		       18		      CLC
   2638  f7f0		       69 28		      ADC	#40
   2639  f7f2		       85 81		      STA	player1x
   2640  f7f4							; complex statement detected
   2641  f7f4		       20 b9 f3 	      jsr	randomize
   2642  f7f7		       29 1f		      AND	#31
   2643  f7f9		       18		      CLC
   2644  f7fa		       69 1e		      ADC	#30
   2645  f7fc		       85 85		      STA	player0y
   2646  f7fe							; complex statement detected
   2647  f7fe		       a9 46		      LDA	#$46
   2648  f800		       48		      PHA
   2649  f801		       20 b9 f3 	      jsr	randomize
   2650  f804		       29 02		      AND	#2
   2651  f806		       ba		      TSX
   2652  f807		       e8		      INX
   2653  f808		       9a		      TXS
   2654  f809		       18		      CLC
   2655  f80a		       75 00		      ADC	$00,x
   2656  f80c		       85 09		      STA	COLUBK
   2657  f80e		       c6 dd		      DEC	playerHealth
   2658  f810		       a9 0f		      LDA	#15
   2659  f812		       85 19		      STA	AUDV0
   2660  f814		       a9 0a		      LDA	#10
   2661  f816		       85 15		      STA	AUDC0
   2662  f818		       a9 06		      LDA	#6
   2663  f81a		       85 17		      STA	AUDF0
   2664  f81c		       a9 1e		      LDA	#30
   2665  f81e		       85 d4		      STA	explosion_timer
   2666  f820				   .skipL099
   2667  f820				   .L0100		;  if collision(missile0,player1) then player1x  =   ( rand  &  63 )	+  40  :  player1y  =	( rand	&  31 )   +  30  :  missile1y  =   ( rand  &  31 )   +	30  :  COLUBK  =  $46  +   ( rand  &  2 )   :  AUDV0  =  15  :	AUDC0  =  10  :  AUDF0	=  6  :  explosion_timer  =  30
   2668  f820
   2669  f820		       24 00		      bit	CXM0P
   2670  f822		       10 3e		      BPL	.skipL0100
   2671  f824				   .condpart44
   2672  f824							; complex statement detected
   2673  f824		       20 b9 f3 	      jsr	randomize
   2674  f827		       29 3f		      AND	#63
   2675  f829		       18		      CLC
   2676  f82a		       69 28		      ADC	#40
   2677  f82c		       85 81		      STA	player1x
   2678  f82e							; complex statement detected
   2679  f82e		       20 b9 f3 	      jsr	randomize
   2680  f831		       29 1f		      AND	#31
   2681  f833		       18		      CLC
   2682  f834		       69 1e		      ADC	#30
   2683  f836		       85 86		      STA	player1y
   2684  f838							; complex statement detected
   2685  f838		       20 b9 f3 	      jsr	randomize
   2686  f83b		       29 1f		      AND	#31
   2687  f83d		       18		      CLC
   2688  f83e		       69 1e		      ADC	#30
   2689  f840		       85 88		      STA	missile1y
   2690  f842							; complex statement detected
   2691  f842		       a9 46		      LDA	#$46
   2692  f844		       48		      PHA
   2693  f845		       20 b9 f3 	      jsr	randomize
   2694  f848		       29 02		      AND	#2
   2695  f84a		       ba		      TSX
   2696  f84b		       e8		      INX
   2697  f84c		       9a		      TXS
   2698  f84d		       18		      CLC
   2699  f84e		       75 00		      ADC	$00,x
   2700  f850		       85 09		      STA	COLUBK
   2701  f852		       a9 0f		      LDA	#15
   2702  f854		       85 19		      STA	AUDV0
   2703  f856		       a9 0a		      LDA	#10
   2704  f858		       85 15		      STA	AUDC0
   2705  f85a		       a9 06		      LDA	#6
   2706  f85c		       85 17		      STA	AUDF0
   2707  f85e		       a9 1e		      LDA	#30
   2708  f860		       85 d4		      STA	explosion_timer
   2709  f862				   .skipL0100
   2710  f862				   .
   2711  f862							; 
   2712  f862
   2713  f862				   .L0101		;  rem ---------------------------------------------------------------------------------
   2714  f862
   2715  f862				   .L0102		;  if collision(player0,playfield) then gosub knock_player_back  :  rem if player collides with playfield knockback
   2716  f862
   2717  f862		       24 02		      bit	CXP0FB
   2718  f864		       10 03		      BPL	.skipL0102
   2719  f866				   .condpart45
   2720  f866		       20 05 fd 	      jsr	.knock_player_back
   2721  f869				   .skipL0102
   2722  f869				   .
   2723  f869							; 
   2724  f869
   2725  f869				   .L0103		;  rem ---------------------------------------------------------------------------------
   2726  f869
   2727  f869				   .L0104		;  if joy0fire then AUDV0  =  12  :  AUDC0  =	10  :  AUDF0  =  19  :	rem Play a sound
   2728  f869
   2729  f869		       24 0c		      bit	INPT4
   2730  f86b		       30 0c		      BMI	.skipL0104
   2731  f86d				   .condpart46
   2732  f86d		       a9 0c		      LDA	#12
   2733  f86f		       85 19		      STA	AUDV0
   2734  f871		       a9 0a		      LDA	#10
   2735  f873		       85 15		      STA	AUDC0
   2736  f875		       a9 13		      LDA	#19
   2737  f877		       85 17		      STA	AUDF0
   2738  f879				   .skipL0104
   2739  f879				   .L0105		;  if !joy0fire then AUDV0  =	0  :  rem Stop the sound when fire is released
   2740  f879
   2741  f879		       24 0c		      bit	INPT4
   2742  f87b		       10 04		      BPL	.skipL0105
   2743  f87d				   .condpart47
   2744  f87d		       a9 00		      LDA	#0
   2745  f87f		       85 19		      STA	AUDV0
   2746  f881				   .skipL0105
   2747  f881				   .L0106		;  if collision(player0,player1) then player1x  =   ( rand  &	63 )   +  40  :  player1y  =   ( rand  &  31 )	 +  30	:  missile1y  =   ( rand  &  31 )   +  30  :  COLUBK  =  $46  +   ( rand  &  2 )   :  playerHealth  =  playerHealth  -	1  :  AUDV0  =	15  :  AUDC0  =  10  :	AUDF0  =  6  :	explosion_timer  =  30
   2748  f881
   2749  f881		       24 07		      bit	CXPPMM
   2750  f883		       10 40		      BPL	.skipL0106
   2751  f885				   .condpart48
   2752  f885							; complex statement detected
   2753  f885		       20 b9 f3 	      jsr	randomize
   2754  f888		       29 3f		      AND	#63
   2755  f88a		       18		      CLC
   2756  f88b		       69 28		      ADC	#40
   2757  f88d		       85 81		      STA	player1x
   2758  f88f							; complex statement detected
   2759  f88f		       20 b9 f3 	      jsr	randomize
   2760  f892		       29 1f		      AND	#31
   2761  f894		       18		      CLC
   2762  f895		       69 1e		      ADC	#30
   2763  f897		       85 86		      STA	player1y
   2764  f899							; complex statement detected
   2765  f899		       20 b9 f3 	      jsr	randomize
   2766  f89c		       29 1f		      AND	#31
   2767  f89e		       18		      CLC
   2768  f89f		       69 1e		      ADC	#30
   2769  f8a1		       85 88		      STA	missile1y
   2770  f8a3							; complex statement detected
   2771  f8a3		       a9 46		      LDA	#$46
   2772  f8a5		       48		      PHA
   2773  f8a6		       20 b9 f3 	      jsr	randomize
   2774  f8a9		       29 02		      AND	#2
   2775  f8ab		       ba		      TSX
   2776  f8ac		       e8		      INX
   2777  f8ad		       9a		      TXS
   2778  f8ae		       18		      CLC
   2779  f8af		       75 00		      ADC	$00,x
   2780  f8b1		       85 09		      STA	COLUBK
   2781  f8b3		       c6 dd		      DEC	playerHealth
   2782  f8b5		       a9 0f		      LDA	#15
   2783  f8b7		       85 19		      STA	AUDV0
   2784  f8b9		       a9 0a		      LDA	#10
   2785  f8bb		       85 15		      STA	AUDC0
   2786  f8bd		       a9 06		      LDA	#6
   2787  f8bf		       85 17		      STA	AUDF0
   2788  f8c1		       a9 1e		      LDA	#30
   2789  f8c3		       85 d4		      STA	explosion_timer
   2790  f8c5				   .skipL0106
   2791  f8c5				   .
   2792  f8c5							; 
   2793  f8c5
   2794  f8c5				   .L0107		;  rem ---------------------------------------------------------------------------------
   2795  f8c5
   2796  f8c5				   .L0108		;  if explosion_timer	>  0 then explosion_timer  =  explosion_timer  -  1  :	if explosion_timer  =  20 then AUDF0  =  8  :  if explosion_timer  =  10 then AUDF0  =	12
   2797  f8c5
   2798  f8c5		       a9 00		      LDA	#0
   2799  f8c7		       c5 d4		      CMP	explosion_timer
   2800  f8c9		       b0 16		      BCS	.skipL0108
   2801  f8cb				   .condpart49
   2802  f8cb		       c6 d4		      DEC	explosion_timer
   2803  f8cd		       a5 d4		      LDA	explosion_timer
   2804  f8cf		       c9 14		      CMP	#20
   2805  f8d1		       d0 0e		      BNE	.skip49then
   2806  f8d3				   .condpart50
   2807  f8d3		       a9 08		      LDA	#8
   2808  f8d5		       85 17		      STA	AUDF0
   2809  f8d7		       a5 d4		      LDA	explosion_timer
   2810  f8d9		       c9 0a		      CMP	#10
   2811  f8db		       d0 04		      BNE	.skip50then
   2812  f8dd				   .condpart51
   2813  f8dd		       a9 0c		      LDA	#12
   2814  f8df		       85 17		      STA	AUDF0
   2815  f8e1				   .skip50then
   2816  f8e1				   .skip49then
   2817  f8e1				   .skipL0108
   2818  f8e1				   .L0109		;  if explosion_timer	=  0 then AUDV0  =  0
   2819  f8e1
   2820  f8e1		       a5 d4		      LDA	explosion_timer
   2821  f8e3		       c9 00		      CMP	#0
   2822  f8e5		       d0 04		      BNE	.skipL0109
   2823  f8e7				   .condpart52
   2824  f8e7		       a9 00		      LDA	#0
   2825  f8e9		       85 19		      STA	AUDV0
   2826  f8eb				   .skipL0109
   2827  f8eb				   .
   2828  f8eb							; 
   2829  f8eb
   2830  f8eb				   .L0110		;  rem pill removal logic
   2831  f8eb
   2832  f8eb				   .L0111		;  if playerHealth  =	3 then pfscore1  =  %00101010
   2833  f8eb
   2834  f8eb		       a5 dd		      LDA	playerHealth
   2835  f8ed		       c9 03		      CMP	#3
   2836  f8ef		       d0 04		      BNE	.skipL0111
   2837  f8f1				   .condpart53
   2838  f8f1		       a9 2a		      LDA	#%00101010
   2839  f8f3		       85 f2		      STA	pfscore1
   2840  f8f5				   .skipL0111
   2841  f8f5				   .L0112		;  if playerHealth  =	2 then pfscore1  =  %00001010
   2842  f8f5
   2843  f8f5		       a5 dd		      LDA	playerHealth
   2844  f8f7		       c9 02		      CMP	#2
   2845  f8f9		       d0 04		      BNE	.skipL0112
   2846  f8fb				   .condpart54
   2847  f8fb		       a9 0a		      LDA	#%00001010
   2848  f8fd		       85 f2		      STA	pfscore1
   2849  f8ff				   .skipL0112
   2850  f8ff				   .L0113		;  if playerHealth  =	1 then pfscore1  =  %00000010
   2851  f8ff
   2852  f8ff		       a5 dd		      LDA	playerHealth
   2853  f901		       c9 01		      CMP	#1
   2854  f903		       d0 04		      BNE	.skipL0113
   2855  f905				   .condpart55
   2856  f905		       a9 02		      LDA	#%00000010
   2857  f907		       85 f2		      STA	pfscore1
   2858  f909				   .skipL0113
   2859  f909				   .L0114		;  if playerHealth  =	0 then pfscore1  =  %00000000
   2860  f909
   2861  f909		       a5 dd		      LDA	playerHealth
   2862  f90b		       c9 00		      CMP	#0
   2863  f90d		       d0 04		      BNE	.skipL0114
   2864  f90f				   .condpart56
   2865  f90f		       a9 00		      LDA	#%00000000
   2866  f911		       85 f2		      STA	pfscore1
   2867  f913				   .skipL0114
   2868  f913				   .
   2869  f913							; 
   2870  f913
   2871  f913				   .L0115		;  rem monster health bar
   2872  f913
   2873  f913				   .L0116		;  if monsterHealth  =  3 then pfscore2  =  %00101010
   2874  f913
   2875  f913		       a5 e3		      LDA	monsterHealth
   2876  f915		       c9 03		      CMP	#3
   2877  f917		       d0 04		      BNE	.skipL0116
   2878  f919				   .condpart57
   2879  f919		       a9 2a		      LDA	#%00101010
   2880  f91b		       85 f3		      STA	pfscore2
   2881  f91d				   .skipL0116
   2882  f91d				   .L0117		;  if monsterHealth  =  2 then pfscore2  =  %00001010
   2883  f91d
   2884  f91d		       a5 e3		      LDA	monsterHealth
   2885  f91f		       c9 02		      CMP	#2
   2886  f921		       d0 04		      BNE	.skipL0117
   2887  f923				   .condpart58
   2888  f923		       a9 0a		      LDA	#%00001010
   2889  f925		       85 f3		      STA	pfscore2
   2890  f927				   .skipL0117
   2891  f927				   .L0118		;  if monsterHealth  =  1 then pfscore2  =  %00000010
   2892  f927
   2893  f927		       a5 e3		      LDA	monsterHealth
   2894  f929		       c9 01		      CMP	#1
   2895  f92b		       d0 04		      BNE	.skipL0118
   2896  f92d				   .condpart59
   2897  f92d		       a9 02		      LDA	#%00000010
   2898  f92f		       85 f3		      STA	pfscore2
   2899  f931				   .skipL0118
   2900  f931				   .L0119		;  if monsterHealth  =  0 then pfscore2  =  %00000000	:  winflag  =  winflag	+  1  :  monsterHealth	=  30  :  playerHealth	=  4  :  rem iterate levels and reset player health
   2901  f931
   2902  f931		       a5 e3		      LDA	monsterHealth
   2903  f933		       c9 00		      CMP	#0
   2904  f935		       d0 0e		      BNE	.skipL0119
   2905  f937				   .condpart60
   2906  f937		       a9 00		      LDA	#%00000000
   2907  f939		       85 f3		      STA	pfscore2
   2908  f93b		       e6 e8		      INC	winflag
   2909  f93d		       a9 1e		      LDA	#30
   2910  f93f		       85 e3		      STA	monsterHealth
   2911  f941		       a9 04		      LDA	#4
   2912  f943		       85 dd		      STA	playerHealth
   2913  f945				   .skipL0119
   2914  f945				   .L0120		;  rem ---------------------------------------------------------------------------------
   2915  f945
   2916  f945				   .L0121		;  if winflag	=  3 then AUDV0  =  0  :  explosion_timer  =  0  :  goto win  :  rem if beaten 3rd monster win the game
   2917  f945
   2918  f945		       a5 e8		      LDA	winflag
   2919  f947		       c9 03		      CMP	#3
   2920  f949		       d0 09		      BNE	.skipL0121
   2921  f94b				   .condpart61
   2922  f94b		       a9 00		      LDA	#0
   2923  f94d		       85 19		      STA	AUDV0
   2924  f94f		       85 d4		      STA	explosion_timer
   2925  f951		       4c 14 fd 	      jmp	.win
   2926  f954				   .skipL0121
   2927  f954				   .L0122		;  if playerHealth  =	0 then AUDV0  =  0  :  goto lose  :  rem player get hit 5 times lose
   2928  f954
   2929  f954		       a5 dd		      LDA	playerHealth
   2930  f956		       c9 00		      CMP	#0
   2931  f958		       d0 07		      BNE	.skipL0122
   2932  f95a				   .condpart62
   2933  f95a		       a9 00		      LDA	#0
   2934  f95c		       85 19		      STA	AUDV0
   2935  f95e		       4c 63 fd 	      jmp	.lose
   2936  f961				   .skipL0122
   2937  f961				   .L0123		;  rem ---------------------------------------------------------------------------------
   2938  f961
   2939  f961				   .L0124		;  p0x  =  0  :  rem player movement sprite left & right
   2940  f961
   2941  f961		       a9 00		      LDA	#0
   2942  f963		       85 d9		      STA	p0x
   2943  f965				   .L0125		;  if joy0left then p0x  =  255
   2944  f965
   2945  f965		       2c 80 02 	      bit	SWCHA
   2946  f968		       70 04		      BVS	.skipL0125
   2947  f96a				   .condpart63
   2948  f96a		       a9 ff		      LDA	#255
   2949  f96c		       85 d9		      STA	p0x
   2950  f96e				   .skipL0125
   2951  f96e				   .L0126		;  if joy0right then p0x  =  1
   2952  f96e
   2953  f96e		       2c 80 02 	      bit	SWCHA
   2954  f971		       30 04		      BMI	.skipL0126
   2955  f973				   .condpart64
   2956  f973		       a9 01		      LDA	#1
   2957  f975		       85 d9		      STA	p0x
   2958  f977				   .skipL0126
   2959  f977				   .L0127		;  player0x  =  player0x  +  p0x
   2960  f977
   2961  f977		       a5 80		      LDA	player0x
   2962  f979		       18		      CLC
   2963  f97a		       65 d9		      ADC	p0x
   2964  f97c		       85 80		      STA	player0x
   2965  f97e				   .
   2966  f97e							; 
   2967  f97e
   2968  f97e				   .L0128		;  p0y  =  0  :  rem player movement sprite up & down
   2969  f97e
   2970  f97e		       a9 00		      LDA	#0
   2971  f980		       85 d7		      STA	p0y
   2972  f982				   .L0129		;  if joy0up then p0y	=  255
   2973  f982
   2974  f982		       a9 10		      lda	#$10
   2975  f984		       2c 80 02 	      bit	SWCHA
   2976  f987		       d0 04		      BNE	.skipL0129
   2977  f989				   .condpart65
   2978  f989		       a9 ff		      LDA	#255
   2979  f98b		       85 d7		      STA	p0y
   2980  f98d				   .skipL0129
   2981  f98d				   .L0130		;  if joy0down then p0y  =  1
   2982  f98d
   2983  f98d		       a9 20		      lda	#$20
   2984  f98f		       2c 80 02 	      bit	SWCHA
   2985  f992		       d0 04		      BNE	.skipL0130
   2986  f994				   .condpart66
   2987  f994		       a9 01		      LDA	#1
   2988  f996		       85 d7		      STA	p0y
   2989  f998				   .skipL0130
   2990  f998				   .L0131		;  player0y  =  player0y  +  p0y
   2991  f998
   2992  f998		       a5 85		      LDA	player0y
   2993  f99a		       18		      CLC
   2994  f99b		       65 d7		      ADC	p0y
   2995  f99d		       85 85		      STA	player0y
   2996  f99f				   .
   2997  f99f							; 
   2998  f99f
   2999  f99f				   .L0132		;  rem ---------------------------------------------------------------------------------
   3000  f99f
   3001  f99f				   .L0133		;  rem This section sets a value for the last direction the joystick was pushed
   3002  f99f
   3003  f99f				   .L0134		;  rem
   3004  f99f
   3005  f99f				   .L0135		;  rem  This determines the direction the bullet will be fired later, and also
   3006  f99f
   3007  f99f				   .L0136		;  rem  allows you to keep firing the bullet in the same direction after you
   3008  f99f
   3009  f99f				   .L0137		;  rem  have stopped moving.
   3010  f99f
   3011  f99f				   .L0138		;  rem
   3012  f99f
   3013  f99f				   .L0139		;  rem  Each time you move, each of the eight possible directions of the joystick is
   3014  f99f
   3015  f99f				   .L0140		;  rem  marked as on or off with a bit variable.
   3016  f99f
   3017  f99f				   .L0141		;  rem ---------------------------------------------------------------------------------
   3018  f99f
   3019  f99f				   .
   3020  f99f							; 
   3021  f99f
   3022  f99f				   .L0142		;  if joy0up then c{1} = 1 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   3023  f99f
   3024  f99f		       a9 10		      lda	#$10
   3025  f9a1		       2c 80 02 	      bit	SWCHA
   3026  f9a4		       d0 30		      BNE	.skipL0142
   3027  f9a6				   .condpart67
   3028  f9a6		       a5 d6		      LDA	c
   3029  f9a8		       09 02		      ORA	#2
   3030  f9aa		       85 d6		      STA	c
   3031  f9ac		       a5 d6		      LDA	c
   3032  f9ae		       29 fb		      AND	#251
   3033  f9b0		       85 d6		      STA	c
   3034  f9b2		       a5 d6		      LDA	c
   3035  f9b4		       29 f7		      AND	#247
   3036  f9b6		       85 d6		      STA	c
   3037  f9b8		       a5 d6		      LDA	c
   3038  f9ba		       29 ef		      AND	#239
   3039  f9bc		       85 d6		      STA	c
   3040  f9be		       a5 d6		      LDA	c
   3041  f9c0		       29 df		      AND	#223
   3042  f9c2		       85 d6		      STA	c
   3043  f9c4		       a5 d6		      LDA	c
   3044  f9c6		       29 bf		      AND	#191
   3045  f9c8		       85 d6		      STA	c
   3046  f9ca		       a5 d6		      LDA	c
   3047  f9cc		       29 7f		      AND	#127
   3048  f9ce		       85 d6		      STA	c
   3049  f9d0		       a5 d6		      LDA	c
   3050  f9d2		       29 fe		      AND	#254
   3051  f9d4		       85 d6		      STA	c
   3052  f9d6				   .skipL0142
   3053  f9d6				   .L0143		;  if joy0down then c{1} = 0 : c{2} = 1 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   3054  f9d6
   3055  f9d6		       a9 20		      lda	#$20
   3056  f9d8		       2c 80 02 	      bit	SWCHA
   3057  f9db		       d0 30		      BNE	.skipL0143
   3058  f9dd				   .condpart68
   3059  f9dd		       a5 d6		      LDA	c
   3060  f9df		       29 fd		      AND	#253
   3061  f9e1		       85 d6		      STA	c
   3062  f9e3		       a5 d6		      LDA	c
   3063  f9e5		       09 04		      ORA	#4
   3064  f9e7		       85 d6		      STA	c
   3065  f9e9		       a5 d6		      LDA	c
   3066  f9eb		       29 f7		      AND	#247
   3067  f9ed		       85 d6		      STA	c
   3068  f9ef		       a5 d6		      LDA	c
   3069  f9f1		       29 ef		      AND	#239
   3070  f9f3		       85 d6		      STA	c
   3071  f9f5		       a5 d6		      LDA	c
   3072  f9f7		       29 df		      AND	#223
   3073  f9f9		       85 d6		      STA	c
   3074  f9fb		       a5 d6		      LDA	c
   3075  f9fd		       29 bf		      AND	#191
   3076  f9ff		       85 d6		      STA	c
   3077  fa01		       a5 d6		      LDA	c
   3078  fa03		       29 7f		      AND	#127
   3079  fa05		       85 d6		      STA	c
   3080  fa07		       a5 d6		      LDA	c
   3081  fa09		       29 fe		      AND	#254
   3082  fa0b		       85 d6		      STA	c
   3083  fa0d				   .skipL0143
   3084  fa0d				   .L0144		;  if joy0left then c{1} = 0 : c{2} = 0 : c{3} = 1 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   3085  fa0d
   3086  fa0d		       2c 80 02 	      bit	SWCHA
   3087  fa10		       70 30		      BVS	.skipL0144
   3088  fa12				   .condpart69
   3089  fa12		       a5 d6		      LDA	c
   3090  fa14		       29 fd		      AND	#253
   3091  fa16		       85 d6		      STA	c
   3092  fa18		       a5 d6		      LDA	c
   3093  fa1a		       29 fb		      AND	#251
   3094  fa1c		       85 d6		      STA	c
   3095  fa1e		       a5 d6		      LDA	c
   3096  fa20		       09 08		      ORA	#8
   3097  fa22		       85 d6		      STA	c
   3098  fa24		       a5 d6		      LDA	c
   3099  fa26		       29 ef		      AND	#239
   3100  fa28		       85 d6		      STA	c
   3101  fa2a		       a5 d6		      LDA	c
   3102  fa2c		       29 df		      AND	#223
   3103  fa2e		       85 d6		      STA	c
   3104  fa30		       a5 d6		      LDA	c
   3105  fa32		       29 bf		      AND	#191
   3106  fa34		       85 d6		      STA	c
   3107  fa36		       a5 d6		      LDA	c
   3108  fa38		       29 7f		      AND	#127
   3109  fa3a		       85 d6		      STA	c
   3110  fa3c		       a5 d6		      LDA	c
   3111  fa3e		       29 fe		      AND	#254
   3112  fa40		       85 d6		      STA	c
   3113  fa42				   .skipL0144
   3114  fa42				   .L0145		;  if joy0right then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 1 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 0
   3115  fa42
   3116  fa42		       2c 80 02 	      bit	SWCHA
   3117  fa45		       30 30		      BMI	.skipL0145
   3118  fa47				   .condpart70
   3119  fa47		       a5 d6		      LDA	c
   3120  fa49		       29 fd		      AND	#253
   3121  fa4b		       85 d6		      STA	c
   3122  fa4d		       a5 d6		      LDA	c
   3123  fa4f		       29 fb		      AND	#251
   3124  fa51		       85 d6		      STA	c
   3125  fa53		       a5 d6		      LDA	c
   3126  fa55		       29 f7		      AND	#247
   3127  fa57		       85 d6		      STA	c
   3128  fa59		       a5 d6		      LDA	c
   3129  fa5b		       09 10		      ORA	#16
   3130  fa5d		       85 d6		      STA	c
   3131  fa5f		       a5 d6		      LDA	c
   3132  fa61		       29 df		      AND	#223
   3133  fa63		       85 d6		      STA	c
   3134  fa65		       a5 d6		      LDA	c
   3135  fa67		       29 bf		      AND	#191
   3136  fa69		       85 d6		      STA	c
   3137  fa6b		       a5 d6		      LDA	c
   3138  fa6d		       29 7f		      AND	#127
   3139  fa6f		       85 d6		      STA	c
   3140  fa71		       a5 d6		      LDA	c
   3141  fa73		       29 fe		      AND	#254
   3142  fa75		       85 d6		      STA	c
   3143  fa77				   .skipL0145
   3144  fa77				   .L0146		;  if joy0up  &&  joy0left then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 1 : c{6} = 0 : c{7} = 0 : c{0} = 0
   3145  fa77
   3146  fa77		       a9 10		      lda	#$10
   3147  fa79		       2c 80 02 	      bit	SWCHA
   3148  fa7c		       d0 35		      BNE	.skipL0146
   3149  fa7e				   .condpart71
   3150  fa7e		       2c 80 02 	      bit	SWCHA
   3151  fa81		       70 30		      BVS	.skip71then
   3152  fa83				   .condpart72
   3153  fa83		       a5 d6		      LDA	c
   3154  fa85		       29 fd		      AND	#253
   3155  fa87		       85 d6		      STA	c
   3156  fa89		       a5 d6		      LDA	c
   3157  fa8b		       29 fb		      AND	#251
   3158  fa8d		       85 d6		      STA	c
   3159  fa8f		       a5 d6		      LDA	c
   3160  fa91		       29 f7		      AND	#247
   3161  fa93		       85 d6		      STA	c
   3162  fa95		       a5 d6		      LDA	c
   3163  fa97		       29 ef		      AND	#239
   3164  fa99		       85 d6		      STA	c
   3165  fa9b		       a5 d6		      LDA	c
   3166  fa9d		       09 20		      ORA	#32
   3167  fa9f		       85 d6		      STA	c
   3168  faa1		       a5 d6		      LDA	c
   3169  faa3		       29 bf		      AND	#191
   3170  faa5		       85 d6		      STA	c
   3171  faa7		       a5 d6		      LDA	c
   3172  faa9		       29 7f		      AND	#127
   3173  faab		       85 d6		      STA	c
   3174  faad		       a5 d6		      LDA	c
   3175  faaf		       29 fe		      AND	#254
   3176  fab1		       85 d6		      STA	c
   3177  fab3				   .skip71then
   3178  fab3				   .skipL0146
   3179  fab3				   .L0147		;  if joy0up  &&  joy0right then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 1 : c{7} = 0 : c{0} = 0
   3180  fab3
   3181  fab3		       a9 10		      lda	#$10
   3182  fab5		       2c 80 02 	      bit	SWCHA
   3183  fab8		       d0 35		      BNE	.skipL0147
   3184  faba				   .condpart73
   3185  faba		       2c 80 02 	      bit	SWCHA
   3186  fabd		       30 30		      BMI	.skip73then
   3187  fabf				   .condpart74
   3188  fabf		       a5 d6		      LDA	c
   3189  fac1		       29 fd		      AND	#253
   3190  fac3		       85 d6		      STA	c
   3191  fac5		       a5 d6		      LDA	c
   3192  fac7		       29 fb		      AND	#251
   3193  fac9		       85 d6		      STA	c
   3194  facb		       a5 d6		      LDA	c
   3195  facd		       29 f7		      AND	#247
   3196  facf		       85 d6		      STA	c
   3197  fad1		       a5 d6		      LDA	c
   3198  fad3		       29 ef		      AND	#239
   3199  fad5		       85 d6		      STA	c
   3200  fad7		       a5 d6		      LDA	c
   3201  fad9		       29 df		      AND	#223
   3202  fadb		       85 d6		      STA	c
   3203  fadd		       a5 d6		      LDA	c
   3204  fadf		       09 40		      ORA	#64
   3205  fae1		       85 d6		      STA	c
   3206  fae3		       a5 d6		      LDA	c
   3207  fae5		       29 7f		      AND	#127
   3208  fae7		       85 d6		      STA	c
   3209  fae9		       a5 d6		      LDA	c
   3210  faeb		       29 fe		      AND	#254
   3211  faed		       85 d6		      STA	c
   3212  faef				   .skip73then
   3213  faef				   .skipL0147
   3214  faef				   .L0148		;  if joy0down  &&  joy0left then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 1 : c{0} = 0
   3215  faef
   3216  faef		       a9 20		      lda	#$20
   3217  faf1		       2c 80 02 	      bit	SWCHA
   3218  faf4		       d0 35		      BNE	.skipL0148
   3219  faf6				   .condpart75
   3220  faf6		       2c 80 02 	      bit	SWCHA
   3221  faf9		       70 30		      BVS	.skip75then
   3222  fafb				   .condpart76
   3223  fafb		       a5 d6		      LDA	c
   3224  fafd		       29 fd		      AND	#253
   3225  faff		       85 d6		      STA	c
   3226  fb01		       a5 d6		      LDA	c
   3227  fb03		       29 fb		      AND	#251
   3228  fb05		       85 d6		      STA	c
   3229  fb07		       a5 d6		      LDA	c
   3230  fb09		       29 f7		      AND	#247
   3231  fb0b		       85 d6		      STA	c
   3232  fb0d		       a5 d6		      LDA	c
   3233  fb0f		       29 ef		      AND	#239
   3234  fb11		       85 d6		      STA	c
   3235  fb13		       a5 d6		      LDA	c
   3236  fb15		       29 df		      AND	#223
   3237  fb17		       85 d6		      STA	c
   3238  fb19		       a5 d6		      LDA	c
   3239  fb1b		       29 bf		      AND	#191
   3240  fb1d		       85 d6		      STA	c
   3241  fb1f		       a5 d6		      LDA	c
   3242  fb21		       09 80		      ORA	#128
   3243  fb23		       85 d6		      STA	c
   3244  fb25		       a5 d6		      LDA	c
   3245  fb27		       29 fe		      AND	#254
   3246  fb29		       85 d6		      STA	c
   3247  fb2b				   .skip75then
   3248  fb2b				   .skipL0148
   3249  fb2b				   .L0149		;  if joy0down  &&  joy0right then c{1} = 0 : c{2} = 0 : c{3} = 0 : c{4} = 0 : c{5} = 0 : c{6} = 0 : c{7} = 0 : c{0} = 1
   3250  fb2b
   3251  fb2b		       a9 20		      lda	#$20
   3252  fb2d		       2c 80 02 	      bit	SWCHA
   3253  fb30		       d0 35		      BNE	.skipL0149
   3254  fb32				   .condpart77
   3255  fb32		       2c 80 02 	      bit	SWCHA
   3256  fb35		       30 30		      BMI	.skip77then
   3257  fb37				   .condpart78
   3258  fb37		       a5 d6		      LDA	c
   3259  fb39		       29 fd		      AND	#253
   3260  fb3b		       85 d6		      STA	c
   3261  fb3d		       a5 d6		      LDA	c
   3262  fb3f		       29 fb		      AND	#251
   3263  fb41		       85 d6		      STA	c
   3264  fb43		       a5 d6		      LDA	c
   3265  fb45		       29 f7		      AND	#247
   3266  fb47		       85 d6		      STA	c
   3267  fb49		       a5 d6		      LDA	c
   3268  fb4b		       29 ef		      AND	#239
   3269  fb4d		       85 d6		      STA	c
   3270  fb4f		       a5 d6		      LDA	c
   3271  fb51		       29 df		      AND	#223
   3272  fb53		       85 d6		      STA	c
   3273  fb55		       a5 d6		      LDA	c
   3274  fb57		       29 bf		      AND	#191
   3275  fb59		       85 d6		      STA	c
   3276  fb5b		       a5 d6		      LDA	c
   3277  fb5d		       29 7f		      AND	#127
   3278  fb5f		       85 d6		      STA	c
   3279  fb61		       a5 d6		      LDA	c
   3280  fb63		       09 01		      ORA	#1
   3281  fb65		       85 d6		      STA	c
   3282  fb67				   .skip77then
   3283  fb67				   .skipL0149
   3284  fb67				   .
   3285  fb67							; 
   3286  fb67
   3287  fb67				   .L0150		;  rem ------------------------------------------------------------------
   3288  fb67
   3289  fb67				   .L0151		;  rem  Increase 20 to a larger number to make the bullets travel farther
   3290  fb67
   3291  fb67				   .L0152		;  rem ------------------------------------------------------------------
   3292  fb67
   3293  fb67				   .L0153		;  e = e + 1
   3294  fb67
   3295  fb67		       e6 d8		      INC	e
   3296  fb69				   .L0154		;  if e > 50 then e = 0
   3297  fb69
   3298  fb69		       a9 32		      LDA	#50
   3299  fb6b		       c5 d8		      CMP	e
   3300  fb6d		       b0 04		      BCS	.skipL0154
   3301  fb6f				   .condpart79
   3302  fb6f		       a9 00		      LDA	#0
   3303  fb71		       85 d8		      STA	e
   3304  fb73				   .skipL0154
   3305  fb73				   .L0155		;  rem ------------------------------------------------------------------
   3306  fb73
   3307  fb73				   .L0156		;  rem  if you let go of the fire button, the missile shot is turned off,
   3308  fb73
   3309  fb73				   .L0157		;  rem  and the gunshot travel length variable (e) is reset to 0.
   3310  fb73
   3311  fb73				   .L0158		;  rem ------------------------------------------------------------------
   3312  fb73
   3313  fb73				   .L0159		;  if !joy0fire then missile0x = 0 : missile0y = 0 : e = 0
   3314  fb73
   3315  fb73		       24 0c		      bit	INPT4
   3316  fb75		       10 08		      BPL	.skipL0159
   3317  fb77				   .condpart80
   3318  fb77		       a9 00		      LDA	#0
   3319  fb79		       85 82		      STA	missile0x
   3320  fb7b		       85 91		      STA	missile0y
   3321  fb7d		       85 d8		      STA	e
   3322  fb7f				   .skipL0159
   3323  fb7f				   .
   3324  fb7f							; 
   3325  fb7f
   3326  fb7f				   .L0160		;  rem ------------------------------------------------------------------
   3327  fb7f
   3328  fb7f				   .L0161		;  rem  Fire the Missile
   3329  fb7f
   3330  fb7f				   .L0162		;  rem    This code is what actually fires the missile.
   3331  fb7f
   3332  fb7f				   .L0163		;  rem  
   3333  fb7f
   3334  fb7f				   .L0164		;  rem  It checks for a combination of pressing the fire button and
   3335  fb7f
   3336  fb7f				   .L0165		;  rem    the direction the joystick was most recently moved in to
   3337  fb7f
   3338  fb7f				   .L0166		;  rem    determine which direction to fire the missile.
   3339  fb7f
   3340  fb7f				   .L0167		;  rem
   3341  fb7f
   3342  fb7f				   .L0168		;  rem  the E variable determines the length of the shot
   3343  fb7f
   3344  fb7f				   .L0169		;  rem ------------------------------------------------------------------
   3345  fb7f
   3346  fb7f				   .
   3347  fb7f							; 
   3348  fb7f
   3349  fb7f				   .L0170		;  rem diagonal shots
   3350  fb7f
   3351  fb7f				   .L0171		;  if joy0fire  &&  c{0} then missile0x = player0x + 7 + e : missile0y = player0y - 3 + e
   3352  fb7f
   3353  fb7f		       24 0c		      bit	INPT4
   3354  fb81		       30 19		      BMI	.skipL0171
   3355  fb83				   .condpart81
   3356  fb83		       a5 d6		      LDA	c
   3357  fb85		       4a		      LSR
   3358  fb86		       90 14		      BCC	.skip81then
   3359  fb88				   .condpart82
   3360  fb88							; complex statement detected
   3361  fb88		       a5 80		      LDA	player0x
   3362  fb8a		       18		      CLC
   3363  fb8b		       69 07		      ADC	#7
   3364  fb8d		       18		      CLC
   3365  fb8e		       65 d8		      ADC	e
   3366  fb90		       85 82		      STA	missile0x
   3367  fb92							; complex statement detected
   3368  fb92		       a5 85		      LDA	player0y
   3369  fb94		       38		      SEC
   3370  fb95		       e9 03		      SBC	#3
   3371  fb97		       18		      CLC
   3372  fb98		       65 d8		      ADC	e
   3373  fb9a		       85 91		      STA	missile0y
   3374  fb9c				   .skip81then
   3375  fb9c				   .skipL0171
   3376  fb9c				   .L0172		;  if joy0fire  &&  c{5} then missile0x = player0x - e : missile0y = player0y - 7 - e
   3377  fb9c
   3378  fb9c		       24 0c		      bit	INPT4
   3379  fb9e		       30 17		      BMI	.skipL0172
   3380  fba0				   .condpart83
   3381  fba0		       a5 d6		      LDA	c
   3382  fba2		       29 20		      AND	#32
   3383  fba4		       f0 11		      BEQ	.skip83then
   3384  fba6				   .condpart84
   3385  fba6		       a5 80		      LDA	player0x
   3386  fba8		       38		      SEC
   3387  fba9		       e5 d8		      SBC	e
   3388  fbab		       85 82		      STA	missile0x
   3389  fbad							; complex statement detected
   3390  fbad		       a5 85		      LDA	player0y
   3391  fbaf		       38		      SEC
   3392  fbb0		       e9 07		      SBC	#7
   3393  fbb2		       38		      SEC
   3394  fbb3		       e5 d8		      SBC	e
   3395  fbb5		       85 91		      STA	missile0y
   3396  fbb7				   .skip83then
   3397  fbb7				   .skipL0172
   3398  fbb7				   .L0173		;  if joy0fire  &&  c{7} then missile0x = player0x - e : missile0y = player0y + 1 + e
   3399  fbb7
   3400  fbb7		       24 0c		      bit	INPT4
   3401  fbb9		       30 15		      BMI	.skipL0173
   3402  fbbb				   .condpart85
   3403  fbbb		       24 d6		      BIT	c
   3404  fbbd		       10 11		      BPL	.skip85then
   3405  fbbf				   .condpart86
   3406  fbbf		       a5 80		      LDA	player0x
   3407  fbc1		       38		      SEC
   3408  fbc2		       e5 d8		      SBC	e
   3409  fbc4		       85 82		      STA	missile0x
   3410  fbc6							; complex statement detected
   3411  fbc6		       a5 85		      LDA	player0y
   3412  fbc8		       18		      CLC
   3413  fbc9		       69 01		      ADC	#1
   3414  fbcb		       18		      CLC
   3415  fbcc		       65 d8		      ADC	e
   3416  fbce		       85 91		      STA	missile0y
   3417  fbd0				   .skip85then
   3418  fbd0				   .skipL0173
   3419  fbd0				   .L0174		;  if joy0fire  &&  c{6} then missile0x = player0x + 7 + e : missile0y = player0y - 7 - e
   3420  fbd0
   3421  fbd0		       24 0c		      bit	INPT4
   3422  fbd2		       30 18		      BMI	.skipL0174
   3423  fbd4				   .condpart87
   3424  fbd4		       24 d6		      BIT	c
   3425  fbd6		       50 14		      BVC	.skip87then
   3426  fbd8				   .condpart88
   3427  fbd8							; complex statement detected
   3428  fbd8		       a5 80		      LDA	player0x
   3429  fbda		       18		      CLC
   3430  fbdb		       69 07		      ADC	#7
   3431  fbdd		       18		      CLC
   3432  fbde		       65 d8		      ADC	e
   3433  fbe0		       85 82		      STA	missile0x
   3434  fbe2							; complex statement detected
   3435  fbe2		       a5 85		      LDA	player0y
   3436  fbe4		       38		      SEC
   3437  fbe5		       e9 07		      SBC	#7
   3438  fbe7		       38		      SEC
   3439  fbe8		       e5 d8		      SBC	e
   3440  fbea		       85 91		      STA	missile0y
   3441  fbec				   .skip87then
   3442  fbec				   .skipL0174
   3443  fbec				   .
   3444  fbec							; 
   3445  fbec
   3446  fbec				   .L0175		;  rem left and right shots
   3447  fbec
   3448  fbec				   .L0176		;  if joy0fire  &&  c{3} then missile0x = player0x - e : missile0y = player0y - 5
   3449  fbec
   3450  fbec		       24 0c		      bit	INPT4
   3451  fbee		       30 14		      BMI	.skipL0176
   3452  fbf0				   .condpart89
   3453  fbf0		       a5 d6		      LDA	c
   3454  fbf2		       29 08		      AND	#8
   3455  fbf4		       f0 0e		      BEQ	.skip89then
   3456  fbf6				   .condpart90
   3457  fbf6		       a5 80		      LDA	player0x
   3458  fbf8		       38		      SEC
   3459  fbf9		       e5 d8		      SBC	e
   3460  fbfb		       85 82		      STA	missile0x
   3461  fbfd		       a5 85		      LDA	player0y
   3462  fbff		       38		      SEC
   3463  fc00		       e9 05		      SBC	#5
   3464  fc02		       85 91		      STA	missile0y
   3465  fc04				   .skip89then
   3466  fc04				   .skipL0176
   3467  fc04				   .L0177		;  if joy0fire  &&  c{4} then missile0x = player0x + 8 + e : missile0y = player0y - 5
   3468  fc04
   3469  fc04		       24 0c		      bit	INPT4
   3470  fc06		       30 17		      BMI	.skipL0177
   3471  fc08				   .condpart91
   3472  fc08		       a5 d6		      LDA	c
   3473  fc0a		       29 10		      AND	#16
   3474  fc0c		       f0 11		      BEQ	.skip91then
   3475  fc0e				   .condpart92
   3476  fc0e							; complex statement detected
   3477  fc0e		       a5 80		      LDA	player0x
   3478  fc10		       18		      CLC
   3479  fc11		       69 08		      ADC	#8
   3480  fc13		       18		      CLC
   3481  fc14		       65 d8		      ADC	e
   3482  fc16		       85 82		      STA	missile0x
   3483  fc18		       a5 85		      LDA	player0y
   3484  fc1a		       38		      SEC
   3485  fc1b		       e9 05		      SBC	#5
   3486  fc1d		       85 91		      STA	missile0y
   3487  fc1f				   .skip91then
   3488  fc1f				   .skipL0177
   3489  fc1f				   .
   3490  fc1f							; 
   3491  fc1f
   3492  fc1f				   .L0178		;  rem up and down shots
   3493  fc1f
   3494  fc1f				   .L0179		;  if joy0fire  &&  c{1} then missile0x = player0x + 5 : missile0y = player0y - 10 - e
   3495  fc1f
   3496  fc1f		       24 0c		      bit	INPT4
   3497  fc21		       30 17		      BMI	.skipL0179
   3498  fc23				   .condpart93
   3499  fc23		       a5 d6		      LDA	c
   3500  fc25		       29 02		      AND	#2
   3501  fc27		       f0 11		      BEQ	.skip93then
   3502  fc29				   .condpart94
   3503  fc29		       a5 80		      LDA	player0x
   3504  fc2b		       18		      CLC
   3505  fc2c		       69 05		      ADC	#5
   3506  fc2e		       85 82		      STA	missile0x
   3507  fc30							; complex statement detected
   3508  fc30		       a5 85		      LDA	player0y
   3509  fc32		       38		      SEC
   3510  fc33		       e9 0a		      SBC	#10
   3511  fc35		       38		      SEC
   3512  fc36		       e5 d8		      SBC	e
   3513  fc38		       85 91		      STA	missile0y
   3514  fc3a				   .skip93then
   3515  fc3a				   .skipL0179
   3516  fc3a				   .L0180		;  if joy0fire  &&  c{2} then missile0x = player0x + 5 : missile0y = player0y + 3 + e
   3517  fc3a
   3518  fc3a		       24 0c		      bit	INPT4
   3519  fc3c		       30 17		      BMI	.skipL0180
   3520  fc3e				   .condpart95
   3521  fc3e		       a5 d6		      LDA	c
   3522  fc40		       29 04		      AND	#4
   3523  fc42		       f0 11		      BEQ	.skip95then
   3524  fc44				   .condpart96
   3525  fc44		       a5 80		      LDA	player0x
   3526  fc46		       18		      CLC
   3527  fc47		       69 05		      ADC	#5
   3528  fc49		       85 82		      STA	missile0x
   3529  fc4b							; complex statement detected
   3530  fc4b		       a5 85		      LDA	player0y
   3531  fc4d		       18		      CLC
   3532  fc4e		       69 03		      ADC	#3
   3533  fc50		       18		      CLC
   3534  fc51		       65 d8		      ADC	e
   3535  fc53		       85 91		      STA	missile0y
   3536  fc55				   .skip95then
   3537  fc55				   .skipL0180
   3538  fc55				   .
   3539  fc55							; 
   3540  fc55
   3541  fc55				   .L0181		;  rem ------------------------------------------------------------------
   3542  fc55
   3543  fc55				   .L0182		;  rem This stops the animation and shows a still sprite when you're 
   3544  fc55
   3545  fc55				   .L0183		;  rem not moving.
   3546  fc55
   3547  fc55				   .L0184		;  rem ------------------------------------------------------------------
   3548  fc55
   3549  fc55				   .L0185		;  if !joy0up	&&  !joy0down  &&  !joy0left  &&  !joy0right then y = 30
   3550  fc55
   3551  fc55		       a9 10		      lda	#$10
   3552  fc57		       2c 80 02 	      bit	SWCHA
   3553  fc5a		       f0 15		      BEQ	.skipL0185
   3554  fc5c				   .condpart97
   3555  fc5c		       a9 20		      lda	#$20
   3556  fc5e		       2c 80 02 	      bit	SWCHA
   3557  fc61		       f0 0e		      BEQ	.skip97then
   3558  fc63				   .condpart98
   3559  fc63		       2c 80 02 	      bit	SWCHA
   3560  fc66		       50 09		      BVC	.skip98then
   3561  fc68				   .condpart99
   3562  fc68		       2c 80 02 	      bit	SWCHA
   3563  fc6b		       10 04		      BPL	.skip99then
   3564  fc6d				   .condpart100
   3565  fc6d		       a9 1e		      LDA	#30
   3566  fc6f		       85 ec		      STA	y
   3567  fc71				   .skip99then
   3568  fc71				   .skip98then
   3569  fc71				   .skip97then
   3570  fc71				   .skipL0185
   3571  fc71				   .
   3572  fc71							; 
   3573  fc71
   3574  fc71				   .L0186		;  rem ------------------------------------------------------------------
   3575  fc71
   3576  fc71				   .L0187		;  rem Monster AI: Moves randomly every 40 frames
   3577  fc71
   3578  fc71				   .L0188		;  if z  =  0 then p1x  =   ( rand  &	2 )   -  1  :  p1y  =	( rand	&  2 )	 -  1  :  z  =	30
   3579  fc71
   3580  fc71		       a5 ed		      LDA	z
   3581  fc73		       c9 00		      CMP	#0
   3582  fc75		       d0 18		      BNE	.skipL0188
   3583  fc77				   .condpart101
   3584  fc77							; complex statement detected
   3585  fc77		       20 b9 f3 	      jsr	randomize
   3586  fc7a		       29 02		      AND	#2
   3587  fc7c		       38		      SEC
   3588  fc7d		       e9 01		      SBC	#1
   3589  fc7f		       85 db		      STA	p1x
   3590  fc81							; complex statement detected
   3591  fc81		       20 b9 f3 	      jsr	randomize
   3592  fc84		       29 02		      AND	#2
   3593  fc86		       38		      SEC
   3594  fc87		       e9 01		      SBC	#1
   3595  fc89		       85 da		      STA	p1y
   3596  fc8b		       a9 1e		      LDA	#30
   3597  fc8d		       85 ed		      STA	z
   3598  fc8f				   .skipL0188
   3599  fc8f				   .L0189		;  if z  <  10 then player1x  =  player1x  +  p1x  :  player1y  =  player1y  +  p1y
   3600  fc8f
   3601  fc8f		       a5 ed		      LDA	z
   3602  fc91		       c9 0a		      CMP	#10
   3603  fc93		       b0 0e		      BCS	.skipL0189
   3604  fc95				   .condpart102
   3605  fc95		       a5 81		      LDA	player1x
   3606  fc97		       18		      CLC
   3607  fc98		       65 db		      ADC	p1x
   3608  fc9a		       85 81		      STA	player1x
   3609  fc9c		       a5 86		      LDA	player1y
   3610  fc9e		       18		      CLC
   3611  fc9f		       65 da		      ADC	p1y
   3612  fca1		       85 86		      STA	player1y
   3613  fca3				   .skipL0189
   3614  fca3				   .L0190		;  z  =  z  -	1
   3615  fca3
   3616  fca3		       c6 ed		      DEC	z
   3617  fca5				   .L0191		;  if collision(player1,playfield) then player1x  =  player1x	-  p1x	*  2  :  player1y  =  player1y	-  p1y	*  2  :  p1x  =   - p1x  :  p1y  =   - p1y
   3618  fca5
   3619  fca5		       24 03		      bit	CXP1FB
   3620  fca7		       10 2e		      BPL	.skipL0191
   3621  fca9				   .condpart103
   3622  fca9							; complex statement detected
   3623  fca9		       a5 81		      LDA	player1x
   3624  fcab		       48		      PHA
   3625  fcac		       a5 db		      LDA	p1x
   3626  fcae		       0a		      asl
   3627  fcaf		       a8		      TAY
   3628  fcb0		       68		      PLA
   3629  fcb1		       ba		      TSX
   3630  fcb2		       94 00		      STY	$00,x
   3631  fcb4		       38		      SEC
   3632  fcb5		       f5 00		      SBC	$00,x
   3633  fcb7		       85 81		      STA	player1x
   3634  fcb9							; complex statement detected
   3635  fcb9		       a5 86		      LDA	player1y
   3636  fcbb		       48		      PHA
   3637  fcbc		       a5 da		      LDA	p1y
   3638  fcbe		       0a		      asl
   3639  fcbf		       a8		      TAY
   3640  fcc0		       68		      PLA
   3641  fcc1		       ba		      TSX
   3642  fcc2		       94 00		      STY	$00,x
   3643  fcc4		       38		      SEC
   3644  fcc5		       f5 00		      SBC	$00,x
   3645  fcc7		       85 86		      STA	player1y
   3646  fcc9		       a9 00		      LDA	#0
   3647  fccb		       38		      SEC
   3648  fccc		       e5 db		      SBC	p1x
   3649  fcce		       85 db		      STA	p1x
   3650  fcd0		       a9 00		      LDA	#0
   3651  fcd2		       38		      SEC
   3652  fcd3		       e5 da		      SBC	p1y
   3653  fcd5		       85 da		      STA	p1y
   3654  fcd7				   .skipL0191
   3655  fcd7				   .
   3656  fcd7							; 
   3657  fcd7
   3658  fcd7				   .
   3659  fcd7							; 
   3660  fcd7
   3661  fcd7				   .L0192		;  rem ------------------------------------------------------------------
   3662  fcd7
   3663  fcd7				   .L0193		;  rem Monster AI: fires randomly left
   3664  fcd7
   3665  fcd7				   .L0194		;  if missile1x  =  0 then missile1x  =  player1x  :  missile1y  =  player1y  :  AUDV0  =  10	:  AUDC0  =  8	:  AUDF0  =  4
   3666  fcd7
   3667  fcd7		       a5 83		      LDA	missile1x
   3668  fcd9		       c9 00		      CMP	#0
   3669  fcdb		       d0 14		      BNE	.skipL0194
   3670  fcdd				   .condpart104
   3671  fcdd		       a5 81		      LDA	player1x
   3672  fcdf		       85 83		      STA	missile1x
   3673  fce1		       a5 86		      LDA	player1y
   3674  fce3		       85 88		      STA	missile1y
   3675  fce5		       a9 0a		      LDA	#10
   3676  fce7		       85 19		      STA	AUDV0
   3677  fce9		       a9 08		      LDA	#8
   3678  fceb		       85 15		      STA	AUDC0
   3679  fced		       a9 04		      LDA	#4
   3680  fcef		       85 17		      STA	AUDF0
   3681  fcf1				   .skipL0194
   3682  fcf1				   .L0195		;  missile1x  =  missile1x  -	1
   3683  fcf1
   3684  fcf1		       c6 83		      DEC	missile1x
   3685  fcf3				   .L0196		;  if missile1x  <  0 then missile1x  =  0  :	AUDV0  =  0
   3686  fcf3
   3687  fcf3		       a5 83		      LDA	missile1x
   3688  fcf5		       c9 00		      CMP	#0
   3689  fcf7		       b0 06		      BCS	.skipL0196
   3690  fcf9				   .condpart105
   3691  fcf9		       a9 00		      LDA	#0
   3692  fcfb		       85 83		      STA	missile1x
   3693  fcfd		       85 19		      STA	AUDV0
   3694  fcff				   .skipL0196
   3695  fcff				   .
   3696  fcff							; 
   3697  fcff
   3698  fcff				   .L0197		;  drawscreen
   3699  fcff
   3700  fcff		       20 c3 f3 	      jsr	drawscreen
   3701  fd02				   .
   3702  fd02							; 
   3703  fd02
   3704  fd02				   .L0198		;  goto main
   3705  fd02
   3706  fd02		       4c 41 f5 	      jmp	.main
   3707  fd05
   3708  fd05				   .
   3709  fd05							; 
   3710  fd05
   3711  fd05				   .L0199		;  rem knockback function
   3712  fd05
   3713  fd05				   .knock_player_back
   3714  fd05							; knock_player_back
   3715  fd05
   3716  fd05				   .L0200		;  player0x  =  player0x  -  p0x
   3717  fd05
   3718  fd05		       a5 80		      LDA	player0x
   3719  fd07		       38		      SEC
   3720  fd08		       e5 d9		      SBC	p0x
   3721  fd0a		       85 80		      STA	player0x
   3722  fd0c				   .L0201		;  player0y  =  player0y  -  p0y
   3723  fd0c
   3724  fd0c		       a5 85		      LDA	player0y
   3725  fd0e		       38		      SEC
   3726  fd0f		       e5 d7		      SBC	p0y
   3727  fd11		       85 85		      STA	player0y
   3728  fd13				   .L0202		;  return
   3729  fd13
   3730  fd13		       60		      RTS
   3731  fd14				   .
   3732  fd14							; 
   3733  fd14
   3734  fd14				   .win
   3735  fd14							; win
   3736  fd14
   3737  fd14				   .L0203		;  COLUPF  =  $1C  +	( rand	&  3 )	 :  rem Set random yellow shades for the playfield
   3738  fd14
   3739  fd14							; complex statement detected
   3740  fd14		       a9 1c		      LDA	#$1C
   3741  fd16		       48		      PHA
   3742  fd17		       20 b9 f3 	      jsr	randomize
   3743  fd1a		       29 03		      AND	#3
   3744  fd1c		       ba		      TSX
   3745  fd1d		       e8		      INX
   3746  fd1e		       9a		      TXS
   3747  fd1f		       18		      CLC
   3748  fd20		       75 00		      ADC	$00,x
   3749  fd22		       85 08		      STA	COLUPF
   3750  fd24				   .L0204		;  playfield:
   3751  fd24
   3752  fd24				  -	      ifconst	pfres
   3753  fd24				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3754  fd24					      else
   3755  fd24		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3756  fd26					      endif
   3757  fd26		       4c 55 fd 	      jmp	pflabel4
   3758  fd29				   PF_data4
   3759  fd29		       ff ff		      .byte.b	%11111111, %11111111
   3760  fd2b					      if	(pfwidth>2)
   3761  fd2b		       ff ff		      .byte.b	%11111111, %11111111
   3762  fd2d					      endif
   3763  fd2d		       80 00		      .byte.b	%10000000, %00000000
   3764  fd2f					      if	(pfwidth>2)
   3765  fd2f		       00 80		      .byte.b	%00000000, %10000000
   3766  fd31					      endif
   3767  fd31		       b0 db		      .byte.b	%10110000, %11011011
   3768  fd33					      if	(pfwidth>2)
   3769  fd33		       e0 b6		      .byte.b	%11100000, %10110110
   3770  fd35					      endif
   3771  fd35		       b0 db		      .byte.b	%10110000, %11011011
   3772  fd37					      if	(pfwidth>2)
   3773  fd37		       30 b6		      .byte.b	%00110000, %10110110
   3774  fd39					      endif
   3775  fd39		       b0 db		      .byte.b	%10110000, %11011011
   3776  fd3b					      if	(pfwidth>2)
   3777  fd3b		       18 b6		      .byte.b	%00011000, %10110110
   3778  fd3d					      endif
   3779  fd3d		       b0 db		      .byte.b	%10110000, %11011011
   3780  fd3f					      if	(pfwidth>2)
   3781  fd3f		       0c b6		      .byte.b	%00001100, %10110110
   3782  fd41					      endif
   3783  fd41		       b0 db		      .byte.b	%10110000, %11011011
   3784  fd43					      if	(pfwidth>2)
   3785  fd43		       06 b6		      .byte.b	%00000110, %10110110
   3786  fd45					      endif
   3787  fd45		       b6 db		      .byte.b	%10110110, %11011011
   3788  fd47					      if	(pfwidth>2)
   3789  fd47		       03 86		      .byte.b	%00000011, %10000110
   3790  fd49					      endif
   3791  fd49		       b6 db		      .byte.b	%10110110, %11011011
   3792  fd4b					      if	(pfwidth>2)
   3793  fd4b		       01 b7		      .byte.b	%00000001, %10110111
   3794  fd4d					      endif
   3795  fd4d		       b9 db		      .byte.b	%10111001, %11011011
   3796  fd4f					      if	(pfwidth>2)
   3797  fd4f		       00 b7		      .byte.b	%00000000, %10110111
   3798  fd51					      endif
   3799  fd51		       ff ff		      .byte.b	%11111111, %11111111
   3800  fd53					      if	(pfwidth>2)
   3801  fd53		       ff ff		      .byte.b	%11111111, %11111111
   3802  fd55					      endif
   3803  fd55				   pflabel4
   3804  fd55		       bd 29 fd 	      lda	PF_data4,x
   3805  fd58		       95 a4		      sta	playfield,x
   3806  fd5a		       ca		      dex
   3807  fd5b		       10 f8		      bpl	pflabel4
   3808  fd5d				   .L0205		;  drawscreen
   3809  fd5d
   3810  fd5d		       20 c3 f3 	      jsr	drawscreen
   3811  fd60				   .L0206		;  goto win
   3812  fd60
   3813  fd60		       4c 14 fd 	      jmp	.win
   3814  fd63
   3815  fd63				   .
   3816  fd63							; 
   3817  fd63
   3818  fd63				   .lose
   3819  fd63							; lose
   3820  fd63
   3821  fd63				   .L0207		;  COLUPF  =  $4C  +	( rand	&  3 )	 :  rem Set random red shades for the playfield
   3822  fd63
   3823  fd63							; complex statement detected
   3824  fd63		       a9 4c		      LDA	#$4C
   3825  fd65		       48		      PHA
   3826  fd66		       20 b9 f3 	      jsr	randomize
   3827  fd69		       29 03		      AND	#3
   3828  fd6b		       ba		      TSX
   3829  fd6c		       e8		      INX
   3830  fd6d		       9a		      TXS
   3831  fd6e		       18		      CLC
   3832  fd6f		       75 00		      ADC	$00,x
   3833  fd71		       85 08		      STA	COLUPF
   3834  fd73				   .L0208		;  playfield:
   3835  fd73
   3836  fd73				  -	      ifconst	pfres
   3837  fd73				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3838  fd73					      else
   3839  fd73		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3840  fd75					      endif
   3841  fd75		       4c a4 fd 	      jmp	pflabel5
   3842  fd78				   PF_data5
   3843  fd78		       ff ff		      .byte.b	%11111111, %11111111
   3844  fd7a					      if	(pfwidth>2)
   3845  fd7a		       ff ff		      .byte.b	%11111111, %11111111
   3846  fd7c					      endif
   3847  fd7c		       80 00		      .byte.b	%10000000, %00000000
   3848  fd7e					      if	(pfwidth>2)
   3849  fd7e		       00 80		      .byte.b	%00000000, %10000000
   3850  fd80					      endif
   3851  fd80		       bc 7d		      .byte.b	%10111100, %01111101
   3852  fd82					      if	(pfwidth>2)
   3853  fd82		       90 80		      .byte.b	%10010000, %10000000
   3854  fd84					      endif
   3855  fd84		       a0 11		      .byte.b	%10100000, %00010001
   3856  fd86					      if	(pfwidth>2)
   3857  fd86		       f0 80		      .byte.b	%11110000, %10000000
   3858  fd88					      endif
   3859  fd88		       bc 11		      .byte.b	%10111100, %00010001
   3860  fd8a					      if	(pfwidth>2)
   3861  fd8a		       10 80		      .byte.b	%00010000, %10000000
   3862  fd8c					      endif
   3863  fd8c		       80 c0		      .byte.b	%10000000, %11000000
   3864  fd8e					      if	(pfwidth>2)
   3865  fd8e		       e7 bf		      .byte.b	%11100111, %10111111
   3866  fd90					      endif
   3867  fd90		       a0 5f		      .byte.b	%10100000, %01011111
   3868  fd92					      if	(pfwidth>2)
   3869  fd92		       00 83		      .byte.b	%00000000, %10000011
   3870  fd94					      endif
   3871  fd94		       a0 d1		      .byte.b	%10100000, %11010001
   3872  fd96					      if	(pfwidth>2)
   3873  fd96		       f0 83		      .byte.b	%11110000, %10000011
   3874  fd98					      endif
   3875  fd98		       be 1f		      .byte.b	%10111110, %00011111
   3876  fd9a					      if	(pfwidth>2)
   3877  fd9a		       10 83		      .byte.b	%00010000, %10000011
   3878  fd9c					      endif
   3879  fd9c		       80 e0		      .byte.b	%10000000, %11100000
   3880  fd9e					      if	(pfwidth>2)
   3881  fd9e		       f0 83		      .byte.b	%11110000, %10000011
   3882  fda0					      endif
   3883  fda0		       ff ff		      .byte.b	%11111111, %11111111
   3884  fda2					      if	(pfwidth>2)
   3885  fda2		       ff ff		      .byte.b	%11111111, %11111111
   3886  fda4					      endif
   3887  fda4				   pflabel5
   3888  fda4		       bd 78 fd 	      lda	PF_data5,x
   3889  fda7		       95 a4		      sta	playfield,x
   3890  fda9		       ca		      dex
   3891  fdaa		       10 f8		      bpl	pflabel5
   3892  fdac				   .L0209		;  drawscreen
   3893  fdac
   3894  fdac		       20 c3 f3 	      jsr	drawscreen
   3895  fdaf				   .L0210		;  goto lose
   3896  fdaf
   3897  fdaf		       4c 63 fd 	      jmp	.lose
   3898  fdb2
   3899  fdb2				   .
   3900  fdb2							; 
   3901  fdb2
   3902  fdb2				   .
   3903  fdb2							; 
   3904  fdb2
   3905  fdb2				  -	      if	(<*) > (<(*+10))
   3906  fdb2				  -	      repeat	($100-<*)
   3907  fdb2				  -	      .byte	0
   3908  fdb2				  -	      repend
   3909  fdb2					      endif
   3910  fdb2				   player8then_0
   3911  fdb2		       1c		      .byte.b	%00011100
   3912  fdb3		       18		      .byte.b	%00011000
   3913  fdb4		       18		      .byte.b	%00011000
   3914  fdb5		       20		      .byte.b	%00100000
   3915  fdb6		       18		      .byte.b	%00011000
   3916  fdb7		       5f		      .byte.b	%01011111
   3917  fdb8		       64		      .byte.b	%01100100
   3918  fdb9		       10		      .byte.b	%00010000
   3919  fdba		       18		      .byte.b	%00011000
   3920  fdbb		       18		      .byte.b	%00011000
   3921  fdbc		       00		      .byte.b	%00000000
   3922  fdbd				  -	      if	(<*) > (<(*+10))
   3923  fdbd				  -	      repeat	($100-<*)
   3924  fdbd				  -	      .byte	0
   3925  fdbd				  -	      repend
   3926  fdbd					      endif
   3927  fdbd				   player10then_0
   3928  fdbd		       38		      .byte.b	%00111000
   3929  fdbe		       18		      .byte.b	%00011000
   3930  fdbf		       18		      .byte.b	%00011000
   3931  fdc0		       04		      .byte.b	%00000100
   3932  fdc1		       18		      .byte.b	%00011000
   3933  fdc2		       fa		      .byte.b	%11111010
   3934  fdc3		       26		      .byte.b	%00100110
   3935  fdc4		       08		      .byte.b	%00001000
   3936  fdc5		       18		      .byte.b	%00011000
   3937  fdc6		       18		      .byte.b	%00011000
   3938  fdc7		       00		      .byte.b	%00000000
   3939  fdc8				  -	      if	(<*) > (<(*+10))
   3940  fdc8				  -	      repeat	($100-<*)
   3941  fdc8				  -	      .byte	0
   3942  fdc8				  -	      repend
   3943  fdc8					      endif
   3944  fdc8				   player12then_0
   3945  fdc8		       c2		      .byte.b	%11000010
   3946  fdc9		       46		      .byte.b	%01000110
   3947  fdca		       6c		      .byte.b	%01101100
   3948  fdcb		       38		      .byte.b	%00111000
   3949  fdcc		       14		      .byte.b	%00010100
   3950  fdcd		       3c		      .byte.b	%00111100
   3951  fdce		       24		      .byte.b	%00100100
   3952  fdcf		       08		      .byte.b	%00001000
   3953  fdd0		       18		      .byte.b	%00011000
   3954  fdd1		       18		      .byte.b	%00011000
   3955  fdd2		       00		      .byte.b	%00000000
   3956  fdd3				  -	      if	(<*) > (<(*+10))
   3957  fdd3				  -	      repeat	($100-<*)
   3958  fdd3				  -	      .byte	0
   3959  fdd3				  -	      repend
   3960  fdd3					      endif
   3961  fdd3				   player14then_0
   3962  fdd3		       38		      .byte.b	%00111000
   3963  fdd4		       18		      .byte.b	%00011000
   3964  fdd5		       18		      .byte.b	%00011000
   3965  fdd6		       04		      .byte.b	%00000100
   3966  fdd7		       5a		      .byte.b	%01011010
   3967  fdd8		       3e		      .byte.b	%00111110
   3968  fdd9		       24		      .byte.b	%00100100
   3969  fdda		       08		      .byte.b	%00001000
   3970  fddb		       18		      .byte.b	%00011000
   3971  fddc		       18		      .byte.b	%00011000
   3972  fddd		       00		      .byte.b	%00000000
   3973  fdde				  -	      if	(<*) > (<(*+10))
   3974  fdde				  -	      repeat	($100-<*)
   3975  fdde				  -	      .byte	0
   3976  fdde				  -	      repend
   3977  fdde					      endif
   3978  fdde				   player16then_0
   3979  fdde		       1c		      .byte.b	%00011100
   3980  fddf		       18		      .byte.b	%00011000
   3981  fde0		       18		      .byte.b	%00011000
   3982  fde1		       20		      .byte.b	%00100000
   3983  fde2		       18		      .byte.b	%00011000
   3984  fde3		       5f		      .byte.b	%01011111
   3985  fde4		       64		      .byte.b	%01100100
   3986  fde5		       10		      .byte.b	%00010000
   3987  fde6		       18		      .byte.b	%00011000
   3988  fde7		       18		      .byte.b	%00011000
   3989  fde8		       00		      .byte.b	%00000000
   3990  fde9				  -	      if	(<*) > (<(*+10))
   3991  fde9				  -	      repeat	($100-<*)
   3992  fde9				  -	      .byte	0
   3993  fde9				  -	      repend
   3994  fde9					      endif
   3995  fde9				   player18then_0
   3996  fde9		       43		      .byte.b	%01000011
   3997  fdea		       62		      .byte.b	%01100010
   3998  fdeb		       36		      .byte.b	%00110110
   3999  fdec		       1c		      .byte.b	%00011100
   4000  fded		       28		      .byte.b	%00101000
   4001  fdee		       3c		      .byte.b	%00111100
   4002  fdef		       24		      .byte.b	%00100100
   4003  fdf0		       10		      .byte.b	%00010000
   4004  fdf1		       18		      .byte.b	%00011000
   4005  fdf2		       18		      .byte.b	%00011000
   4006  fdf3		       00		      .byte.b	%00000000
   4007  fdf4				  -	      if	(<*) > (<(*+10))
   4008  fdf4				  -	      repeat	($100-<*)
   4009  fdf4				  -	      .byte	0
   4010  fdf4				  -	      repend
   4011  fdf4					      endif
   4012  fdf4				   player20then_0
   4013  fdf4		       1c		      .byte.b	%00011100
   4014  fdf5		       18		      .byte.b	%00011000
   4015  fdf6		       18		      .byte.b	%00011000
   4016  fdf7		       20		      .byte.b	%00100000
   4017  fdf8		       5a		      .byte.b	%01011010
   4018  fdf9		       7c		      .byte.b	%01111100
   4019  fdfa		       24		      .byte.b	%00100100
   4020  fdfb		       10		      .byte.b	%00010000
   4021  fdfc		       18		      .byte.b	%00011000
   4022  fdfd		       18		      .byte.b	%00011000
   4023  fdfe		       00		      .byte.b	%00000000
   4024  fdff					      if	(<*) > (<(*+23))
   4025  fdff					      repeat	($100-<*)
   4026  fdff		       00		      .byte.b	0
   4027  fe00					      repend
   4028  fe00					      endif
   4029  fe00				   player23then_1
   4030  fe00		       18		      .byte.b	%00011000
   4031  fe01		       18		      .byte.b	%00011000
   4032  fe02		       1c		      .byte.b	%00011100
   4033  fe03		       3e		      .byte.b	%00111110
   4034  fe04		       7f		      .byte.b	%01111111
   4035  fe05		       ff		      .byte.b	%11111111
   4036  fe06		       db		      .byte.b	%11011011
   4037  fe07		       db		      .byte.b	%11011011
   4038  fe08		       ff		      .byte.b	%11111111
   4039  fe09		       7e		      .byte.b	%01111110
   4040  fe0a		       3c		      .byte.b	%00111100
   4041  fe0b		       3c		      .byte.b	%00111100
   4042  fe0c		       7e		      .byte.b	%01111110
   4043  fe0d		       7e		      .byte.b	%01111110
   4044  fe0e		       ff		      .byte.b	%11111111
   4045  fe0f		       6e		      .byte.b	%01101110
   4046  fe10		       24		      .byte.b	%00100100
   4047  fe11		       24		      .byte.b	%00100100
   4048  fe12		       18		      .byte.b	%00011000
   4049  fe13		       18		      .byte.b	%00011000
   4050  fe14		       18		      .byte.b	%00011000
   4051  fe15		       10		      .byte.b	%00010000
   4052  fe16		       10		      .byte.b	%00010000
   4053  fe17		       00		      .byte.b	%00000000
   4054  fe18				  -	      if	(<*) > (<(*+23))
   4055  fe18				  -	      repeat	($100-<*)
   4056  fe18				  -	      .byte	0
   4057  fe18				  -	      repend
   4058  fe18					      endif
   4059  fe18				   player25then_1
   4060  fe18		       18		      .byte.b	%00011000
   4061  fe19		       18		      .byte.b	%00011000
   4062  fe1a		       1c		      .byte.b	%00011100
   4063  fe1b		       3e		      .byte.b	%00111110
   4064  fe1c		       7f		      .byte.b	%01111111
   4065  fe1d		       ff		      .byte.b	%11111111
   4066  fe1e		       db		      .byte.b	%11011011
   4067  fe1f		       db		      .byte.b	%11011011
   4068  fe20		       ff		      .byte.b	%11111111
   4069  fe21		       7e		      .byte.b	%01111110
   4070  fe22		       3c		      .byte.b	%00111100
   4071  fe23		       3c		      .byte.b	%00111100
   4072  fe24		       7e		      .byte.b	%01111110
   4073  fe25		       6e		      .byte.b	%01101110
   4074  fe26		       df		      .byte.b	%11011111
   4075  fe27		       6e		      .byte.b	%01101110
   4076  fe28		       24		      .byte.b	%00100100
   4077  fe29		       24		      .byte.b	%00100100
   4078  fe2a		       18		      .byte.b	%00011000
   4079  fe2b		       18		      .byte.b	%00011000
   4080  fe2c		       18		      .byte.b	%00011000
   4081  fe2d		       10		      .byte.b	%00010000
   4082  fe2e		       10		      .byte.b	%00010000
   4083  fe2f		       00		      .byte.b	%00000000
   4084  fe30				  -	      if	(<*) > (<(*+23))
   4085  fe30				  -	      repeat	($100-<*)
   4086  fe30				  -	      .byte	0
   4087  fe30				  -	      repend
   4088  fe30					      endif
   4089  fe30				   player27then_1
   4090  fe30		       18		      .byte.b	%00011000
   4091  fe31		       18		      .byte.b	%00011000
   4092  fe32		       1c		      .byte.b	%00011100
   4093  fe33		       3e		      .byte.b	%00111110
   4094  fe34		       7f		      .byte.b	%01111111
   4095  fe35		       ff		      .byte.b	%11111111
   4096  fe36		       db		      .byte.b	%11011011
   4097  fe37		       db		      .byte.b	%11011011
   4098  fe38		       ff		      .byte.b	%11111111
   4099  fe39		       7e		      .byte.b	%01111110
   4100  fe3a		       3c		      .byte.b	%00111100
   4101  fe3b		       3c		      .byte.b	%00111100
   4102  fe3c		       7e		      .byte.b	%01111110
   4103  fe3d		       7e		      .byte.b	%01111110
   4104  fe3e		       bf		      .byte.b	%10111111
   4105  fe3f		       6e		      .byte.b	%01101110
   4106  fe40		       24		      .byte.b	%00100100
   4107  fe41		       24		      .byte.b	%00100100
   4108  fe42		       18		      .byte.b	%00011000
   4109  fe43		       18		      .byte.b	%00011000
   4110  fe44		       18		      .byte.b	%00011000
   4111  fe45		       18		      .byte.b	%00011000
   4112  fe46		       18		      .byte.b	%00011000
   4113  fe47		       00		      .byte.b	%00000000
   4114  fe48				  -	      if	(<*) > (<(*+23))
   4115  fe48				  -	      repeat	($100-<*)
   4116  fe48				  -	      .byte	0
   4117  fe48				  -	      repend
   4118  fe48					      endif
   4119  fe48				   player29then_1
   4120  fe48		       18		      .byte.b	%00011000
   4121  fe49		       18		      .byte.b	%00011000
   4122  fe4a		       18		      .byte.b	%00011000
   4123  fe4b		       18		      .byte.b	%00011000
   4124  fe4c		       3c		      .byte.b	%00111100
   4125  fe4d		       3c		      .byte.b	%00111100
   4126  fe4e		       18		      .byte.b	%00011000
   4127  fe4f		       18		      .byte.b	%00011000
   4128  fe50		       18		      .byte.b	%00011000
   4129  fe51		       3c		      .byte.b	%00111100
   4130  fe52		       7e		      .byte.b	%01111110
   4131  fe53		       66		      .byte.b	%01100110
   4132  fe54		       3c		      .byte.b	%00111100
   4133  fe55		       18		      .byte.b	%00011000
   4134  fe56		       18		      .byte.b	%00011000
   4135  fe57		       24		      .byte.b	%00100100
   4136  fe58		       24		      .byte.b	%00100100
   4137  fe59		       24		      .byte.b	%00100100
   4138  fe5a		       66		      .byte.b	%01100110
   4139  fe5b		       66		      .byte.b	%01100110
   4140  fe5c		       24		      .byte.b	%00100100
   4141  fe5d		       24		      .byte.b	%00100100
   4142  fe5e		       42		      .byte.b	%01000010
   4143  fe5f		       00		      .byte.b	%00000000
   4144  fe60				  -	      if	(<*) > (<(*+23))
   4145  fe60				  -	      repeat	($100-<*)
   4146  fe60				  -	      .byte	0
   4147  fe60				  -	      repend
   4148  fe60					      endif
   4149  fe60				   player31then_1
   4150  fe60		       18		      .byte.b	%00011000
   4151  fe61		       18		      .byte.b	%00011000
   4152  fe62		       18		      .byte.b	%00011000
   4153  fe63		       18		      .byte.b	%00011000
   4154  fe64		       3c		      .byte.b	%00111100
   4155  fe65		       3c		      .byte.b	%00111100
   4156  fe66		       18		      .byte.b	%00011000
   4157  fe67		       18		      .byte.b	%00011000
   4158  fe68		       18		      .byte.b	%00011000
   4159  fe69		       3c		      .byte.b	%00111100
   4160  fe6a		       7e		      .byte.b	%01111110
   4161  fe6b		       66		      .byte.b	%01100110
   4162  fe6c		       3c		      .byte.b	%00111100
   4163  fe6d		       18		      .byte.b	%00011000
   4164  fe6e		       18		      .byte.b	%00011000
   4165  fe6f		       24		      .byte.b	%00100100
   4166  fe70		       24		      .byte.b	%00100100
   4167  fe71		       24		      .byte.b	%00100100
   4168  fe72		       66		      .byte.b	%01100110
   4169  fe73		       66		      .byte.b	%01100110
   4170  fe74		       04		      .byte.b	%00000100
   4171  fe75		       08		      .byte.b	%00001000
   4172  fe76		       10		      .byte.b	%00010000
   4173  fe77		       00		      .byte.b	%00000000
   4174  fe78				  -	      if	(<*) > (<(*+23))
   4175  fe78				  -	      repeat	($100-<*)
   4176  fe78				  -	      .byte	0
   4177  fe78				  -	      repend
   4178  fe78					      endif
   4179  fe78				   player33then_1
   4180  fe78		       18		      .byte.b	%00011000
   4181  fe79		       18		      .byte.b	%00011000
   4182  fe7a		       18		      .byte.b	%00011000
   4183  fe7b		       18		      .byte.b	%00011000
   4184  fe7c		       3c		      .byte.b	%00111100
   4185  fe7d		       3c		      .byte.b	%00111100
   4186  fe7e		       18		      .byte.b	%00011000
   4187  fe7f		       18		      .byte.b	%00011000
   4188  fe80		       18		      .byte.b	%00011000
   4189  fe81		       3c		      .byte.b	%00111100
   4190  fe82		       7e		      .byte.b	%01111110
   4191  fe83		       66		      .byte.b	%01100110
   4192  fe84		       3c		      .byte.b	%00111100
   4193  fe85		       18		      .byte.b	%00011000
   4194  fe86		       18		      .byte.b	%00011000
   4195  fe87		       24		      .byte.b	%00100100
   4196  fe88		       24		      .byte.b	%00100100
   4197  fe89		       24		      .byte.b	%00100100
   4198  fe8a		       66		      .byte.b	%01100110
   4199  fe8b		       66		      .byte.b	%01100110
   4200  fe8c		       20		      .byte.b	%00100000
   4201  fe8d		       10		      .byte.b	%00010000
   4202  fe8e		       08		      .byte.b	%00001000
   4203  fe8f		       00		      .byte.b	%00000000
   4204  fe90				  -	      if	(<*) > (<(*+23))
   4205  fe90				  -	      repeat	($100-<*)
   4206  fe90				  -	      .byte	0
   4207  fe90				  -	      repend
   4208  fe90					      endif
   4209  fe90				   player35then_1
   4210  fe90		       18		      .byte.b	%00011000
   4211  fe91		       3c		      .byte.b	%00111100
   4212  fe92		       7e		      .byte.b	%01111110
   4213  fe93		       e7		      .byte.b	%11100111
   4214  fe94		       db		      .byte.b	%11011011
   4215  fe95		       c3		      .byte.b	%11000011
   4216  fe96		       7e		      .byte.b	%01111110
   4217  fe97		       24		      .byte.b	%00100100
   4218  fe98		       24		      .byte.b	%00100100
   4219  fe99		       3c		      .byte.b	%00111100
   4220  fe9a		       7e		      .byte.b	%01111110
   4221  fe9b		       7e		      .byte.b	%01111110
   4222  fe9c		       66		      .byte.b	%01100110
   4223  fe9d		       24		      .byte.b	%00100100
   4224  fe9e		       24		      .byte.b	%00100100
   4225  fe9f		       42		      .byte.b	%01000010
   4226  fea0		       18		      .byte.b	%00011000
   4227  fea1		       18		      .byte.b	%00011000
   4228  fea2		       18		      .byte.b	%00011000
   4229  fea3		       10		      .byte.b	%00010000
   4230  fea4		       10		      .byte.b	%00010000
   4231  fea5		       10		      .byte.b	%00010000
   4232  fea6		       08		      .byte.b	%00001000
   4233  fea7		       00		      .byte.b	%00000000
   4234  fea8				  -	      if	(<*) > (<(*+23))
   4235  fea8				  -	      repeat	($100-<*)
   4236  fea8				  -	      .byte	0
   4237  fea8				  -	      repend
   4238  fea8					      endif
   4239  fea8				   player37then_1
   4240  fea8		       18		      .byte.b	%00011000
   4241  fea9		       3c		      .byte.b	%00111100
   4242  feaa		       7e		      .byte.b	%01111110
   4243  feab		       e7		      .byte.b	%11100111
   4244  feac		       db		      .byte.b	%11011011
   4245  fead		       c3		      .byte.b	%11000011
   4246  feae		       7e		      .byte.b	%01111110
   4247  feaf		       24		      .byte.b	%00100100
   4248  feb0		       24		      .byte.b	%00100100
   4249  feb1		       3c		      .byte.b	%00111100
   4250  feb2		       7e		      .byte.b	%01111110
   4251  feb3		       7e		      .byte.b	%01111110
   4252  feb4		       66		      .byte.b	%01100110
   4253  feb5		       24		      .byte.b	%00100100
   4254  feb6		       24		      .byte.b	%00100100
   4255  feb7		       42		      .byte.b	%01000010
   4256  feb8		       18		      .byte.b	%00011000
   4257  feb9		       18		      .byte.b	%00011000
   4258  feba		       18		      .byte.b	%00011000
   4259  febb		       10		      .byte.b	%00010000
   4260  febc		       10		      .byte.b	%00010000
   4261  febd		       10		      .byte.b	%00010000
   4262  febe		       08		      .byte.b	%00001000
   4263  febf		       00		      .byte.b	%00000000
   4264  fec0				  -	      if	(<*) > (<(*+23))
   4265  fec0				  -	      repeat	($100-<*)
   4266  fec0				  -	      .byte	0
   4267  fec0				  -	      repend
   4268  fec0					      endif
   4269  fec0				   player39then_1
   4270  fec0		       18		      .byte.b	%00011000
   4271  fec1		       3c		      .byte.b	%00111100
   4272  fec2		       7e		      .byte.b	%01111110
   4273  fec3		       e7		      .byte.b	%11100111
   4274  fec4		       db		      .byte.b	%11011011
   4275  fec5		       c3		      .byte.b	%11000011
   4276  fec6		       7e		      .byte.b	%01111110
   4277  fec7		       24		      .byte.b	%00100100
   4278  fec8		       66		      .byte.b	%01100110
   4279  fec9		       7e		      .byte.b	%01111110
   4280  feca		       ff		      .byte.b	%11111111
   4281  fecb		       ff		      .byte.b	%11111111
   4282  fecc		       7e		      .byte.b	%01111110
   4283  fecd		       66		      .byte.b	%01100110
   4284  fece		       24		      .byte.b	%00100100
   4285  fecf		       24		      .byte.b	%00100100
   4286  fed0		       24		      .byte.b	%00100100
   4287  fed1		       18		      .byte.b	%00011000
   4288  fed2		       18		      .byte.b	%00011000
   4289  fed3		       18		      .byte.b	%00011000
   4290  fed4		       18		      .byte.b	%00011000
   4291  fed5		       10		      .byte.b	%00010000
   4292  fed6		       10		      .byte.b	%00010000
   4293  fed7		       08		      .byte.b	%00001000
   4294  fed8					      if	ECHOFIRST
      196 bytes of ROM space left
   4295  fed8					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   4296  fed8					      endif
   4297  fed8		       00 01	   ECHOFIRST  =	1
   4298  fed8
   4299  fed8
   4300  fed8
   4301  fed8							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4302  fed8
   4303  fed8							; feel free to modify the score graphics - just keep each digit 8 high
   4304  fed8							; and keep the conditional compilation stuff intact
   4305  fed8				  -	      ifconst	ROM2k
   4306  fed8				  -	      ORG	$F7AC-8
   4307  fed8					      else
   4308  fed8				  -	      ifconst	bankswitch
   4309  fed8				  -	      if	bankswitch == 8
   4310  fed8				  -	      ORG	$2F94-bscode_length
   4311  fed8				  -	      RORG	$FF94-bscode_length
   4312  fed8				  -	      endif
   4313  fed8				  -	      if	bankswitch == 16
   4314  fed8				  -	      ORG	$4F94-bscode_length
   4315  fed8				  -	      RORG	$FF94-bscode_length
   4316  fed8				  -	      endif
   4317  fed8				  -	      if	bankswitch == 32
   4318  fed8				  -	      ORG	$8F94-bscode_length
   4319  fed8				  -	      RORG	$FF94-bscode_length
   4320  fed8				  -	      endif
   4321  fed8				  -	      if	bankswitch == 64
   4322  fed8				  -	      ORG	$10F80-bscode_length
   4323  fed8				  -	      RORG	$1FF80-bscode_length
   4324  fed8				  -	      endif
   4325  fed8					      else
   4326  ff9c					      ORG	$FF9C
   4327  ff9c					      endif
   4328  ff9c					      endif
   4329  ff9c
   4330  ff9c							; font equates
   4331  ff9c		       00 01	   .21stcentury =	1
   4332  ff9c		       00 02	   alarmclock =	2
   4333  ff9c		       00 03	   handwritten =	3
   4334  ff9c		       00 04	   interrupted =	4
   4335  ff9c		       00 05	   retroputer =	5
   4336  ff9c		       00 06	   whimsey    =	6
   4337  ff9c		       00 07	   tiny       =	7
   4338  ff9c		       00 08	   hex	      =	8
   4339  ff9c
   4340  ff9c				  -	      ifconst	font
   4341  ff9c				  -	      if	font == hex
   4342  ff9c				  -	      ORG	. - 48
   4343  ff9c				  -	      endif
   4344  ff9c					      endif
   4345  ff9c
   4346  ff9c				   scoretable
   4347  ff9c
   4348  ff9c				  -	      ifconst	font
   4349  ff9c				  -	      if	font == .21stcentury
   4350  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   4351  ff9c				  -	      endif
   4352  ff9c				  -	      if	font == alarmclock
   4353  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   4354  ff9c				  -	      endif
   4355  ff9c				  -	      if	font == handwritten
   4356  ff9c				  -	      include	"score_graphics.asm.handwritten"
   4357  ff9c				  -	      endif
   4358  ff9c				  -	      if	font == interrupted
   4359  ff9c				  -	      include	"score_graphics.asm.interrupted"
   4360  ff9c				  -	      endif
   4361  ff9c				  -	      if	font == retroputer
   4362  ff9c				  -	      include	"score_graphics.asm.retroputer"
   4363  ff9c				  -	      endif
   4364  ff9c				  -	      if	font == whimsey
   4365  ff9c				  -	      include	"score_graphics.asm.whimsey"
   4366  ff9c				  -	      endif
   4367  ff9c				  -	      if	font == tiny
   4368  ff9c				  -	      include	"score_graphics.asm.tiny"
   4369  ff9c				  -	      endif
   4370  ff9c				  -	      if	font == hex
   4371  ff9c				  -	      include	"score_graphics.asm.hex"
   4372  ff9c				  -	      endif
   4373  ff9c					      else		; default font
   4374  ff9c
   4375  ff9c		       3c		      .byte.b	%00111100
   4376  ff9d		       66		      .byte.b	%01100110
   4377  ff9e		       66		      .byte.b	%01100110
   4378  ff9f		       66		      .byte.b	%01100110
   4379  ffa0		       66		      .byte.b	%01100110
   4380  ffa1		       66		      .byte.b	%01100110
   4381  ffa2		       66		      .byte.b	%01100110
   4382  ffa3		       3c		      .byte.b	%00111100
   4383  ffa4
   4384  ffa4		       7e		      .byte.b	%01111110
   4385  ffa5		       18		      .byte.b	%00011000
   4386  ffa6		       18		      .byte.b	%00011000
   4387  ffa7		       18		      .byte.b	%00011000
   4388  ffa8		       18		      .byte.b	%00011000
   4389  ffa9		       38		      .byte.b	%00111000
   4390  ffaa		       18		      .byte.b	%00011000
   4391  ffab		       08		      .byte.b	%00001000
   4392  ffac
   4393  ffac		       7e		      .byte.b	%01111110
   4394  ffad		       60		      .byte.b	%01100000
   4395  ffae		       60		      .byte.b	%01100000
   4396  ffaf		       3c		      .byte.b	%00111100
   4397  ffb0		       06		      .byte.b	%00000110
   4398  ffb1		       06		      .byte.b	%00000110
   4399  ffb2		       46		      .byte.b	%01000110
   4400  ffb3		       3c		      .byte.b	%00111100
   4401  ffb4
   4402  ffb4		       3c		      .byte.b	%00111100
   4403  ffb5		       46		      .byte.b	%01000110
   4404  ffb6		       06		      .byte.b	%00000110
   4405  ffb7		       06		      .byte.b	%00000110
   4406  ffb8		       1c		      .byte.b	%00011100
   4407  ffb9		       06		      .byte.b	%00000110
   4408  ffba		       46		      .byte.b	%01000110
   4409  ffbb		       3c		      .byte.b	%00111100
   4410  ffbc
   4411  ffbc		       0c		      .byte.b	%00001100
   4412  ffbd		       0c		      .byte.b	%00001100
   4413  ffbe		       7e		      .byte.b	%01111110
   4414  ffbf		       4c		      .byte.b	%01001100
   4415  ffc0		       4c		      .byte.b	%01001100
   4416  ffc1		       2c		      .byte.b	%00101100
   4417  ffc2		       1c		      .byte.b	%00011100
   4418  ffc3		       0c		      .byte.b	%00001100
   4419  ffc4
   4420  ffc4		       3c		      .byte.b	%00111100
   4421  ffc5		       46		      .byte.b	%01000110
   4422  ffc6		       06		      .byte.b	%00000110
   4423  ffc7		       06		      .byte.b	%00000110
   4424  ffc8		       3c		      .byte.b	%00111100
   4425  ffc9		       60		      .byte.b	%01100000
   4426  ffca		       60		      .byte.b	%01100000
   4427  ffcb		       7e		      .byte.b	%01111110
   4428  ffcc
   4429  ffcc		       3c		      .byte.b	%00111100
   4430  ffcd		       66		      .byte.b	%01100110
   4431  ffce		       66		      .byte.b	%01100110
   4432  ffcf		       66		      .byte.b	%01100110
   4433  ffd0		       7c		      .byte.b	%01111100
   4434  ffd1		       60		      .byte.b	%01100000
   4435  ffd2		       62		      .byte.b	%01100010
   4436  ffd3		       3c		      .byte.b	%00111100
   4437  ffd4
   4438  ffd4		       30		      .byte.b	%00110000
   4439  ffd5		       30		      .byte.b	%00110000
   4440  ffd6		       30		      .byte.b	%00110000
   4441  ffd7		       18		      .byte.b	%00011000
   4442  ffd8		       0c		      .byte.b	%00001100
   4443  ffd9		       06		      .byte.b	%00000110
   4444  ffda		       42		      .byte.b	%01000010
   4445  ffdb		       3e		      .byte.b	%00111110
   4446  ffdc
   4447  ffdc		       3c		      .byte.b	%00111100
   4448  ffdd		       66		      .byte.b	%01100110
   4449  ffde		       66		      .byte.b	%01100110
   4450  ffdf		       66		      .byte.b	%01100110
   4451  ffe0		       3c		      .byte.b	%00111100
   4452  ffe1		       66		      .byte.b	%01100110
   4453  ffe2		       66		      .byte.b	%01100110
   4454  ffe3		       3c		      .byte.b	%00111100
   4455  ffe4
   4456  ffe4		       3c		      .byte.b	%00111100
   4457  ffe5		       46		      .byte.b	%01000110
   4458  ffe6		       06		      .byte.b	%00000110
   4459  ffe7		       3e		      .byte.b	%00111110
   4460  ffe8		       66		      .byte.b	%01100110
   4461  ffe9		       66		      .byte.b	%01100110
   4462  ffea		       66		      .byte.b	%01100110
   4463  ffeb		       3c		      .byte.b	%00111100
   4464  ffec
   4465  ffec					      ifnconst	DPC_kernel_options
   4466  ffec
   4467  ffec		       00		      .byte.b	%00000000
   4468  ffed		       00		      .byte.b	%00000000
   4469  ffee		       00		      .byte.b	%00000000
   4470  ffef		       00		      .byte.b	%00000000
   4471  fff0		       00		      .byte.b	%00000000
   4472  fff1		       00		      .byte.b	%00000000
   4473  fff2		       00		      .byte.b	%00000000
   4474  fff3		       00		      .byte.b	%00000000
   4475  fff4
   4476  fff4					      endif
   4477  fff4
   4478  fff4					      endif
   4479  fff4
   4480  fff4				  -	      ifconst	ROM2k
   4481  fff4				  -	      ORG	$F7FC
   4482  fff4					      else
   4483  fff4				  -	      ifconst	bankswitch
   4484  fff4				  -	      if	bankswitch == 8
   4485  fff4				  -	      ORG	$2FF4-bscode_length
   4486  fff4				  -	      RORG	$FFF4-bscode_length
   4487  fff4				  -	      endif
   4488  fff4				  -	      if	bankswitch == 16
   4489  fff4				  -	      ORG	$4FF4-bscode_length
   4490  fff4				  -	      RORG	$FFF4-bscode_length
   4491  fff4				  -	      endif
   4492  fff4				  -	      if	bankswitch == 32
   4493  fff4				  -	      ORG	$8FF4-bscode_length
   4494  fff4				  -	      RORG	$FFF4-bscode_length
   4495  fff4				  -	      endif
   4496  fff4				  -	      if	bankswitch == 64
   4497  fff4				  -	      ORG	$10FE0-bscode_length
   4498  fff4				  -	      RORG	$1FFE0-bscode_length
   4499  fff4				  -	      endif
   4500  fff4					      else
   4501  fffc					      ORG	$FFFC
   4502  fffc					      endif
   4503  fffc					      endif
   4504  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4505  fffc
   4506  fffc				  -	      ifconst	bankswitch
   4507  fffc				  -	      if	bankswitch == 8
   4508  fffc				  -	      ORG	$2FFC
   4509  fffc				  -	      RORG	$FFFC
   4510  fffc				  -	      endif
   4511  fffc				  -	      if	bankswitch == 16
   4512  fffc				  -	      ORG	$4FFC
   4513  fffc				  -	      RORG	$FFFC
   4514  fffc				  -	      endif
   4515  fffc				  -	      if	bankswitch == 32
   4516  fffc				  -	      ORG	$8FFC
   4517  fffc				  -	      RORG	$FFFC
   4518  fffc				  -	      endif
   4519  fffc				  -	      if	bankswitch == 64
   4520  fffc				  -	      ORG	$10FF0
   4521  fffc				  -	      RORG	$1FFF0
   4522  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   4523  fffc				  -	      ORG	$10FF8
   4524  fffc				  -	      RORG	$1FFF8
   4525  fffc				  -	      ifconst	superchip
   4526  fffc				  -	      .byte	"E","F","S","C"
   4527  fffc				  -	      else
   4528  fffc				  -	      .byte	"E","F","E","F"
   4529  fffc				  -	      endif
   4530  fffc				  -	      ORG	$10FFC
   4531  fffc				  -	      RORG	$1FFFC
   4532  fffc				  -	      endif
   4533  fffc					      else
   4534  fffc				  -	      ifconst	ROM2k
   4535  fffc				  -	      ORG	$F7FC
   4536  fffc					      else
   4537  fffc					      ORG	$FFFC
   4538  fffc					      endif
   4539  fffc					      endif
   4540  fffc		       00 f0		      .word.w	(start & $ffff)
   4541  fffe		       00 f0		      .word.w	(start & $ffff)
